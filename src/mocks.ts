export const mockData = {
  "components": {
      "schemas": {
          "DateFormat": {
              "type": "string",
              "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3})$"
          },
          "DateTimeFormat": {
              "type": "string",
              "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3}) ([0-1]\\d|2[0-4])(:[0-5]\\d){2}$"
          },
          "TechNameFormat": {
              "type": "string",
              "pattern": "^[a-zA-Z][_a-zA-Z0-9]*$"
          },
          "BasicFilter": {
              "description": "Объект базового фильтра для запросов с фильтрацией по столбцам таблиц",
              "type": "object",
              "properties": {
                  "attribute": {
                      "$ref": "#/components/schemas/FilterSortingAttribute"
                  },
                  "operator": {
                      "description": "Оператор фильтрации:\n  - `empty` - выводить только пустые значения. Доступен для всех типов данных.\n  Для данного оператора не передаётся поле `value`.\n  - `notEmpty` - выводить только непустые значения. Доступен для всех типов данных.\n  Для данного оператора не передаётся поле `value`.\n  - `contains` - содержит переданное значение. Является регистронезависимым. Используется для строковых, справочных и ссылочных атрибутов.\n  Для справочных и ссылочных атрибутов сравнение идет по атрибуту, выбранному для связи в данном каталоге.\n  - `inEnum` - перечисление. Выводятся записи, атрибут которых имеет значение, совпадающее с одним из введенных в перечисление.\n  Сравнение не зависит от регистра строковых значений. Работает со всеми типами данных кроме типов Флаг, Файл, Таблица и Справочник. Для дат сравнение просходит без учёта времени.\n  Значения передаются через точку с запятой `;`.\n  - `equals` - равно переданному значению или совпадает с переданным значением (в случае сравнения строк). Является регистронезависимым. Используется для любых типов кроме типов Файл и Таблица.\n  Для справочных и ссылочных атрибутов сравнение идет по атрибуту, выбранному для связи в данном каталоге. Для дат сравнение просходит без учёта времени.\n  - `greaterThan` - больше, чем переданное значение. Используется для сравнения чисел и дат (без учёта времени).\n  - `greaterOrEqualsThan` - больше или равно переданному значению. Используется для сравнения чисел и дат (без учёта времени).\n  - `lessThan` - меньше, чем переданное значение. Используется для сравнения чисел и дат (без учёта времени).\n  - `lessOrEqualsThan` - меньше или равно переданному значению. Используется для сравнения чисел и дат (без учёта времени).",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/BasicFilterOperatorTagIdEnum"
                          }
                      ]
                  },
                  "value": {
                      "description": "Значение для сравнения со значением атрибута при применении оператора",
                      "oneOf": [
                          {
                              "type": "string",
                              "description": "Значение для фильтрации по строковому столбцу или дате"
                          },
                          {
                              "type": "integer",
                              "description": "Значение для фильтрации по столбцу с целыми числами"
                          },
                          {
                              "type": "number",
                              "description": "Значение для фильтрации по столбцу с дробными числами"
                          }
                      ]
                  }
              },
              "required": [
                  "attribute",
                  "operator"
              ],
              "example": {
                  "attribute": "dateNextUpdate",
                  "operator": "greaterThan",
                  "value": "01.02.2024 15:25:05"
              }
          },
          "Filter": {
              "description": "Объект расширенного фильтра для запросов с фильтрацией по столбцам таблиц",
              "type": "object",
              "properties": {
                  "attribute": {
                      "$ref": "#/components/schemas/FilterSortingAttribute"
                  },
                  "operator": {
                      "description": "Оператор фильтрации:\n  - `empty` - выводить только пустые значения. Доступен для всех типов данных.\n  Для данного оператора не передаётся поле `value`.\n  - `notEmpty` - выводить только непустые значения. Доступен для всех типов данных.\n  Для данного оператора не передаётся поле `value`.\n  - `contains` - содержит переданное значение. Является регистронезависимым. Используется для строковых, справочных и ссылочных атрибутов.\n  Для ссылочных атрибутов сравнение идет по главному атрибуту ссылочного каталога.\n  Для справочных атрибутов сравнение идет по выбранному столбцу справочника для вывода (defaultColDict), если такой атрибут не выбран, то по столбцу NAME.\n  - `inEnum` - перечисление. Выводятся записи, атрибут которых имеет значение, совпадающее с одним из введенных в перечисление.\n  Сравнение не зависит от регистра строковых значений. Работает со всеми типами данных кроме типов Флаг, Файл, Таблица и Справочник. Для ссылочных атрибутов сравнение идет по главному атрибуту ссылочного каталога.\n  Значения передаются через точку с запятой `;`.\n  - `equals` - равно переданному значению или совпадает с переданным значением (в случае сравнения строк). Является регистронезависимым. Используется для любых типов кроме типов Файл и Таблица.\n  Для ссылочных атрибутов сравнение идет по главному атрибуту ссылочного каталога.\n  Для справочных атрибутов сравнение идет по выбранному столбцу справочника для вывода (defaultColDict), если такой атрибут не выбран, то по столбцу NAME.\n  - `greaterThan` - больше, чем переданное значение. Используется для сравнения чисел и дат.\n  - `greaterOrEqualsThan` - больше или равно переданному значению. Используется для сравнения чисел и дат.\n  - `lessThan` - меньше, чем переданное значение. Используется для сравнения чисел и дат.\n  - `lessOrEqualsThan` - меньше или равно переданному значению. Используется для сравнения чисел и дат.\n  - `startsWith` - начинается с переданного значения. Используется для строковых, справочных и ссылочных атрибутов. Является регистронезависимым.\n  Для ссылочных атрибутов сравнение идет по главному атрибуту ссылочного каталога.\n  Для справочных атрибутов сравнение идет по выбранному столбцу справочника для вывода (defaultColDict), если такой атрибут не выбран, то по столбцу NAME.\n  - `endsWith` - заканчивается на переданное значение. Используется для строковых, справочных и ссылочных атрибутов. Является регистронезависимым.\n  Для ссылочных атрибутов сравнение идет по главному атрибуту ссылочного каталога.\n  Для справочных атрибутов сравнение идет по выбранному столбцу справочника для вывода (defaultColDict), если такой атрибут не выбран, то по столбцу NAME.\n  - `matchesRegexStr` - соответствует регулярному выражению, переданному в виде строки. Используется для строковых, справочных и ссылочных атрибутов.\n  Для ссылочных атрибутов сравнение идет по главному атрибуту ссылочного каталога.\n  Для справочных атрибутов сравнение идет по выбранному столбцу справочника для вывода (defaultColDict), если такой атрибут не выбран, то по столбцу NAME.\n  - `matchesRegexId` - соответствует одному из регулярных выражений, хранящихся в системе. Используется для строковых, справочных и ссылочных атрибутов.\n  Для ссылочных атрибутов сравнение идет по главному атрибуту ссылочного каталога.\n  Для справочных атрибутов сравнение идет по выбранному столбцу справочника для вывода (defaultColDict), если такой атрибут не выбран, то по столбцу NAME.\n  В `value` передается идентификатор регулярного выражения.\n  - `inDict` - перечисление по справочнику. Выводятся записи, в значении которых выбраны все элементы справочника, что и в выбранном множестве для фильтарции. Используется для справочниых атрибутов.\n  В `value` передается список идентификаторов элементов справочника.",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/FilterOperatorTagIdEnum"
                          }
                      ]
                  },
                  "value": {
                      "description": "Значение для сравнения со значением атрибута при применении оператора",
                      "oneOf": [
                          {
                              "type": "string",
                              "description": "Значение для фильтрации по строковому столбцу или дате"
                          },
                          {
                              "type": "integer",
                              "description": "Значение для фильтрации по столбцу с целыми числами"
                          },
                          {
                              "type": "number",
                              "description": "Значение для фильтрации по столбцу с дробными числами"
                          },
                          {
                              "type": "array",
                              "description": "Значение для фильтрации по идентификаторам в операторе `inDict`",
                              "items": {
                                  "type": "integer"
                              }
                          }
                      ]
                  }
              },
              "required": [
                  "attribute",
                  "operator"
              ],
              "example": {
                  "attribute": "periodUpdate",
                  "operator": "greaterThan",
                  "value": "01.02.2024 15:25:05"
              }
          },
          "FilterSortingAttribute": {
              "description": "Техническое наименование столбца, по которому производится сортировка или фильтрация.\n\nДля атрибутов каталога передается в следующем формате:\n  - \"field_{attrId}\" для каталога заполнения\n  - \"field_{catalogAttrId}\" для каталога публикации\n      - attrId - идентификатор атрибута в ЕХД\n      - catalogAttrId - идентификатор атрибута каталога",
              "type": "string"
          },
          "Sorting": {
              "description": "Объект сортировки, для запросов с многоуровневой сортировкой по таблице",
              "type": "object",
              "properties": {
                  "attribute": {
                      "$ref": "#/components/schemas/FilterSortingAttribute"
                  },
                  "order": {
                      "$ref": "#/components/schemas/SortingOrderTagIdEnum"
                  }
              },
              "required": [
                  "attribute",
                  "order"
              ],
              "example": {
                  "attribute": "field_123",
                  "order": "desc"
              }
          },
          "ApiResponse": {
              "description": "Ответ на запрос в API\nИспользуется для описания ошибок и базовых ответов (Ok, Created и пр.)",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "id": {
                      "description": "Идентифкатор ресурса, для которого передан ответ\n\nВозможные варианты использования:\n  - Идентификатор созданного ресурса в POST-запросе;\n  - Идентификатор ресурса, для которого возвращена ошибка.",
                      "type": "integer",
                      "format": "int32"
                  },
                  "code": {
                      "description": "HTTP-код ошибки",
                      "type": "integer",
                      "format": "int32"
                  },
                  "messageType": {
                      "description": "Тип ответа",
                      "type": "string"
                  },
                  "message": {
                      "description": "Текст ответа",
                      "type": "string"
                  }
              },
              "required": [
                  "code",
                  "messageType",
                  "message"
              ]
          },
          "OkResponse": {
              "type": "object",
              "description": "Успешный ответ на запрос.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/ApiResponse"
                  },
                  {
                      "properties": {
                          "code": {
                              "enum": [
                                  200
                              ]
                          },
                          "messageType": {
                              "enum": [
                                  "Ok"
                              ]
                          }
                      }
                  }
              ]
          },
          "CreatedResponse": {
              "type": "object",
              "description": "Успешное создание объекта.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/ApiResponse"
                  },
                  {
                      "properties": {
                          "code": {
                              "enum": [
                                  201
                              ]
                          },
                          "messageType": {
                              "enum": [
                                  "Created"
                              ]
                          }
                      }
                  }
              ]
          },
          "BadRequestError": {
              "type": "object",
              "description": "Ошибка построения запроса или целостности переданных данных.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/ApiResponse"
                  },
                  {
                      "properties": {
                          "code": {
                              "enum": [
                                  400
                              ]
                          },
                          "messageType": {
                              "enum": [
                                  "Bad request"
                              ]
                          }
                      }
                  }
              ]
          },
          "TooManyRequestsError": {
              "type": "object",
              "description": "Превышен лимит запросов.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/ApiResponse"
                  },
                  {
                      "properties": {
                          "code": {
                              "enum": [
                                  400
                              ]
                          },
                          "messageType": {
                              "enum": [
                                  "Too Many Requests"
                              ]
                          }
                      }
                  }
              ]
          },
          "UnauthorizedError": {
              "type": "object",
              "description": "Ошибка аутентификации и/или авторизации.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/ApiResponse"
                  },
                  {
                      "properties": {
                          "code": {
                              "enum": [
                                  401
                              ]
                          },
                          "messageType": {
                              "enum": [
                                  "Unauthorized"
                              ]
                          }
                      }
                  }
              ]
          },
          "ConflictError": {
              "type": "object",
              "description": "Ошибка выполнения запроса из-за конфликта с состоянием данных на сервере.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/ApiResponse"
                  },
                  {
                      "properties": {
                          "code": {
                              "enum": [
                                  409
                              ]
                          },
                          "messageType": {
                              "enum": [
                                  "Conflict"
                              ]
                          }
                      }
                  }
              ]
          },
          "MissingParamsError": {
              "type": "object",
              "description": "Ошибка отсутствия обязательных параметров, заголовков или полей в запросе.\n\nВ тексте ошибки перечисляются названия обязательных параметров, заголовков или полей запроса.\nНазвание поля включает названия всех родительских объектов, если поле с ошибкой находится во вложенном объекте.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/BadRequestError"
                  },
                  {
                      "properties": {
                          "messageType": {
                              "enum": [
                                  "Missing parameter",
                                  "Missing header",
                                  "Missing request body fields"
                              ]
                          }
                      }
                  }
              ]
          },
          "WrongTypeError": {
              "type": "object",
              "description": "Неверный тип данных в параметрах, заголоках или полях запроса.\n\nВ тексте ошибки перечисляются названия параметров, заголовков или полей, для которых передано значение с неверным типом данных.\nНазвание поля включает названия всех родительских объектов, если поле с ошибкой находится во вложенном объекте.\nТекст ошибки также включает требуемый тип данных.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/BadRequestError"
                  },
                  {
                      "properties": {
                          "messageType": {
                              "enum": [
                                  "Parameter wrong type",
                                  "Header wrong type",
                                  "Request body field wrong type"
                              ]
                          }
                      }
                  }
              ]
          },
          "OutOfScopeError": {
              "type": "object",
              "description": "Переданное значение параметра, заголовка или поля не является допустимым.\n\nВ тексте ошибки перечисляются названия полей, значения которых должны входить в список допустимых значений.\nНазвание поля включает названия всех родительских объектов, если поле с ошибкой находится во вложенном объекте.\n\nВозможные варианты возникновения ошибки:\n  - Параметр может принимать определенный перечень значений (enum'ы)\n  - Число должно принимать значение из интервала\n  - Дата должна принимать значение из интервала",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/BadRequestError"
                  },
                  {
                      "properties": {
                          "messageType": {
                              "enum": [
                                  "Parameter field value out of scope",
                                  "Header value out of scope",
                                  "Request body field value out of scope",
                                  "Request body date value out of scope"
                              ]
                          }
                      }
                  }
              ]
          },
          "WrongFormatError": {
              "type": "object",
              "description": "Переданное значение параметра, заголовка или поля не соответствует формату.\n\nВ тексте ошибки перечисляются названия полей, значения которых должны соответствовать определенному формату.\nНазвание поля включает названия всех родительских объектов, если поле с ошибкой находится во вложенном объекте.\n\nВозможные варианты возникновения ошибки:\n  - Строковое значение должно удовлетворять маске или регулярному выражению.\n  - Строковое значение должно быть определенной длины.\n  - Массив должен включать определенное число элементов.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/BadRequestError"
                  },
                  {
                      "properties": {
                          "messageType": {
                              "enum": [
                                  "Parameter format error",
                                  "Header format error",
                                  "Request body field format error"
                              ]
                          }
                      }
                  }
              ]
          },
          "UniqueValueError": {
              "type": "object",
              "description": "Ошибка уникальности значений поля.\n\nВ тексте ошибки перечисляются названия полей, значения которых должны быть уникальными.\nНазвание поля включает названия всех родительских объектов, если поле с ошибкой находится во вложенном объекте.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/BadRequestError"
                  }
              ],
              "properties": {
                  "messageType": {
                      "enum": [
                          "Unique value error"
                      ]
                  }
              }
          },
          "ResourceCannotBeDeletedError": {
              "type": "object",
              "description": "Ресурс не может быть удален.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/BadRequestError"
                  },
                  {
                      "properties": {
                          "messageType": {
                              "enum": [
                                  "Resource cannot be deleted"
                              ]
                          }
                      }
                  }
              ]
          },
          "ResourceCannotBeEditedError": {
              "type": "object",
              "description": "Ресурс не может быть изменен.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/BadRequestError"
                  },
                  {
                      "properties": {
                          "messageType": {
                              "enum": [
                                  "Resource cannot be edited"
                              ]
                          }
                      }
                  }
              ]
          },
          "NotFoundError": {
              "type": "object",
              "description": "Запрошенный ресурс не найден.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/ApiResponse"
                  },
                  {
                      "properties": {
                          "code": {
                              "enum": [
                                  404
                              ]
                          },
                          "messageType": {
                              "enum": [
                                  "Resource not found"
                              ]
                          }
                      }
                  }
              ]
          },
          "MethodNotAllowedError": {
              "type": "object",
              "description": "Запрос не может быть выполнен с указанным методом.\n\nВ тексте ошибки перечисляются допустимые методы для запроса",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/ApiResponse"
                  },
                  {
                      "properties": {
                          "code": {
                              "enum": [
                                  405
                              ]
                          },
                          "messageType": {
                              "enum": [
                                  "Method not allowed"
                              ]
                          }
                      }
                  }
              ]
          },
          "ForbiddenError": {
              "type": "object",
              "properties": {
                  "errorCode": {
                      "description": "Код ошибки, характерный для приложения",
                      "type": "integer",
                      "format": "int32",
                      "xml": {
                          "prefix": "ehd"
                      }
                  },
                  "errorText": {
                      "description": "Текстовое сообщение, характерное для приложения",
                      "type": "string",
                      "xml": {
                          "prefix": "ehd"
                      }
                  }
              },
              "required": [
                  "errorCode",
                  "errorText"
              ]
          },
          "TimeoutError": {
              "type": "object",
              "description": "Истекло время ожидания ответа.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/ApiResponse"
                  },
                  {
                      "properties": {
                          "code": {
                              "enum": [
                                  408
                              ]
                          },
                          "messageType": {
                              "enum": [
                                  "Timeout"
                              ]
                          }
                      }
                  }
              ]
          },
          "InternalServerError": {
              "type": "object",
              "description": "Внутренняя ошибка сервера.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/ApiResponse"
                  },
                  {
                      "properties": {
                          "code": {
                              "enum": [
                                  500
                              ]
                          },
                          "messageType": {
                              "enum": [
                                  "Internal server error",
                                  "Database error"
                              ]
                          }
                      }
                  }
              ]
          },
          "BasicFilterOperatorTagIdEnum": {
              "description": "Техническое название оператора базовой фильтрации",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "empty",
                          "notEmpty",
                          "contains",
                          "inEnum",
                          "equals",
                          "greaterThan",
                          "greaterOrEqualsThan",
                          "lessThan",
                          "lessOrEqualsThan"
                      ]
                  }
              ]
          },
          "FilterOperatorTagIdEnum": {
              "description": "Техническое название оператора фильтрации",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "empty",
                          "notEmpty",
                          "contains",
                          "inEnum",
                          "equals",
                          "greaterThan",
                          "greaterOrEqualsThan",
                          "lessThan",
                          "lessOrEqualsThan",
                          "startsWith",
                          "endsWith",
                          "matchesRegexStr",
                          "matchesRegexId",
                          "inDict"
                      ]
                  }
              ]
          },
          "FilterOperatorNameEnum": {
              "description": "Название оператора фильтрации",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "SortingOrderTagIdEnum": {
              "description": "Техническое название порядка сортировки:\n  - `asc` - по возрастанию;\n  - `desc` - по убыванию.",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "asc",
                          "desc"
                      ]
                  }
              ]
          },
          "DataModeNameEnum": {
              "description": "Название режима работы с данными каталога",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "DataModeTagIdEnum": {
              "description": "Техническое наименование режима работы каталога:\n  - `fillingCatalog` - Каталоги заполнения\n  - `publicationCatalog` - Каталоги публикации\n  - `catalogGroup` - Группы каталогов\n  - `all` - Все",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "fillingCatalog",
                          "publicationCatalog",
                          "catalogGroup",
                          "all"
                      ]
                  }
              ]
          },
          "CatalogTechStatusTagIdEnum": {
              "description": "Технический статус каталога:\n  - `active` - Активный\n  - `deleted` - Удаленный",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "active",
                          "deleted"
                      ]
                  }
              ]
          },
          "CatalogKingNameEnum": {
              "description": "Название вида каталога",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "CatalogTypeNameEnum": {
              "description": "Название типа каталога",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "BasicCatalogPeriodUpdateNameEnum": {
              "description": "Название периодичности обновления каталога",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "BasicCatalogPeriodUpdateTagIdEnum": {
              "description": "Техническое название периодичности обновления",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "daily",
                          "weekly",
                          "monthly",
                          "quarterly",
                          "yearly"
                      ]
                  }
              ]
          },
          "CatalogPeriodUpdateNameEnum": {
              "description": "Название периодичности обновления каталога",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "CatalogPeriodUpdateTagIdEnum": {
              "description": "Техническое название периодичности обновления",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "daily",
                          "weekly",
                          "monthly",
                          "quarterly",
                          "yearly",
                          "minutely",
                          "hourly",
                          "numDays",
                          "calendarDays",
                          "multiple",
                          "withChanges",
                          "realTime"
                      ]
                  }
              ]
          },
          "CatalogFilterOperatorTagIdEnum": {
              "description": "Техническое название оператора для фильтрации по списку каталогов",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "empty",
                          "notEmpty",
                          "contains",
                          "inEnum",
                          "equals",
                          "greaterThan",
                          "greaterOrEqualsThan",
                          "lessThan",
                          "lessOrEqualsThan",
                          "inIds"
                      ]
                  }
              ]
          },
          "CatalogFilter": {
              "description": "Объект фильтра по списку каталогов для запросов с фильтрацией по столбцам таблиц",
              "type": "object",
              "properties": {
                  "attribute": {
                      "description": "Техническое название атрибута (столбца), по которому производится фильтрация.\nСовпадает с названием поля объекта, который передается в теле ответа.",
                      "type": "string"
                  },
                  "operator": {
                      "description": "Оператор фильтрации:\n  - `empty` - выводить только пустые значения. Доступен для всех типов данных.\n  Для данного оператора не передаётся поле `value`.\n  - `notEmpty` - выводить только непустые значения. Доступен для всех типов данных.\n  Для данного оператора не передаётся поле `value`.\n  - `contains` - содержит переданное значение. Является регистронезависимым. Используется для строковых, справочных и ссылочных атрибутов.\n  Для справочных и ссылочных атрибутов сравнение идет по атрибуту, выбранному для связи в данном каталоге.\n  - `inEnum` - перечисление. Выводятся записи, атрибут которых имеет значение, совпадающее с одним из введенных в перечисление.\n  Сравнение не зависит от регистра строковых значений. Работает со всеми типами данных кроме типов Флаг, Файл, Таблица и Справочник. Для дат сравнение просходит без учёта времени.\n  Значения передаются через точку с запятой `;`.\n  - `equals` - равно переданному значению или совпадает с переданным значением (в случае сравнения строк). Является регистронезависимым. Используется для любых типов кроме типов Файл и Таблица.\n  Для справочных и ссылочных атрибутов сравнение идет по атрибуту, выбранному для связи в данном каталоге. Для дат сравнение просходит без учёта времени.\n  - `greaterThan` - больше, чем переданное значение. Используется для сравнения чисел и дат (без учёта времени).\n  - `greaterOrEqualsThan` - больше или равно переданному значению. Используется для сравнения чисел и дат (без учёта времени).\n  - `lessThan` - меньше, чем переданное значение. Используется для сравнения чисел и дат (без учёта времени).\n  - `lessOrEqualsThan` - меньше или равно переданному значению. Используется для сравнения чисел и дат (без учёта времени).\n  - `inIds` - сравнение по идентификаторам.\n    Используется для сравнения по пересечению с идентификаторами выбранных тематической категории,\n    ОИВов, периодичностей обновления, систем-поставщиков, систем-потребителей.",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/CatalogFilterOperatorTagIdEnum"
                          }
                      ]
                  },
                  "value": {
                      "description": "Значение для сравнения со значением атрибута при применении оператора",
                      "oneOf": [
                          {
                              "type": "string",
                              "description": "Значение для фильтрации по строковому атрибуту или дате"
                          },
                          {
                              "type": "integer",
                              "description": "Значение для фильтрации по целому числу"
                          },
                          {
                              "type": "number",
                              "description": "Значение для фильтрации по дробному числу"
                          },
                          {
                              "description": "Значение для фильтрации по идентификаторам с оператором `inIds`",
                              "type": "array",
                              "items": {
                                  "type": "integer"
                              }
                          }
                      ]
                  }
              },
              "required": [
                  "attribute",
                  "operator"
              ],
              "example": {
                  "attribute": "dateNextUpdate",
                  "operator": "greaterThan",
                  "value": "01.02.2024 15:25:05"
              }
          },
          "ResponsiblePersonInfo": {
              "description": "Информация об ответственном лице",
              "type": "object",
              "properties": {
                  "fio": {
                      "description": "ФИО ответсвенного лица",
                      "type": "string"
                  },
                  "email": {
                      "description": "Email ответсвенного лица",
                      "type": "string"
                  },
                  "phone": {
                      "description": "Телефон ответсвенного лица",
                      "type": "string"
                  }
              },
              "required": [
                  "fio",
                  "email",
                  "phone"
              ],
              "example": {
                  "fio": "Иванов Иван Иванович",
                  "email": "ivanov@example.com",
                  "phone": "+ 7 (999) 11-22-333"
              }
          },
          "CatalogKind": {
              "description": "Вид каталога",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор вида каталога",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "name": {
                      "$ref": "#/components/schemas/CatalogKingNameEnum"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "CatalogType": {
              "description": "Тип каталога",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор типа каталога",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "name": {
                      "$ref": "#/components/schemas/CatalogTypeNameEnum"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "FillingCatalogUpdatePeriodicity": {
              "description": "Периодичность обновления каталога заполнения",
              "type": "object",
              "properties": {
                  "tagId": {
                      "$ref": "#/components/schemas/CatalogPeriodUpdateTagIdEnum"
                  },
                  "name": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/CatalogPeriodUpdateNameEnum"
                          }
                      ],
                      "readOnly": true
                  },
                  "numDays": {
                      "description": "Настройки периодичности обновления \"Настраиваемая (произвольный срок)\". Обязателен, если tagId = numDays.",
                      "type": "integer"
                  },
                  "calendarDays": {
                      "description": "Настройки периодичности обновления \"Настраиваемая (Календарные дни)\". Обязателен, если tagId = calendarDays.",
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "day": {
                                  "description": "День месяца в формате DD.MM",
                                  "type": "string",
                                  "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])$"
                              }
                          }
                      },
                      "minItems": 1
                  },
                  "isCheckLastDay": {
                      "description": "Дополнительное свойство для периодичности обновления \"Ежемесячно\" - \"Обновлять не позднее последнего дня следующего месяца за месяцем последнего подписания\"",
                      "type": "boolean"
                  },
                  "multiple": {
                      "description": "Настройки периодичности обновления \"Множественная периодичность\". Обязателен, если tagId = multiple.",
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "tagId": {
                                  "$ref": "#/components/schemas/CatalogPeriodUpdateTagIdEnum"
                              },
                              "name": {
                                  "allOf": [
                                      {
                                          "$ref": "#/components/schemas/CatalogPeriodUpdateNameEnum"
                                      }
                                  ],
                                  "readOnly": true
                              },
                              "dateStart": {
                                  "description": "Дата начала действия указанной периодичности. Используется формат DD.MM",
                                  "type": "string",
                                  "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])$"
                              },
                              "numDays": {
                                  "description": "Настройки периодичности обновления \"Настраиваемая (произвольный срок)\". Обязателен, если tagId = numDays.",
                                  "type": "integer"
                              },
                              "calendarDays": {
                                  "description": "Настройки периодичности обновления \"Настраиваемая (Календарные дни)\". Обязателен, если tagId = calendarDays.",
                                  "type": "array",
                                  "items": {
                                      "type": "object",
                                      "properties": {
                                          "day": {
                                              "description": "День месяца в формате DD.MM",
                                              "type": "string",
                                              "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])$"
                                          }
                                      }
                                  },
                                  "minItems": 1
                              },
                              "isCheckLastDay": {
                                  "description": "Дополнительное свойство для периодичности обновления \"Ежемесячно\" - \"Обновлять не позднее последнего дня следующего месяца за месяцем последнего подписания\"",
                                  "type": "boolean"
                              }
                          },
                          "required": [
                              "tagId",
                              "name",
                              "dateStart"
                          ]
                      },
                      "minItems": 1
                  }
              },
              "required": [
                  "tagId",
                  "name"
              ]
          },
          "CommonCatalogInfo": {
              "description": "Общая информация о каталоге",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор каталога",
                      "type": "integer",
                      "readOnly": true
                  },
                  "fullName": {
                      "description": "Полное наименование каталога",
                      "type": "string",
                      "minLength": 1
                  }
              },
              "required": [
                  "id",
                  "fullName"
              ]
          },
          "CommonCatalogListItem": {
              "description": "Общая информация о каталоге, выводимая в списке каталогов (для заполнения и публикации)",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonCatalogInfo"
                  }
              ],
              "properties": {
                  "objectCategories": {
                      "description": "Категории объектов каталога, перечисленные через запятую с пробелом",
                      "type": "string"
                  },
                  "thematicCategory": {
                      "description": "Тематическая категория каталога",
                      "type": "string"
                  },
                  "oivs": {
                      "description": "ОИВ, ответственные за наполнение каталога, перечисленные через запятую с пробелом",
                      "type": "string"
                  },
                  "countActiveObjects": {
                      "description": "Количество активных объектов в каталоге.\n\nДля заполнения считаются объекты со статусами:\n  - Подписанный,\n  - На изменении,\n  - На удалении.\n\nДля публикации считаются неудаленные объекты.",
                      "type": "integer"
                  },
                  "countObjects": {
                      "description": "Общее количество объектов в каталоге",
                      "type": "integer"
                  },
                  "systemsConsumers": {
                      "description": "Системы-потребители каталога, перечисленные через запятую с пробелом",
                      "type": "string"
                  },
                  "responsiblePerson": {
                      "description": "Ответственный за каталог. Указывается ФИО, email, телефон через запятую с пробелом",
                      "type": "string"
                  }
              },
              "required": [
                  "objectCategories",
                  "thematicCategory",
                  "oivs",
                  "countActiveObjects",
                  "countObjects",
                  "systemsConsumers",
                  "responsiblePerson"
              ]
          },
          "CommonCatalogGeneralInfo": {
              "description": "Общие параметры общей информации каталога",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonCatalogInfo"
                  }
              ],
              "properties": {
                  "technicalName": {
                      "description": "Технологическое наименование каталога",
                      "type": "string",
                      "minLength": 1
                  },
                  "shortName": {
                      "description": "Краткое наименование каталога",
                      "type": "string",
                      "minLength": 1
                  },
                  "kindCatalog": {
                      "description": "Вид каталога",
                      "type": "object",
                      "readOnly": true,
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/CatalogKind"
                          }
                      ]
                  },
                  "kindCatalogId": {
                      "description": "Идентификатор вида каталога",
                      "type": "integer",
                      "writeOnly": true
                  },
                  "typeCatalog": {
                      "description": "Тип каталога",
                      "type": "object",
                      "readOnly": true,
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/CatalogType"
                          }
                      ]
                  },
                  "typeCatalogId": {
                      "description": "Идентификатор типа каталога",
                      "type": "integer",
                      "writeOnly": true
                  },
                  "thematicCategory": {
                      "description": "Тематическая категория каталога",
                      "type": "object",
                      "allOf": [
                          {
                              "$ref": "thematicCategories.yaml#/components/schemas/CommonThematicCategoryInfo"
                          }
                      ],
                      "readOnly": true
                  },
                  "thematicCategoryId": {
                      "description": "Идентификатор тематической категории каталога",
                      "type": "integer",
                      "writeOnly": true
                  },
                  "objectCategories": {
                      "description": "Категории объекта",
                      "type": "array",
                      "items": {
                          "$ref": "objectCategories.yaml#/components/schemas/ObjectCategory"
                      },
                      "minItems": 1,
                      "readOnly": true
                  },
                  "oivs": {
                      "description": "Поставщики информации каталога (ответственные ОИВы)",
                      "type": "array",
                      "items": {
                          "$ref": "oivs.yaml#/components/schemas/CommonOivInfo"
                      },
                      "minItems": 1,
                      "readOnly": true
                  },
                  "oivsIds": {
                      "description": "Список идентификаторов поставщиков информации каталога (ответственные ОИВы)",
                      "type": "array",
                      "items": {
                          "type": "integer"
                      },
                      "minItems": 1,
                      "writeOnly": true
                  },
                  "accountingObject": {
                      "description": "Объект учёта",
                      "type": "string",
                      "minLength": 1
                  },
                  "keywords": {
                      "description": "Ключевые слова",
                      "type": "string",
                      "minLength": 1
                  },
                  "systemsConsumers": {
                      "description": "Системы потребители данных каталога",
                      "type": "array",
                      "items": {
                          "$ref": "systems.yaml#/components/schemas/CommonSystemInfo"
                      },
                      "readOnly": true
                  },
                  "systemsConsumersIds": {
                      "description": "Список идентификаторов систем потребителей данных",
                      "type": "array",
                      "items": {
                          "type": "integer"
                      },
                      "writeOnly": true
                  },
                  "isShowDeleteObjects": {
                      "description": "Признак \"Показывать удалённые объекты\"",
                      "type": "boolean"
                  }
              },
              "required": [
                  "technicalName",
                  "shortName",
                  "typeCatalog",
                  "thematicCategory",
                  "objectCategories",
                  "oivs",
                  "periodUpdateTagId",
                  "isShowDeleteObjects"
              ]
          },
          "CommonCatalogMetadata": {
              "description": "Общие параметры метаданных каталога",
              "type": "object",
              "properties": {
                  "respPersonFIO": {
                      "description": "ФИО ответственного за каталог",
                      "type": "string"
                  },
                  "respPersonEmail": {
                      "description": "Адрес электронной почты ответственного за каталог",
                      "type": "string"
                  },
                  "respPersonPhone": {
                      "description": "Телефон ответственного за каталог",
                      "type": "string"
                  },
                  "description": {
                      "description": "Описание каталога",
                      "type": "string"
                  }
              }
          },
          "CommonCatalogAttributeWithDefaultValue": {
              "type": "object",
              "description": "Свойство атрибута \"Значение по умолчанию\"",
              "properties": {
                  "defaultValue": {
                      "description": "Значение атрибута по умолчанию",
                      "type": "string"
                  }
              }
          },
          "CommonCatalogAttributeWithFieldMask": {
              "description": "Информация об атрибуте с маской ввода",
              "type": "object",
              "properties": {
                  "fieldMask": {
                      "description": "Маска ввода, которой должно соответствовать значение атрибута. Обозначения:\n  - X - любые буквы,\n  - 0 - любые цифры.",
                      "type": "string"
                  }
              }
          },
          "CommonCatalogAttributeWithNumber": {
              "description": "Информация о числовом атрибуте",
              "type": "object",
              "properties": {
                  "isPositive": {
                      "description": "Признак, что значение может быть только положительным числом",
                      "type": "boolean"
                  },
                  "maxLength": {
                      "description": "Максимальное количество знаков целой части числа",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 38
                  }
              },
              "required": [
                  "isPositive",
                  "maxLength"
              ]
          },
          "CommonCatalogAttributeWithDecimalPart": {
              "description": "Свойство атрибута \"Количество знаков после запятой\"",
              "type": "object",
              "properties": {
                  "maxLengthDecimal": {
                      "description": "Максимальное количество знаков после запятой",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1,
                      "maximum": 38
                  }
              },
              "required": [
                  "maxLengthDecimal"
              ]
          },
          "CommonCatalogAttributeWithTime": {
              "description": "Свойство атрибута \"Дата и время\"",
              "type": "object",
              "properties": {
                  "isTime": {
                      "description": "Признак, который указывает на необходимость добавления временной метки к дате",
                      "type": "boolean"
                  }
              },
              "required": [
                  "isTime"
              ]
          },
          "CommonCatalogAttributeWithFieldRegex": {
              "description": "Информация об атрибуте с регулярным выражением",
              "type": "object",
              "properties": {
                  "fieldRegexId": {
                      "description": "Идентификатор регулярного выражения, которому должно соответствовать значение атрибута",
                      "type": "integer",
                      "format": "int32",
                      "writeOnly": true
                  },
                  "fieldRegex": {
                      "description": "Регулярное выражение, которому должно соответствовать значение атрибута",
                      "type": "object",
                      "readOnly": true,
                      "allOf": [
                          {
                              "$ref": "regexps.yaml#/components/schemas/CommonRegularExpressionInfo"
                          }
                      ]
                  }
              }
          },
          "CommonCatalogAttributeWithSearchIndex": {
              "description": "Информация об атрибуте с поисковым индексом",
              "type": "object",
              "properties": {
                  "searchIndexId": {
                      "description": "Идентификатор поискового индекса, которому должно соответствовать значение атрибута",
                      "type": "integer",
                      "format": "int32",
                      "writeOnly": true
                  },
                  "searchIndex": {
                      "description": "Индекс, используемый для полнотекстового поиска при заполнении атрибута",
                      "type": "object",
                      "allOf": [
                          {
                              "$ref": "searchIndexes.yaml#/components/schemas/CommonSearchIndexInfo"
                          }
                      ],
                      "readOnly": true
                  }
              }
          },
          "CommonCatalogAttributeWithMultipleValues": {
              "description": "Информация об атрибуте с множественным значением",
              "type": "object",
              "properties": {
                  "isMultiple": {
                      "description": "Указывает, что атрибут может содержать несколько значений одновременно",
                      "type": "boolean"
                  },
                  "maxCntElement": {
                      "description": "Максимально допустимое количество элементов, которое возможно добавить в рамках атрибута",
                      "type": "integer",
                      "minimum": 1
                  },
                  "minCntElement": {
                      "description": "Минимальное количество элементов, которое должно быть добавлено в атрибут",
                      "type": "integer",
                      "minimum": 0
                  }
              },
              "required": [
                  "isMultiple"
              ]
          },
          "CommonCatalogAttribute": {
              "description": "Общая информация об атрибуте каталога",
              "type": "object",
              "properties": {
                  "attribute": {
                      "readOnly": true,
                      "description": "Информация об атрибуте ЕХД",
                      "type": "object",
                      "allOf": [
                          {
                              "$ref": "attributes.yaml#/components/schemas/CommonAttribute"
                          }
                      ]
                  },
                  "attrId": {
                      "writeOnly": true,
                      "description": "Идентификатор атрибута ЕХД",
                      "type": "integer"
                  },
                  "catalogAttrId": {
                      "description": "Идентификатор атрибута каталога",
                      "type": "integer",
                      "readOnly": true
                  },
                  "selectedAlterNameId": {
                      "description": "Идентификатор выбранного альтернативного наименования атрибута в каталоге",
                      "type": "integer"
                  },
                  "order": {
                      "description": "Порядковый номер атрибута в каталоге",
                      "type": "integer"
                  },
                  "isMain": {
                      "description": "Свойство, что атрибут считается главным при связывании с другими каталогами",
                      "type": "boolean"
                  }
              },
              "required": [
                  "attribute",
                  "attrId",
                  "catalogAttrId",
                  "order",
                  "isMain"
              ]
          },
          "RefCatalogAttributeInfo": {
              "description": "Общая информация об атрибуте каталога для ссылочных схем",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор атрибута каталога",
                      "type": "integer"
                  },
                  "name": {
                      "description": "Русскоязычное наименование атрибута в каталоге",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "RefCatalogAttributeInfoWithAttrId": {
              "description": "Общая информация об атрибуте каталога для ссылочных схем",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "description": "Идентификатор атрибута в ЕХД (attrId)."
                  },
                  "name": {
                      "type": "string",
                      "description": "Русскоязычное наименование атрибута в каталоге"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "RefCatalogInfo": {
              "description": "Общая информация о каталоге для ссылочных схем",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор каталога",
                      "type": "integer"
                  },
                  "name": {
                      "description": "Полное наименование каталога",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "CatalogRef": {
              "description": "Информация о связи каталога публикации с каталогом заполнения",
              "type": "object",
              "properties": {
                  "fullName": {
                      "description": "Полное наименование каталога публикации",
                      "type": "string"
                  },
                  "technicalName": {
                      "description": "Техническое наименование каталога публикации",
                      "type": "string"
                  },
                  "shortName": {
                      "description": "Краткое наименование каталога публикации",
                      "type": "string"
                  },
                  "typeCatalogId": {
                      "description": "Идентификатор типа каталога публикации",
                      "type": "integer"
                  },
                  "kindCatalogId": {
                      "description": "Идентификатор вида каталога публикации",
                      "type": "integer"
                  },
                  "thematicCategoryId": {
                      "description": "Идентификатор тематической категории каталога публикации",
                      "type": "integer"
                  },
                  "defaultPriority": {
                      "$ref": "publicationCatalogs.yaml#/components/schemas/PublicationCatalogPriority"
                  }
              },
              "required": [
                  "publicationCatalogId",
                  "fullName",
                  "technicalName",
                  "shortName",
                  "typeCatalogId",
                  "kindCatalogId",
                  "thematicCategoryId",
                  "defaultPriority"
              ]
          },
          "FillingCatalogObjectsStatusTagIdEnum": {
              "description": "Техническое название статуса данных каталога заполнения:\n  - `signed` - подписано,\n  - `unsigned` - не подписано,\n  - `archive` - архив.",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "signed",
                          "unsigned",
                          "archive"
                      ]
                  }
              ]
          },
          "FillingCatalogMetadataStatusTagIdEnum": {
              "description": "Техническое название статуса подписания метаданных каталога заполнения:\n  - `signed` - метаданные подписаны;\n  - `unsigned` - метаданные не подписаны;\n  - `archive` - архив.",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "signed",
                          "unsigned",
                          "archive"
                      ]
                  }
              ]
          },
          "FillingCatalogOperatingModeTagIdEnum": {
              "description": "Режим работы с объектом, при котором доступно изменение значений атрибута:\n  - `createObj` - только при создании,\n  - `updateObj` - при редактировании (в т.ч. создании),\n  - `deleteObj` - при удалении.",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "createObj",
                          "updateObj",
                          "deleteObj"
                      ]
                  }
              ]
          },
          "FillingCatalogListItem": {
              "description": "Элемент списка каталогов заполнения",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonCatalogListItem"
                  }
              ],
              "properties": {
                  "periodUpdate": {
                      "$ref": "#/components/schemas/CatalogPeriodUpdateNameEnum"
                  },
                  "systemsSuppliers": {
                      "description": "Системы-поставщики данных в каталог, перечисленные через запятую с пробелом",
                      "type": "string"
                  },
                  "dateLastSign": {
                      "description": "Дата последнего подписания всех объектов каталога или подписания отсутствия изменений в объектах.\nМожет отличаться от последней даты подписания из истории, так как в историю попадают записи с подписанием отдельных объектов.\nФормат даты: DD.MM.YYYY",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateFormat"
                          }
                      ]
                  },
                  "dateNextUpdate": {
                      "description": "Рассчитанная дата следующего подписания каталога, вычисленной на основе даты последней подписи и периодичности обновления.\nФормат даты: DD.MM.YYYY",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateFormat"
                          }
                      ]
                  },
                  "statusSignObjects": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/FillingCatalogObjectsStatusTagIdEnum"
                          }
                      ]
                  },
                  "statusSignMetadata": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/FillingCatalogMetadataStatusTagIdEnum"
                          }
                      ]
                  },
                  "countUnsignedObjects": {
                      "description": "Количество неподписанных объектов в каталоге. Считаются объекты со статусами:\n  - На изменении,\n  - На удалении,\n  - На восстановлении.",
                      "type": "integer"
                  },
                  "signatureInfo": {
                      "description": "Информация о подписании каталога, включающая дату последнего подписания и наименование подписанта",
                      "type": "string"
                  },
                  "countErrorObjects": {
                      "description": "Количество объектов каталога, имеющих статус \"Ошибка\"",
                      "type": "integer"
                  },
                  "countPublicationCatalogs": {
                      "description": "Число каталогов публикации, созданных на основе каталога заполнения",
                      "type": "integer"
                  },
                  "userPrivileges": {
                      "$ref": "users.yaml#/components/schemas/UserPrivilegeFill"
                  }
              },
              "required": [
                  "periodUpdate",
                  "systemsSuppliers",
                  "dateLastSign",
                  "dataNextUpdate",
                  "statusSignObjects",
                  "statusSignMetadata",
                  "countUnsignedObjects",
                  "countErrorObj",
                  "countPublicationCatalogs",
                  "userPrivileges"
              ]
          },
          "FillingCatalogGeneralInfo": {
              "description": "Общая информация каталога заполнения",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonCatalogGeneralInfo"
                  }
              ],
              "properties": {
                  "periodUpdate": {
                      "$ref": "#/components/schemas/FillingCatalogUpdatePeriodicity"
                  },
                  "systemsSuppliers": {
                      "description": "Системы-поставщики данных в каталог заполнения",
                      "type": "array",
                      "items": {
                          "$ref": "systems.yaml#/components/schemas/CommonSystemInfo"
                      },
                      "readOnly": true
                  },
                  "systemsSuppliersIds": {
                      "description": "Список идентификаторов систем поставщиков данных",
                      "type": "array",
                      "items": {
                          "type": "integer"
                      },
                      "writeOnly": true
                  },
                  "hasBackgroundCheck": {
                      "description": "Признак наличия в каталоге периодической фоновой проверки",
                      "type": "boolean"
                  },
                  "backgroundCheckPeriodTagId": {
                      "description": "Строковый идентификатор периода фоновой проверки",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/BasicCatalogPeriodUpdateTagIdEnum"
                          }
                      ],
                      "writeOnly": true
                  },
                  "backgroundCheckPeriod": {
                      "description": "Период фоновой проверки в каталоге",
                      "type": "object",
                      "properties": {
                          "name": {
                              "$ref": "#/components/schemas/BasicCatalogPeriodUpdateNameEnum"
                          },
                          "tagId": {
                              "$ref": "#/components/schemas/BasicCatalogPeriodUpdateTagIdEnum"
                          }
                      },
                      "readOnly": true
                  },
                  "backgroundCheckEmails": {
                      "description": "Список электронных почт получателей результатов фоновой проверки, перечисленные через запятую БЕЗ пробела",
                      "type": "string"
                  },
                  "isDeleteAllObjects": {
                      "description": "Признак \"Возможно одновременное удаление всех объектов\"",
                      "type": "boolean"
                  },
                  "isPriorityProcess": {
                      "description": "Признак \"Установить приоритет подписания данных\"",
                      "type": "boolean"
                  },
                  "outOivsBlockEditObjectsGUI": {
                      "description": "Поставщики информации, которым остаётся доступным редактирование содержания каталога при отмеченном свойстве \"Заблокировать редактирование данных (веб)\"",
                      "type": "array",
                      "items": {
                          "$ref": "oivs.yaml#/components/schemas/CommonOivInfo"
                      },
                      "readOnly": true
                  },
                  "outOivsIdsBlockEditObjectsGUI": {
                      "description": "Список идентификаторов поставщиков информации, которым остаётся доступным редактирование содержания каталога при отмеченном свойстве \"Заблокировать редактирование данных (веб)\"",
                      "type": "array",
                      "items": {
                          "type": "integer"
                      },
                      "writeOnly": true
                  },
                  "isBlockEditObjectsService": {
                      "description": "Признак \"Заблокировать подписание данных (сервис)\"",
                      "type": "boolean"
                  },
                  "isBlockRestoreObjects": {
                      "description": "Признак \"Заблокировать восстановление данных\"",
                      "type": "boolean"
                  },
                  "isBlockSignObjectsGUI": {
                      "description": "Признак \"Заблокировать подписание данных (веб)\"",
                      "type": "boolean"
                  },
                  "isCopyObjects": {
                      "description": "Признак \"Возможно копирование объектов\"",
                      "type": "boolean"
                  },
                  "isBlockEditObjectsGUI": {
                      "description": "Признак \"Заблокировать редактирование данных (веб)\"",
                      "type": "boolean"
                  }
              },
              "required": [
                  "periodUpdate",
                  "hasBackgroundCheck",
                  "isDeleteAllObjects",
                  "isPriorityProcess",
                  "isBlockEditObjectsService",
                  "isBlockRestoreObjects",
                  "isBlockSignObjectsGUI",
                  "accountingObject",
                  "thematicCategoryId",
                  "typeCatalogId",
                  "oivsIds",
                  "keywords",
                  "isCopyObjects",
                  "isBlockEditObjectsGUI"
              ]
          },
          "FillingCatalogMetadata": {
              "description": "Метаданные каталога заполнения",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonCatalogMetadata"
                  }
              ]
          },
          "CommonFillingCatalogAttribute": {
              "description": "Общая информация атрибута каталога заполнения",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttribute"
                  }
              ],
              "properties": {
                  "isReq": {
                      "description": "Свойство обязательности атрибута",
                      "type": "boolean"
                  },
                  "isUniq": {
                      "description": "Свойство уникальности значения атрибута",
                      "type": "boolean"
                  },
                  "isUniqWithinParent": {
                      "description": "Признак, что уникальность значений атрибутов внутри табличного атрибута будет проверятся в рамках объекта-родителя.",
                      "type": "boolean",
                      "default": false
                  },
                  "isBanEdit": {
                      "description": "Свойство запрета на редактирование",
                      "type": "boolean"
                  },
                  "isSystemModify": {
                      "description": "Свойство, что значение атрибута изменяется системой",
                      "type": "boolean"
                  },
                  "objOperatingMode": {
                      "$ref": "#/components/schemas/FillingCatalogOperatingModeTagIdEnum"
                  },
                  "oivs": {
                      "description": "Список ОИВ, ответственных за значение, содержащееся в атрибуте",
                      "type": "array",
                      "items": {
                          "$ref": "oivs.yaml#/components/schemas/CommonOivInfo"
                      },
                      "readOnly": true,
                      "minItems": 1
                  },
                  "oivsIds": {
                      "description": "Список идентификаторов ОИВ, ответственных за значение, содержащееся в атрибуте",
                      "type": "array",
                      "items": {
                          "type": "integer"
                      },
                      "writeOnly": true,
                      "minItems": 1
                  },
                  "isManualInput": {
                      "description": "Настроено ли на этот атрибут заполнение значениями не из справочника (ручной ввод) в блоках Автозаполнения конструктора",
                      "type": "boolean",
                      "readOnly": true
                  },
                  "manualInputTargets": {
                      "description": "Массив атрибутов, значение которых зависит от заполнения данного атрибута при автозаполнении.\nОписываются в блоке `Автозаполнение` конструктора в массиве [[blocks.properties.mapping]].\n\nПоле обязательное. Если атрибутов нет, то возвращается пустой массив.",
                      "readOnly": true,
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "attrId": {
                                  "description": "Идентификатор атрибута в ЕХД",
                                  "type": "integer"
                              },
                              "isDependent": {
                                  "description": "Является ли атрибут зависимым в рамках ручного ввода",
                                  "type": "boolean"
                              }
                          }
                      }
                  },
                  "manualInputSources": {
                      "description": "Массив идентификаторов атрибутов, от значения которых зависит значение данного атрибута при Автозаполнении.\n\nПоле обязательное. Если атрибутов нет, то возвращается пустой массив.",
                      "readOnly": true,
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              },
              "required": [
                  "isReq",
                  "isUniq",
                  "isUniqWithinParent",
                  "isBanEdit",
                  "isSystemModify",
                  "objOperatingMode",
                  "oivs",
                  "oivsIds"
              ]
          },
          "StringFillingCatalogAttribute": {
              "description": "Строковый атрибут каталога заполнения",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithDefaultValue"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithFieldMask"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithSearchIndex"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithFieldRegex"
                  }
              ],
              "properties": {
                  "maxLength": {
                      "description": "Максимальная длина строкового значения",
                      "type": "integer"
                  }
              },
              "required": [
                  "maxLength"
              ]
          },
          "IntegerFillingCatalogAttribute": {
              "description": "Целочисленный атрибут каталога заполнения",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithDefaultValue"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithNumber"
                  }
              ]
          },
          "FloatFillingCatalogAttribute": {
              "description": "Атрибут каталога заполнения с типом дробное число",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithDefaultValue"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithNumber"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithDecimalPart"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithFieldRegex"
                  }
              ]
          },
          "DateFillingCatalogAttribute": {
              "description": "Атрибут каталога заполнения с типом дата (и время)",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithDefaultValue"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithTime"
                  }
              ],
              "properties": {
                  "fieldMask": {
                      "description": "Маска ввода, которой должно соответствовать значение атрибута. Справочная информация для SOAP. Варианты:\n  - dd.mm.yyyy hh24:mi:ss (для атрибута с настройкой \"Дата и время\"),\n  - dd.mm.yyyy.",
                      "type": "string",
                      "readOnly": true
                  }
              }
          },
          "BooleanFillingCatalogAttribute": {
              "description": "Атрибут каталога заполнения с типом флаг",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithDefaultValue"
                  }
              ]
          },
          "FileFillingCatalogAttribute": {
              "description": "Файловый атрибут каталога заполнения",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithMultipleValues"
                  }
              ]
          },
          "DictFillingCatalogAttribute": {
              "description": "Справочный атрибут каталога заполнения",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithMultipleValues"
                  },
                  {
                      "properties": {
                          "attribute": {
                              "allOf": [
                                  {
                                      "$ref": "attributes.yaml#/components/schemas/DictionaryAttribute"
                                  }
                              ],
                              "readOnly": true
                          }
                      }
                  }
              ],
              "properties": {
                  "parentDictAttrId": {
                      "description": "Идентификатор справочного атрибута, который содержит элементы более высокого уровня иерархии. При заполнении атрибута будет ограничиваться список элементов, связанных с элементом родительского справочника.",
                      "type": "integer"
                  },
                  "refColDictTechName": {
                      "description": "Указывает значения какого атрибута будут использоваться для сопоставления с объектом справочника при загрузке данных через сервис.",
                      "type": "string",
                      "writeOnly": true
                  },
                  "refColDict": {
                      "description": "Атрибут справочника, который будет использоваться для сопоставления с объектом справочника при загрузке данных через сервис.",
                      "type": "object",
                      "allOf": [
                          {
                              "$ref": "dictionaries.yaml#/components/schemas/DictionaryColumn"
                          }
                      ],
                      "readOnly": true
                  },
                  "defaultColDictTechName": {
                      "description": "Позволяет выбрать атрибут справочника, который будет отображаться в каталоге. По умолчанию поле \"Наименование\".",
                      "type": "string",
                      "default": "name",
                      "writeOnly": true
                  },
                  "defaultColDict": {
                      "description": "Атрибут справочника, который будет отображаться в каталоге.",
                      "type": "object",
                      "allOf": [
                          {
                              "$ref": "dictionaries.yaml#/components/schemas/DictionaryColumn"
                          }
                      ],
                      "readOnly": true
                  },
                  "sort": {
                      "description": "Сортировка элементов справочника при заполнении атрибута",
                      "type": "string",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/SortingOrderTagIdEnum"
                          }
                      ]
                  }
              },
              "required": [
                  "refColDictTechName",
                  "refColDict",
                  "defaultColDictTechName",
                  "defaultColDict",
                  "sort"
              ]
          },
          "LinkFillingCatalogAttribute": {
              "description": "Ссылочный атрибут каталога заполнения",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithMultipleValues"
                  }
              ],
              "properties": {
                  "refCatalog": {
                      "description": "Каталог заполнения, на объекты которого ссылается объект",
                      "type": "object",
                      "readOnly": true,
                      "properties": {
                          "id": {
                              "description": "Идентификатор каталога",
                              "type": "integer"
                          },
                          "name": {
                              "description": "Полное наименование каталога",
                              "type": "string"
                          },
                          "mainAttrId": {
                              "description": "Идентификатор главного атрибута"
                          }
                      },
                      "required": [
                          "id",
                          "name",
                          "mainAttrId"
                      ]
                  },
                  "refCatalogId": {
                      "description": "Идентификатор каталога заполнения, на объекты которого ссылается объект",
                      "type": "integer",
                      "writeOnly": true
                  },
                  "refAttr": {
                      "description": "Атрибут ссылочного каталога, который используется для сопоставления с объектом каталога при загрузке данных через сервис",
                      "type": "object",
                      "properties": {
                          "id": {
                              "type": "integer",
                              "description": "Идентификатор атрибута в ЕХД, который содержится в атрибутивном составе ссылочного каталога"
                          },
                          "name": {
                              "type": "string",
                              "description": "Русскоязычное наименование атрибута в ссылочном каталоге"
                          }
                      },
                      "readOnly": true,
                      "required": [
                          "id",
                          "name"
                      ]
                  },
                  "refAttrId": {
                      "description": "Идентификатор атрибута ссылочного каталога в ЕХД, который используется для сопоставления с объектом каталога при загрузке данных через сервис",
                      "type": "integer",
                      "writeOnly": true
                  },
                  "isRefUnsignedObj": {
                      "description": "Указывает, что для выбора объекта каталога, на который ссылается объект, доступны новые неподписанные объекты",
                      "type": "boolean"
                  }
              },
              "required": [
                  "refCatalog",
                  "refCatalogId",
                  "isRefUnsignedObj"
              ]
          },
          "TableFillingCatalogAttribute": {
              "description": "Табличный атрибут каталога заполнения",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/CommonCatalogAttributeWithMultipleValues"
                  }
              ],
              "properties": {
                  "childCatalogId": {
                      "description": "Идентификатор вложенного каталога, хранящего объекта для табличного атрибута.\nПри создании каталога передается отрицательное число - псевдоидентификатор, которое также можно указывать в других объектах в рамках первичного сохранения каталога.",
                      "type": "integer"
                  },
                  "attributes": {
                      "description": "Атрибутивный состав вложенного каталога (табличного атрибута)",
                      "type": "array",
                      "items": {
                          "anyOf": [
                              {
                                  "$ref": "#/components/schemas/StringFillingCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/IntegerFillingCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/FloatFillingCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/DateFillingCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/BooleanFillingCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/FileFillingCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/DictFillingCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/LinkFillingCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/TableFillingCatalogAttribute"
                              }
                          ]
                      },
                      "minItems": 1
                  }
              },
              "required": [
                  "childCatalogId",
                  "attributes"
              ]
          },
          "FillingCatalogAttribute": {
              "description": "Атрибут каталога заполнения",
              "type": "object",
              "oneOf": [
                  {
                      "$ref": "#/components/schemas/StringFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/IntegerFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/FloatFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/DateFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/BooleanFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/FileFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/DictFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/LinkFillingCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/TableFillingCatalogAttribute"
                  }
              ]
          },
          "CommonFillingCatalogAttributeForValidation": {
              "description": "Основные свойства атрибута кататалога заполнения, необходимые для проведения валидации настроек конструктора проверок, групповой и условной уникальностей\".",
              "type": "object",
              "properties": {
                  "techName": {
                      "description": "Техническое наименование атрибута.",
                      "type": "string"
                  },
                  "typeTagId": {
                      "$ref": "attributes.yaml#/components/schemas/AttributeTypeTagIdEnum"
                  },
                  "isSystemModify": {
                      "description": "Свойство, что значение атрибута изменяется системой.",
                      "type": "boolean"
                  }
              },
              "required": [
                  "techName",
                  "typeTagId",
                  "isSystemModify"
              ]
          },
          "DictFillingCatalogAttributeForValidation": {
              "description": "Свойства справочного атрибута кататалога заполнения, необходимые для проведения валидации настроек конструктора проверок, групповой и условной уникальностей\".",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonFillingCatalogAttributeForValidation"
                  },
                  {
                      "properties": {
                          "dictionaryId": {
                              "description": "Идентификатор справочника, который используется в справочном атрибуте",
                              "type": "integer"
                          }
                      },
                      "required": [
                          "dictionaryId"
                      ]
                  }
              ]
          },
          "LinkFillingCatalogAttributeForValidation": {
              "description": "Свойства ссылочного атрибута кататалога заполнения, необходимые для проведения валидации настроек конструктора проверок, групповой и условной уникальностей\".",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonFillingCatalogAttributeForValidation"
                  },
                  {
                      "properties": {
                          "refCatalogId": {
                              "description": "Идентификатор каталога заполнения, на объекты которого будет ссылаться объект.",
                              "type": "integer"
                          }
                      },
                      "required": [
                          "refCatalogId"
                      ]
                  }
              ]
          },
          "TableFillingCatalogAttributeForValidation": {
              "description": "Свойства табличного атрибута кататалога заполнения, необходимые для проведения валидации настроек конструктора проверок, групповой и условной уникальностей\".",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonFillingCatalogAttributeForValidation"
                  },
                  {
                      "properties": {
                          "attributes": {
                              "description": "Атрибутивный состав вложенного каталога (табличного атрибута)",
                              "type": "array",
                              "items": {
                                  "oneOf": [
                                      {
                                          "$ref": "#/components/schemas/CommonFillingCatalogAttributeForValidation"
                                      },
                                      {
                                          "$ref": "#/components/schemas/DictFillingCatalogAttributeForValidation"
                                      },
                                      {
                                          "$ref": "#/components/schemas/LinkFillingCatalogAttributeForValidation"
                                      },
                                      {
                                          "$ref": "#/components/schemas/TableFillingCatalogAttributeForValidation"
                                      }
                                  ]
                              }
                          }
                      },
                      "required": [
                          "attributes"
                      ]
                  }
              ]
          },
          "FillingCatalogAttributeForValidation": {
              "description": "Атрибут кататалога заполнения с набором свойств, необходимых для проведения валидации настроек конструктора проверок, групповой и условной уникальностей\".",
              "type": "object",
              "oneOf": [
                  {
                      "$ref": "#/components/schemas/CommonFillingCatalogAttributeForValidation"
                  },
                  {
                      "$ref": "#/components/schemas/DictFillingCatalogAttributeForValidation"
                  },
                  {
                      "$ref": "#/components/schemas/LinkFillingCatalogAttributeForValidation"
                  },
                  {
                      "$ref": "#/components/schemas/TableFillingCatalogAttributeForValidation"
                  }
              ]
          },
          "FillingCatalogGroupUniq": {
              "description": "Настройки групповой уникальности",
              "type": "object",
              "properties": {
                  "tomlFormat": {
                      "description": "Настройка групповой уникальности, описанная пользователем в формате TOML. Передаётся в качестве строки с экранированием символов.",
                      "type": "string"
                  },
                  "jsonFormat": {
                      "description": "Настройка групповой уникальности, преобразованная из формата TOML в JSON. Необходима для обработки на стороне клиента для реализации доп. функций, помогающих пользователю при создании настройки.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                          "groups": {
                              "description": "Массив групп атрибутов",
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "properties": {
                                      "groupTechName": {
                                          "description": "Технологическое наименование группы атрибутов. Должно быть уникально в рамках групп одного каталога.",
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/TechNameFormat"
                                              }
                                          ]
                                      },
                                      "groupName": {
                                          "description": "Пользовательское наименование группы атрибутов.",
                                          "type": "string"
                                      },
                                      "applyTableAttr": {
                                          "description": "Группа атрибутов настраивается из табличного атрибута и применяется ко всему вложенному каталогу. Указывается табличный атрибут в формате attr.{TableTechName1}.{TableTechName11}.{TableTechName111}.{и т.д.}. То есть указывается вся последовательность табличных атрибутов от корня до того, для которого настраивается группа.\n\nЕсли передано данное поле, то в описании блоков могут использоваться только атрибуты внутри указанной таблицы.",
                                          "type": "string"
                                      },
                                      "attributes": {
                                          "description": "Массив атрибутов, входящих в группу. Указываются в формате attr.{techNameAttr}",
                                          "type": "array",
                                          "items": {
                                              "type": "string"
                                          },
                                          "minItems": 1
                                      },
                                      "condition": {
                                          "description": "Условие, описанное в синтаксисе условий конструктора проверок. Доступны все типы атрибутов каталога, включая системные.",
                                          "type": "string"
                                      }
                                  },
                                  "minItems": 1,
                                  "required": [
                                      "groupTechName",
                                      "attributes"
                                  ]
                              }
                          }
                      },
                      "required": [
                          "groups"
                      ]
                  }
              },
              "required": [
                  "tomlFormat",
                  "jsonFormat"
              ]
          },
          "FillingCatalogSettings": {
              "description": "Настройки каталога заполнения",
              "type": "object",
              "properties": {
                  "generalInfo": {
                      "description": "Настройки вкладки \"Общая информация\" каталога заполнения",
                      "type": "object",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/FillingCatalogGeneralInfo"
                          }
                      ]
                  },
                  "attributes": {
                      "description": "Настройки вкладки \"Атрибуты\" каталога заполнения",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/FillingCatalogAttribute"
                      },
                      "minItems": 1
                  },
                  "meta": {
                      "description": "Настройки вкладки \"Метаданные\" каталога заполнения",
                      "type": "object",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/FillingCatalogMetadata"
                          }
                      ]
                  },
                  "constructor": {
                      "description": "Настройки конструктора процессов. Представляет собой массив пакетов.",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/ConstructorPackageData"
                      }
                  },
                  "conditionalUniq": {
                      "description": "Настройки условной уникальности. Передаётся строка с условием, которое описано в формате условий, используемом в конструкторе процессов.",
                      "type": "string"
                  },
                  "groupUniq": {
                      "description": "Настройка групповой уникальности, описанная пользователем в формате TOML. Передаётся в качестве строки с экранированием символов.",
                      "type": "string"
                  },
                  "map": {
                      "$ref": "#/components/schemas/FillingCatalogMap"
                  }
              },
              "required": [
                  "generalInfo",
                  "attributes",
                  "map"
              ]
          },
          "FillingCatalogAttributeConstructorEditProperties": {
              "description": "Свойства редактирования атрибута из конструктора проверок",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "attrId": {
                      "description": "Идентификатор атрибута",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalogId": {
                      "description": "Идентификатор каталога",
                      "type": "integer",
                      "format": "int32"
                  },
                  "isManualInput": {
                      "description": "Возможен ли ручной ввод атрибута.\nОписывается в блоке \"Автозаполнение\".\n\nЗначение определяется на основе поля `valueNotFromDict` в блоке конструктора процессов.",
                      "type": "boolean"
                  },
                  "dependencies": {
                      "description": "Идентификаторы атрибутов, значения которых зависят от заполнения данного атрибута.\nОписываются в блоке `Автозаполнение`.",
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              },
              "required": [
                  "attrId",
                  "catalogId",
                  "isManualInput",
                  "dependencies"
              ]
          },
          "FillingCatalogMap": {
              "description": "Настройки карты каталога заполнения",
              "type": "object",
              "properties": {
                  "hasGeo": {
                      "description": "Наличие геопривязки в каталоге",
                      "type": "boolean",
                      "default": false
                  },
                  "typeGeoTagIds": {
                      "description": "Массив строковых идентификаторов типов геометрии",
                      "type": "array",
                      "items": {
                          "$ref": "geodata.yaml#/components/schemas/GeojsonGeoTypeTagIdEnum"
                      }
                  },
                  "isWGS84": {
                      "description": "Система координат (СК), в которой хранятся геоданные объектов каталога. Если принимает значение\n  - true, то СК - WGS84\n  - false, то СК - MSK77",
                      "type": "boolean"
                  },
                  "isReq": {
                      "description": "Обязательность геопривязки",
                      "type": "boolean"
                  },
                  "isOneTypeGeoForObj": {
                      "description": "Признак, указывающий, что объект может иметь только один тип геометрии",
                      "type": "boolean"
                  },
                  "isNotReqGeoForService": {
                      "description": "Необязательность геометрии при загрузке через сервис",
                      "type": "boolean"
                  }
              },
              "required": [
                  "hasGeo"
              ]
          },
          "CommonCatalogMap": {
              "description": "Общие настройки карты для каталогов",
              "type": "object",
              "properties": {
                  "hasGeo": {
                      "description": "Наличие геопривязки в каталоге",
                      "type": "boolean",
                      "default": false
                  },
                  "typeGeoIds": {
                      "description": "Массив идентификаторов типов геометрии",
                      "type": "array",
                      "items": {
                          "$ref": "geodata.yaml#/components/schemas/GeojsonGeoTypeTagIdEnum"
                      },
                      "writeOnly": true
                  },
                  "typeGeo": {
                      "description": "Массив типов геометрии",
                      "type": "array",
                      "items": {
                          "$ref": "geodata.yaml#/components/schemas/GeoType"
                      },
                      "readOnly": true
                  }
              },
              "required": [
                  "hasGeo"
              ]
          },
          "ConstructorPackageEventEnum": {
              "description": "Событие, при котором запускается процесс, описанный в конструкторе. Может принимать значения:\n  - change - изменение объекта, включая создание\n  - create - создание объекта,\n  - delete - удаление объекта.",
              "type": "string",
              "enum": [
                  "create",
                  "change",
                  "delete"
              ]
          },
          "ConstructorPackageModeEnum": {
              "description": "Режим работы процесса. Может принимать значения:\n  - event - событие,\n  - backgroung - фоновый процесс,\n  - eventAndBackground - событие и фоновый процесс,\n  - off - отключён.\nЗначение off является приоритетным над остальными. Если указано в массиве, то считается, что процесс отключен и не будет выполняться.",
              "type": "string",
              "enum": [
                  "off",
                  "event",
                  "background",
                  "eventAndBackground"
              ]
          },
          "ConstructorBlockTypeEnum": {
              "description": "Тип блока конструктора. Возможные значения:\n  - package - пакет,\n  - condition - условие,\n  - notice - уведомление,\n  - email - письмо на электронную почту,\n  - autochange - автоизменение,\n  - autofill - автозаполнение.",
              "type": "string",
              "enum": [
                  "package",
                  "condition",
                  "notice",
                  "email",
                  "autochange",
                  "autofill"
              ]
          },
          "ConstructorBlockPackage": {
              "description": "Настройки для блока \"Пакет\"",
              "type": "object",
              "properties": {
                  "packTechName": {
                      "description": "Технологическое наименование пакета, который должен выполниться в данном блоке.",
                      "type": "string"
                  }
              }
          },
          "ConstructorBlockCondition": {
              "description": "Настройки для блока \"Условие\"",
              "type": "object",
              "properties": {
                  "condition": {
                      "description": "Условие проверки значений атрибутов. Cинтаксис условий подробно описан в статье в вики в разделе \"Конструктор процессов\".",
                      "type": "string"
                  },
                  "uniqAttr": {
                      "description": "Технологическое наименование атрибута каталога, для которого будет производиться проверка уникальности в рамках исполнения блока.\nАтрибут прописывается как и в настройках условий - attr.{techName}\nМожно указать атрибуты всех типов данных, кроме типов: таблица, файл, флаг. Указывается непосредственно корневой атрибут.",
                      "type": "string"
                  }
              }
          },
          "ConstructorBlockNotice": {
              "description": "Настройки для блока \"Уведомление\"",
              "type": "object",
              "properties": {
                  "message": {
                      "description": "В блоке \"notice\":\nТекст уведомления, который должен получить пользователь/система при работе с объектом каталога.",
                      "type": "string"
                  }
              }
          },
          "ConstructorBlockEmail": {
              "description": "Настройки для блока \"E-mail\"",
              "type": "object",
              "properties": {
                  "message": {
                      "description": "Текст письма, который должен быть отправлен на указанный адрес электронной почты при выполнении блока.",
                      "type": "string"
                  },
                  "email": {
                      "description": "Адрес электронной почты, на который должно быть отправлено письмо при выполнении блока.",
                      "type": "string"
                  }
              }
          },
          "ConstructorBlockAutochange": {
              "description": "Настройки для блока \"Автоизменение\"",
              "type": "object",
              "properties": {
                  "condition": {
                      "description": "Условие при выполнении, которого будет происходит заполнение атрибутов. В условии можно использовать атрибуты любого типа, включая системные.\nCинтаксис условий подробно описан в статье в вики в разделе \"Конструктор процессов\".",
                      "type": "string"
                  },
                  "markObjDelete": {
                      "description": "Позволяет после изменения значений в атрибутах пометить объект как удаленный.\nДанное свойство может быть true, только в случае, если в режиме работы пакета указан фоновый процесс event = \"background\".",
                      "type": "boolean"
                  },
                  "mapping": {
                      "description": "Список сопоставления атрибутов каталога и значений, которые должны подставиться в рамках выполнения автоизменения.",
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "catalogAttr": {
                                  "description": "Атрибут каталога, которому необходимо присвоить значение автоизменением.\nУказывается в формате attr.{techName}\nВозможно указать все типы атрибутов, кроме: файл, ссылка на объект, таблица.",
                                  "type": "string"
                              },
                              "value": {
                                  "description": "Значение, которое будет подставляться в указанный атрибут.\nДоступен ввод конкретного значения в формате строки. Если в catalogAttr указан атрибут с типом:\n- \"Строка\", \"Целое число\", \"Дробное число\", \"Дата\", то в value указывается значение в кавычках, далее на стороне сервиса эти значения будут преобразованы к типу данных атрибута.\n- \"Флаг\", то в value указывается значение в кавычках 1 или 0, true или false.\n- \"Справочник\", то в value передаётся в кавычках идентификатор значения из справочника этого атрибута.\nТакже для всех вышеперечисленных типов атрибутов можно указать в value функцию, описанную в пакете, в виде func.{tagId}",
                                  "type": "string"
                              }
                          }
                      }
                  }
              }
          },
          "ConstructorBlockAutofill": {
              "description": "Настройки для блока \"Автозаполнение\"",
              "type": "object",
              "properties": {
                  "refValue": {
                      "description": "Значение для сопоставления со справочником",
                      "type": "string"
                  },
                  "dictId": {
                      "description": "Идентификатор справочника, с которым сопоставляется значение",
                      "type": "integer"
                  },
                  "dictAttr": {
                      "description": "Столбец справочника, по которому производится сопоставление в формате dictAttr.{techName}",
                      "type": "string"
                  },
                  "caseSensitive": {
                      "description": "Учитывать ли регистр значения при сопоставлении со справочником\n\nЕсли не указан, то сравнение выполняется без учета регистра",
                      "type": "boolean"
                  },
                  "allowManualInput": {
                      "description": "Признак позволяющий пользователю при работе с объектам указывать значение не из справочника, для атрибута, который участвует в сопоставлении со справочным.",
                      "type": "boolean"
                  },
                  "mapping": {
                      "description": "Список сопоставления атрибутов каталога и атрибутов справочника.",
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "catalogAttr": {
                                  "description": "Атрибут каталога, которому необходимо присвоить значение автозаполнением.\nУказывается в формате attr.{techName}\nВозможно указать только атрибуты, имеющие свойство \"Изменяемый системой\" (isSystemModify: true).\nТакими атрибутами могут быть все типы атрибутов, кроме: файл, таблица.",
                                  "type": "string"
                              },
                              "value": {
                                  "description": "Атрибут справочника, из которого необходимо использовать значение для автозаполнения.\nУказывается в формате dictAttr.{techName}",
                                  "type": "string"
                              }
                          }
                      }
                  }
              }
          },
          "ConstructorPackageCommonInfo": {
              "description": "Общаяя информация о пакете конструктора процессов",
              "type": "object",
              "properties": {
                  "packName": {
                      "description": "Название пакета",
                      "type": "string"
                  },
                  "packTechName": {
                      "description": "Технологическое наименование пакета. Должно быть уникально в рамках каталога.",
                      "type": "string"
                  },
                  "isMain": {
                      "description": "Признак главного процесса. Если для каталога настраивается конструктор, то обязательно должен быть только 1 файл со значением true. С файла со свойством isMain: true начинается обработка описанного процесса.",
                      "type": "boolean"
                  },
                  "event": {
                      "$ref": "#/components/schemas/ConstructorPackageEventEnum"
                  },
                  "applyTableAttr": {
                      "description": "Применить процесс пакета к объектам табличного атрибута. Указывается табличный атрибут в формате attr.{TableTechName1}.{TableTechName11}.{TableTechName111}.{и т.д.}. То есть указывается вся последовательность табличных атрибутов от корня до того, для которого настраивается пакет.\nЕсли передано данное поле, то в описании блоков могут использоваться только атрибуты внутри указанной таблицы.",
                      "type": "string"
                  }
              },
              "required": [
                  "packTechName",
                  "event",
                  "isMain"
              ]
          },
          "ConstructorPackage": {
              "description": "Пакет конструктора процессов",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/ConstructorPackageCommonInfo"
                  }
              ],
              "properties": {
                  "mode": {
                      "$ref": "#/components/schemas/ConstructorPackageModeEnum"
                  },
                  "blocks": {
                      "description": "Массив блоков конструктора. Каждый блок представляет набор общих свойств и дополнительных настроек в зависимости от типа блока.\nБлок \"START\" явно не указывается. Процесс начинается с блока идущего первым в массиве.\nБлок \"END\" явно не указывается, но чтобы сослаться на него необходимо указать идентификатор \"end\".\nЕсли блок не ссылается на другие блоки, например \"Уведомление\", то в ссылках указывается пустая строка \"\".",
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "tagId": {
                                  "description": "Строковый идентификатор блока конструктора. Должен быть уникален в рамках пакета каталога.",
                                  "type": "string"
                              },
                              "type": {
                                  "$ref": "#/components/schemas/ConstructorBlockTypeEnum"
                              },
                              "name": {
                                  "description": "Наименование блока.",
                                  "type": "string"
                              },
                              "trueBlockTagId": {
                                  "description": "Идентификатор блока, который должен обрабатываться следующим в случае истинности условия/корректной обработки блока.",
                                  "type": "string"
                              },
                              "falseBlockTagId": {
                                  "description": "Идентификатор блока, который должен обрабатываться следующим в случае ложности условия/некорректной обработки блока.",
                                  "type": "string"
                              },
                              "properties": {
                                  "description": "Набор дополнительных свойств блока, зависящих от типа блока.",
                                  "type": "object",
                                  "oneOf": [
                                      {
                                          "$ref": "#/components/schemas/ConstructorBlockPackage"
                                      },
                                      {
                                          "$ref": "#/components/schemas/ConstructorBlockCondition"
                                      },
                                      {
                                          "$ref": "#/components/schemas/ConstructorBlockNotice"
                                      },
                                      {
                                          "$ref": "#/components/schemas/ConstructorBlockEmail"
                                      },
                                      {
                                          "$ref": "#/components/schemas/ConstructorBlockAutochange"
                                      },
                                      {
                                          "$ref": "#/components/schemas/ConstructorBlockAutofill"
                                      }
                                  ]
                              }
                          },
                          "required": [
                              "tagId",
                              "name",
                              "type",
                              "trueBlockTagId",
                              "falseBlockTagId",
                              "properties"
                          ]
                      }
                  },
                  "functions": {
                      "description": "Массив функций, которые используются в рамках пакета.",
                      "type": "array",
                      "items": {
                          "properties": {
                              "tagId": {
                                  "description": "Строковый идентификатор функции. Должен быть уникален в рамках пакета.",
                                  "type": "string"
                              },
                              "outputType": {
                                  "description": "Выходной тип данных функции. Может принимать значения:\n  - string - строка,\n  - number - целое или дробное число,\n  - date - дата.",
                                  "type": "string",
                                  "enum": [
                                      "string",
                                      "number",
                                      "date"
                                  ]
                              },
                              "func": {
                                  "description": "Тело функции. Cинтаксис описания функций подробно описан в статье в вики в разделе \"Конструктор процессов\".",
                                  "type": "string"
                              },
                              "varables": {
                                  "description": "Массив функций, которые будут использоваться в основной функции в качестве переменных.\nПри описании функций важен их порядок в массиве. Функцию-переменную F1 можно использовать в другой функции-переменной F2, если F1 описана раньше чем F2.",
                                  "type": "array",
                                  "items": {
                                      "type": "object",
                                      "properties": {
                                          "tagId": {
                                              "description": "Строковый идентификатор функции-переменной. Должен быть уникален в рамках пакета.",
                                              "type": "string"
                                          },
                                          "outputType": {
                                              "description": "Выходной тип данных функции-переменной. Может принимать значения:\n  - string - строка,\n  - number - целое или дробное число,\n  - date - дата.",
                                              "type": "string",
                                              "enum": [
                                                  "string",
                                                  "number",
                                                  "date"
                                              ]
                                          },
                                          "func": {
                                              "description": "Тело функции-переменной. Cинтаксис описания функций подробно описан в статье в вики в разделе \"Конструктор процессов\".",
                                              "type": "string"
                                          }
                                      },
                                      "required": [
                                          "tagId",
                                          "outputType",
                                          "func"
                                      ]
                                  }
                              }
                          },
                          "required": [
                              "tagId",
                              "outputType",
                              "func"
                          ]
                      }
                  }
              },
              "required": [
                  "mode",
                  "blocks"
              ]
          },
          "ConstructorPackageData": {
              "description": "Данные одного пакета конструктора процессов.",
              "type": "object",
              "properties": {
                  "tomlFormat": {
                      "description": "Настройка одного пакета конструктора процессов, описанная пользователем в формате TOML.\nПередаётся в качестве строки с экранированием символов.",
                      "type": "string"
                  },
                  "jsonFormat": {
                      "description": "Настройка одного пакета конструктора процессов, преобразованная из формата TOML в JSON.\nНеобходима для обработки на стороне клиента для реализации доп. функций, помогающих пользователю при создании настройки.",
                      "readOnly": true,
                      "type": "object",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/ConstructorPackage"
                          }
                      ]
                  }
              },
              "required": [
                  "tomlFormat",
                  "jsonFormat"
              ]
          },
          "ConstructorValidationError": {
              "type": "object",
              "properties": {
                  "packTechName": {
                      "description": "Технологическое наименование пакета, в котором были обнаружены ошибки.",
                      "type": "string"
                  },
                  "errors": {
                      "description": "Массив найденных ошибок.",
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "blockTagId": {
                                  "description": "Строковый идентификатор блока конструктора, в котором обнаружена ошибка. Если ошибка не относится к конкретному блоку, то указывается null.",
                                  "type": "string"
                              },
                              "blockType": {
                                  "description": "Тип блока конструктора, в котором обнаружена ошибка. Указывается только для ошибок обнаруженных в блоках.",
                                  "type": "string"
                              },
                              "functionTagId": {
                                  "description": "Строковый идентификатор функции из блока [[functions]], в которой обнаружена ошибка. Указывается только для ошибок, обнаруженных в функциях.",
                                  "type": "string"
                              },
                              "message": {
                                  "description": "Описание найденной ошибки.",
                                  "type": "string",
                                  "enum": [
                                      "Недопустимое выражение '{expression}'.",
                                      "Найдено {symbol/expression}. Ожидалось {symbol/expression}.",
                                      "Поле {parameterName} должно принимать одно из перечисленных значений: {enumLiterals}.",
                                      "Не найдено или не заполнено обязательное поле {fieldName}.",
                                      "Указано значение с некорректным типом данных. Ожидалось {type}.",
                                      "Не найден пакет с настройкой главного процесса, где isMain: true.",
                                      "Указан packTechName несуществующего пакета.",
                                      "Настройка главного процесса невозможна в нескольких пакетах.",
                                      "Не найдено окончание процесса 'end'.",
                                      "'falseBlockId' может принимать значение только в настройках блока 'Условие'.",
                                      "Указан tagId несуществующего блока.",
                                      "Значение packTechName должно быть уникальным в рамках настроек конструктора процесса текущего каталога.",
                                      "Значение tagId должно быть уникальным в рамках настроек текущего пакета конструктора процесса.",
                                      "В каталоге отсутсвует указанный атрибут attr.{techName}.",
                                      "Не найдена указанная функция func.{tagId}",
                                      "Передан некорректный набор входных параметров в {operator/function}",
                                      "Свойство markObjDelete может быть true, только в случае, если в режиме работы пакета указан фоновый процесс mode = 'background'.",
                                      "Атрибут с типом {type} недоступен для сопоставления в данном блоке.",
                                      "Невозможно преобразовать значение - {value} к типу {type}",
                                      "Атрибут attr.{techName} должен иметь признак 'Изменяемый системой', чтобы использоваться в блоке автозаполнения",
                                      "Ошибка при обходе блоков конструктора. Обнаружен бесконечный цикл, начинающийся с блока {tagId}.",
                                      "Не найден справочник с идентификатором {dictId}.",
                                      "Не найден элемент справочника {elementId} в справочнике {dictId}.",
                                      "Не найден каталог с идентификатором {catalogId}.",
                                      "Не найдено регулярное выражение с идентификатором {regexpId}.",
                                      "В поле {parameterName} передано некорректное значение. Ожидается {понятное описание что ожидалось}.",
                                      "Атрибут с типом {type} недоступен для оператора {operator}",
                                      "В справочнике отсутсвует указанный атрибут attr.{dictTechName}.{columnTechName}/dictAttr.{techName}",
                                      "Невозможно использовать ручной ввод в автозаполнении, где в сопоставлении указана функция."
                                  ]
                              }
                          },
                          "required": [
                              "message"
                          ]
                      }
                  }
              }
          },
          "CatalogPackageInfo": {
              "description": "Информация о каталоге и конструкторе процессов, в котором используется сущность (справочник, регулярное выражение, каталог заполнения и пр.)",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                  }
              ],
              "properties": {
                  "packName": {
                      "description": "Название пакета",
                      "type": "integer",
                      "format": "int32"
                  },
                  "packTechName": {
                      "description": "Технологическое наименование пакета",
                      "type": "string"
                  }
              },
              "required": [
                  "packName",
                  "packTechName"
              ]
          },
          "CatalogUniqInfo": {
              "description": "Информация о каталоге и настройках уникальности, в котором используется сущность (справочник, регулярное выражение, каталог заполнения)",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                  }
              ],
              "properties": {
                  "packTechName": {
                      "description": "Технологическое наименование уникальности",
                      "type": "string"
                  },
                  "uniqTypeTag": {
                      "description": "Технологическое наименование пакета:\n\n- `conditional` - условная уникальность\n- `group` - групповая уникальность",
                      "type": "string",
                      "enum": [
                          "conditional",
                          "group"
                      ]
                  }
              },
              "required": [
                  "packTechName",
                  "uniqTypeTag"
              ]
          },
          "ConditionalUniqValidationError": {
              "type": "object",
              "properties": {
                  "code": {
                      "description": "HTTP-код ошибки",
                      "type": "integer",
                      "format": "int32",
                      "example": 400
                  },
                  "messageType": {
                      "description": "Тип ответа",
                      "type": "string",
                      "example": "Bad request"
                  },
                  "errors": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "Недопустимое выражение '{expression}'.",
                              "Найдено {symbol/expression}. Ожидалось {symbol/expression}.",
                              "В каталоге отсутсвует указанный атрибут attr.{techName}.",
                              "Указано значение с некорректным типом данных. Ожидалось {type}.",
                              "Передан некорректный набор входных параметров в {operator}.",
                              "Не найден справочник с идентификатором {dictId}.",
                              "Не найден элемент справочника {elementId} в справочнике {dictId}.",
                              "Атрибут с типом {type} недоступен для оператора {operator}.",
                              "Не найден каталог с идентификатором {catalogId}.",
                              "Не найдено регулярное выражение с идентификатором {regexpId}.",
                              "В справочнике отсутсвует указанный атрибут attr.{dictTechName}.{columnTechName}/dictAttr.{techName}"
                          ]
                      }
                  }
              },
              "required": [
                  "code",
                  "messageType",
                  "errors"
              ]
          },
          "GroupUniqValidationError": {
              "type": "object",
              "properties": {
                  "groupTechName": {
                      "type": "string"
                  },
                  "errors": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "Недопустимое выражение '{expression}'.",
                              "Найдено {symbol/expression}. Ожидалось {symbol/expression}.",
                              "В каталоге отсутсвует указанный атрибут attr.{techName}.",
                              "Указано значение с некорректным типом данных. Ожидалось {type}.",
                              "Передан некорректный набор входных параметров в {operator}.",
                              "Не заполнено обязательное поле {fieldName}.",
                              "Значение groupTechName должно быть уникальным в рамках настроек групповой уникальности текущего каталога.",
                              "Не найден справочник с идентификатором {dictId}.",
                              "Не найден элемент справочника {elementId} в справочнике {dictId}.",
                              "Атрибут с типом {type} недоступен для оператора {operator}.",
                              "Не найден каталог с идентификатором {catalogId}.",
                              "Не найдено регулярное выражение с идентификатором {regexpId}.",
                              "В справочнике отсутсвует указанный атрибут attr.{dictTechName}.{columnTechName}/dictAttr.{techName}"
                          ]
                      }
                  }
              }
          },
          "CommonUserInfo": {
              "description": "Общая информация о пользователе",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор пользователя",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "login": {
                      "description": "Логин пользователя",
                      "type": "string"
                  },
                  "lastName": {
                      "description": "Фамилия",
                      "type": "string"
                  },
                  "firstName": {
                      "description": "Имя",
                      "type": "string"
                  },
                  "pathroName": {
                      "description": "Отчество",
                      "type": "string"
                  },
                  "email": {
                      "description": "E-mail",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "login",
                  "lastName",
                  "email"
              ]
          },
          "UserListItem": {
              "description": "Информация о пользователе в списке пользователей",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonUserInfo"
                  }
              ],
              "properties": {
                  "userGroupName": {
                      "$ref": "#/components/schemas/UserGroupNameEnum"
                  },
                  "privilegeFillText": {
                      "description": "Список привилегий каталогов заполнения/групп каталогов (кириллицей), которые доступны пользователю",
                      "type": "string",
                      "readOnly": true
                  },
                  "privilegePublText": {
                      "description": "Список привилегий каталогов публикации (кириллицей), которые доступны пользователю",
                      "type": "string",
                      "readOnly": true
                  },
                  "hasSpecialRoles": {
                      "description": "Наличие назначенных спецролей пользователя для конкретных каталогов",
                      "type": "boolean"
                  },
                  "mailingStatusName": {
                      "$ref": "#/components/schemas/MailingStatusNameEnum"
                  },
                  "oiv": {
                      "description": "Информация об организации, в которую входит пользователь",
                      "allOf": [
                          {
                              "$ref": "oivs.yaml#/components/schemas/CommonOivInfo"
                          }
                      ]
                  },
                  "isTemporary": {
                      "description": "Признак временного пользователя",
                      "type": "boolean"
                  },
                  "dateEnd": {
                      "description": "Дата окончания действия временной учетной записи пользователя",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateFormat"
                          }
                      ]
                  },
                  "status": {
                      "$ref": "#/components/schemas/UserStatus"
                  },
                  "isSudir": {
                      "type": "boolean"
                  }
              },
              "required": [
                  "userGroupName",
                  "privilegeFillText",
                  "privilegePublText",
                  "hasSpecialRoles",
                  "isGetEmailName",
                  "oiv",
                  "isEnabled",
                  "isDeleted"
              ]
          },
          "User": {
              "description": "Пользователь",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonUserInfo"
                  }
              ],
              "properties": {
                  "phone": {
                      "description": "Номер телефона",
                      "type": "string"
                  },
                  "position": {
                      "description": "Должность",
                      "type": "string"
                  },
                  "oiv": {
                      "allOf": [
                          {
                              "$ref": "oivs.yaml#/components/schemas/CommonOivInfo"
                          }
                      ],
                      "readOnly": true
                  },
                  "oivId": {
                      "description": "Идентификатор ОИВ",
                      "type": "integer",
                      "format": "int32",
                      "writeOnly": true
                  },
                  "userGroupTagId": {
                      "description": "TagId группы пользователей",
                      "type": "string",
                      "writeOnly": true
                  },
                  "userGroup": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/UserGroup"
                          }
                      ],
                      "readOnly": true
                  },
                  "privilegeFill": {
                      "$ref": "#/components/schemas/UserPrivilegeFill",
                      "readOnly": false
                  },
                  "privilegePubl": {
                      "$ref": "#/components/schemas/UserPrivilegePubl",
                      "readOnly": false
                  },
                  "menuIds": {
                      "type": "array",
                      "items": {
                          "type": "integer"
                      }
                  },
                  "isTemporary": {
                      "description": "Признак временного пользователя",
                      "type": "boolean"
                  },
                  "dateEnd": {
                      "description": "Дата окончания действия временной учетной записи пользователя. При isTemporary=true dateEnd обязательна",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateFormat"
                          }
                      ]
                  }
              },
              "required": [
                  "oivId",
                  "oiv",
                  "userGroupTagId",
                  "userGroup",
                  "privilegeFill",
                  "privilegePubl",
                  "menuIds",
                  "isTemporary"
              ]
          },
          "UserAdmin": {
              "description": "Администратор",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonUserInfo"
                  }
              ],
              "properties": {
                  "phone": {
                      "description": "Номер телефона",
                      "type": "string"
                  },
                  "position": {
                      "description": "Должность",
                      "type": "string"
                  }
              },
              "required": [
                  "lastName",
                  "firstName",
                  "pathroName"
              ]
          },
          "SpecPrivilege": {
              "type": "object",
              "description": "Базовая информация о спецпривилегиях на каталог/группу каталогов",
              "properties": {
                  "entityId": {
                      "description": "Идентификатор каталога или группы каталогов",
                      "type": "integer"
                  },
                  "entityName": {
                      "description": "Наименование сущности",
                      "type": "string",
                      "readOnly": true
                  },
                  "entityType": {
                      "description": "Тип сущности",
                      "type": "string",
                      "enum": [
                          "fillingCatalog",
                          "publicationCatalog",
                          "catalogGroup"
                      ]
                  },
                  "privilege": {
                      "description": "Привилегии каталогов и групп каталогов",
                      "type": "object",
                      "oneOf": [
                          {
                              "$ref": "#/components/schemas/UserPrivilegeFill"
                          },
                          {
                              "$ref": "#/components/schemas/UserPrivilegePubl"
                          }
                      ]
                  }
              },
              "required": [
                  "entityId",
                  "entityType",
                  "privileges"
              ]
          },
          "SpecPrivilegeInfo": {
              "description": "Полная информация о спецпривилегии",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/SpecPrivilege"
                  }
              ],
              "properties": {
                  "id": {
                      "description": "Идентификатор записи о спецпривилегии",
                      "type": "integer"
                  }
              },
              "required": [
                  "id"
              ]
          },
          "CommonUserGroupInfo": {
              "description": "Общая информация о группе пользователя",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор группы пользователей",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "$ref": "#/components/schemas/UserGroupNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/UserGroupTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ]
          },
          "UserGroup": {
              "description": "Группа пользователей",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonUserGroupInfo"
                  }
              ],
              "properties": {
                  "excp_catalog": {
                      "description": "Массив идентификаторов каталогов-исключений",
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "readOnly": true
                      }
                  },
                  "super_catalog": {
                      "description": "Массив идентификаторов каталогов-исключений",
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "readOnly": true
                      }
                  }
              },
              "required": [
                  "excp_catalog",
                  "super_catalog"
              ]
          },
          "UserGroupNameEnum": {
              "description": "Наименование группы пользователей",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "UserGroupTagIdEnum": {
              "description": "Техническое наименование группы пользователей",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "superUser",
                          "userOiv",
                          "apparat",
                          "viewAll",
                          "guest"
                      ]
                  }
              ]
          },
          "UserPrivilege": {
              "description": "Привилегии пользователей      ",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор группы пользователей",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "$ref": "#/components/schemas/UserPrivilegeNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/UserPrivilegeTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ]
          },
          "UserPrivilegeNameEnum": {
              "description": "Наименование привилегии пользователей",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "Просмотр",
                          "Экспорт",
                          "Редактирование",
                          "Подписание",
                          "Импорт",
                          "Редактирование метаданных",
                          "Публикация объектов"
                      ]
                  }
              ]
          },
          "UserPrivilegeTagIdEnum": {
              "description": "Техническое наименование привилегии пользователей",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "canView",
                          "canExport",
                          "canEdit",
                          "canSign",
                          "canImport",
                          "canEditMeta",
                          "canPubl"
                      ]
                  }
              ]
          },
          "Menu": {
              "description": "Пункты меню, доступные пользователям. Меню содержит два уровня.",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор пункта меню",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "$ref": "#/components/schemas/MenuNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/MenuTagIdEnum"
                  },
                  "children": {
                      "description": "Массив дочерних пунктов меню в формате json",
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "id": {
                                  "description": "Идентификатор пункта меню",
                                  "type": "integer",
                                  "format": "int32"
                              },
                              "name": {
                                  "$ref": "#/components/schemas/MenuNameEnum"
                              },
                              "tagId": {
                                  "$ref": "#/components/schemas/MenuTagIdEnum"
                              }
                          }
                      }
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId",
                  "children"
              ]
          },
          "MenuNameEnum": {
              "description": "Наименование пункта меню",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "MenuTagIdEnum": {
              "description": "Техническое наименование пункта меню",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "catalogs",
                          "control",
                          "object-categories",
                          "attributes",
                          "dictionaries",
                          "publication-queue",
                          "regexps",
                          "search-indexes",
                          "thematic-categories",
                          "information-systems",
                          "group-catalogs",
                          "users",
                          "pushsubs"
                      ]
                  }
              ]
          },
          "CommonPrivilege": {
              "description": "Привилегии каталогов заполнения, публикации групп каталогов      ",
              "properties": {
                  "canView": {
                      "description": "Просмотр",
                      "type": "boolean"
                  },
                  "canExport": {
                      "description": "Экспорт",
                      "type": "boolean"
                  },
                  "canEditMeta": {
                      "description": "Редактирование метаданных",
                      "type": "boolean"
                  }
              },
              "required": [
                  "canView",
                  "canExport",
                  "canEditMeta"
              ]
          },
          "UserPrivilegeFill": {
              "description": "Привилегии каталогов заполнения и групп каталогов",
              "type": "object",
              "properties": {
                  "canView": {
                      "description": "Просмотр",
                      "type": "boolean"
                  },
                  "canExport": {
                      "description": "Экспорт",
                      "type": "boolean"
                  },
                  "canEditMeta": {
                      "description": "Редактирование метаданных",
                      "type": "boolean"
                  },
                  "canEdit": {
                      "description": "Редактирование",
                      "type": "boolean"
                  },
                  "canSign": {
                      "description": "Подписание",
                      "type": "boolean"
                  },
                  "canImport": {
                      "description": "Импорт",
                      "type": "boolean"
                  }
              },
              "required": [
                  "canEdit",
                  "canSign",
                  "canImport",
                  "canView",
                  "canExport",
                  "canEditMeta"
              ]
          },
          "UserPrivilegePubl": {
              "description": "Привилегии каталогов публикации",
              "type": "object",
              "properties": {
                  "canView": {
                      "description": "Просмотр",
                      "type": "boolean"
                  },
                  "canExport": {
                      "description": "Экспорт",
                      "type": "boolean"
                  },
                  "canEditMeta": {
                      "description": "Редактирование метаданных",
                      "type": "boolean"
                  },
                  "canPubl": {
                      "description": "Публикация объектов",
                      "type": "boolean"
                  }
              },
              "required": [
                  "canPubl",
                  "canView",
                  "canExport",
                  "canEditMeta"
              ]
          },
          "UserStatus": {
              "description": "Статус пользователя",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор статуса пользователя",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "$ref": "#/components/schemas/UserStatusNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/UserStatusTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ]
          },
          "UserStatusNameEnum": {
              "description": "Наименование статуса учетной записи пользователя",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "UserStatusTagIdEnum": {
              "description": "TagId статуса учетной записи пользователя",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "active",
                          "deleted",
                          "blocked",
                          "tempBlocked",
                          "temporary"
                      ]
                  }
              ]
          },
          "MailingStatus": {
              "description": "Группа пользователей",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор статуса рассылок",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "$ref": "#/components/schemas/MailingStatusNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/MailingStatusTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ]
          },
          "MailingStatusTagIdEnum": {
              "description": "TagId статуса рассылок",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "allOn",
                          "partlyOn",
                          "allOff"
                      ]
                  }
              ]
          },
          "MailingStatusNameEnum": {
              "description": "Наименование статуса рассылок",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "OkUserRecoveredResponse": {
              "allOf": [
                  {
                      "$ref": "_common.yaml#/components/schemas/OkResponse"
                  }
              ],
              "properties": {
                  "userId": {
                      "description": "Идентификатор пользователя",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  }
              },
              "required": [
                  "userId"
              ]
          },
          "IncorrectUserRecoveredResponse": {
              "allOf": [
                  {
                      "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                  }
              ],
              "properties": {
                  "userId": {
                      "description": "Идентификатор пользователя",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  }
              },
              "required": [
                  "userId"
              ]
          },
          "CommonSystemInfo": {
              "description": "Общая информация об информационной системе",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор информационной системы",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "name": {
                      "description": "Название информационной системы",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "SystemListItem": {
              "description": "Информация об информационной системе в списке систем",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonSystemInfo"
                  }
              ],
              "type": "object",
              "properties": {
                  "login": {
                      "description": "Логин информационной системы",
                      "type": "string"
                  },
                  "fullName": {
                      "description": "Полное наименование информационной системы",
                      "type": "string"
                  },
                  "countCatalogs": {
                      "description": "Количество каталогов, доступных системе",
                      "type": "integer"
                  },
                  "isDeleted": {
                      "description": "Признак удаления",
                      "type": "boolean"
                  }
              },
              "required": [
                  "login",
                  "isDeleted"
              ]
          },
          "System": {
              "description": "Информационная система",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonSystemInfo"
                  }
              ],
              "properties": {
                  "login": {
                      "description": "Логин информационной системы",
                      "type": "string"
                  },
                  "password": {
                      "description": "Пароль информационной системы",
                      "type": "string",
                      "writeOnly": true
                  },
                  "fullName": {
                      "description": "Полное наименование системы",
                      "type": "string"
                  },
                  "signWithoutSignature": {
                      "description": "Признак \"Всегда загружать данные как подписанные\"",
                      "type": "boolean"
                  },
                  "activeSessionLimit": {
                      "description": "Доступное число потоков для информационной системы",
                      "type": "integer",
                      "format": "int32"
                  },
                  "responsibles": {
                      "description": "Данные об ответсвенных за информационную систему",
                      "type": "array",
                      "minItems": 1,
                      "items": {
                          "$ref": "catalogs.yaml#/components/schemas/ResponsiblePersonInfo"
                      }
                  }
              },
              "required": [
                  "login"
              ]
          },
          "SystemCatalogListItem": {
              "description": "Элемент списка каталогов,связанных с системой",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                  }
              ],
              "properties": {
                  "objectCategories": {
                      "description": "Категории объектов каталога, перечисленные через запятую с пробелом",
                      "type": "string"
                  },
                  "thematicCategory": {
                      "description": "Тематическая категория каталога",
                      "type": "string"
                  },
                  "oivs": {
                      "description": "ОИВ, ответственные за наполнение каталога, перечисленные через запятую с пробелом",
                      "type": "string"
                  }
              },
              "required": [
                  "objectCategories",
                  "thematicCategory",
                  "oivs"
              ]
          },
          "CommonThematicCategoryInfo": {
              "description": "Общая информация о тематической категории",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор тематической категории",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "name": {
                      "description": "Русскоязычное наименование тематической категории",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "ThematicCategory": {
              "description": "Тематическая категория",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonThematicCategoryInfo"
                  }
              ],
              "properties": {
                  "enName": {
                      "description": "Англоязычное наименование тематической категории",
                      "type": "string"
                  },
                  "status": {
                      "readOnly": true,
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/ThematicCategoryStatus"
                          }
                      ]
                  },
                  "statusTagId": {
                      "writeOnly": true,
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/ThematicCategoryStatusTagIdEnum"
                          }
                      ]
                  },
                  "fileId": {
                      "description": "Идентификатор изображения (uuid) для иконки категории",
                      "type": "string"
                  }
              },
              "required": [
                  "status",
                  "statusTagId"
              ]
          },
          "ThematicCategoryListItem": {
              "description": "Информация о тематической категории в списке тематических категорий",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonThematicCategoryInfo"
                  }
              ],
              "type": "object",
              "properties": {
                  "enName": {
                      "description": "Англоязычное наименование тематической категории\n\nЕсли не задано, то возвращается пустая строка",
                      "type": "string"
                  },
                  "status": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/ThematicCategoryStatus"
                          }
                      ]
                  }
              },
              "required": [
                  "enName",
                  "status"
              ]
          },
          "ThematicCategoryStatusTagIdEnum": {
              "description": "Статус публикации тематической категории:\n  - `unpublished` - не опубликована\n  - `published` - опубликована",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "unpublished",
                          "published"
                      ]
                  }
              ]
          },
          "ThematicCategoryStatusNameEnum": {
              "description": "Наименование статуса публикации тематической категории",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "ThematicCategoryStatus": {
              "description": "Статус публикации тематической категории",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор статуса публикации",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "$ref": "#/components/schemas/ThematicCategoryStatusNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/ThematicCategoryStatusTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ]
          },
          "AttributeTypeTagIdEnum": {
              "description": "Техническое наименование типа атрибута",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "STRING",
                          "NUMBER",
                          "DATE",
                          "DICTIONARY",
                          "CATALOG",
                          "FLAG",
                          "FILE",
                          "LINK"
                      ]
                  }
              ]
          },
          "AttributeTypeNameEnum": {
              "description": "Наименование типа атрибута",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "CommonAttributeInfo": {
              "type": "object",
              "description": "Общая информация об атрибуте",
              "properties": {
                  "id": {
                      "description": "Идентификатор атрибута",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "techName": {
                      "description": "Техническое наименование атрибута, не может иметь значение \"id\"",
                      "type": "string"
                  },
                  "rusName": {
                      "description": "Русскоязычное наименование атрибута, должно быть уникальным",
                      "type": "string"
                  },
                  "enName": {
                      "description": "Англоязычное наименование атрибута",
                      "type": "string"
                  },
                  "description": {
                      "description": "Описание атрибута",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "techName",
                  "rusName",
                  "enName"
              ]
          },
          "AttributeListItem": {
              "description": "Элемент списка атрибутов.\n\nИспользуется при выдаче списка атрибутов в разделе `Управление > Атрибуты`.",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonAttributeInfo"
                  }
              ],
              "properties": {
                  "attributeType": {
                      "$ref": "#/components/schemas/AttributeTypeNameEnum"
                  },
                  "dictionary": {
                      "description": "Информация о справочнике в справочном атрибуте",
                      "allOf": [
                          {
                              "$ref": "dictionaries.yaml#/components/schemas/CommonDictionaryInfo"
                          }
                      ]
                  }
              },
              "required": [
                  "attributeType"
              ]
          },
          "AttributeType": {
              "description": "Тип атрибута",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор типа атрибута",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "$ref": "#/components/schemas/AttributeTypeNameEnum"
                  },
                  "typeTag": {
                      "$ref": "#/components/schemas/AttributeTypeTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "typeTag"
              ]
          },
          "AttributeAlterName": {
              "description": "Альтернативное наименование атрибута",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Идентификатор альтернативного наименования\n\nЕсли он передается в методе PUT, альтернативное наименование атрибута будет изменено в БД. Иначе - создается новое альтернативное название."
                  },
                  "rusAlterName": {
                      "type": "string",
                      "description": "Русскоязычное альтернативное наименование атрибута\n\n_Должно быть уникальным для каждого атрибута_"
                  },
                  "enAlterName": {
                      "description": "Англоязычное альтернативное наименование атрибута",
                      "type": "string"
                  }
              },
              "required": [
                  "rusAlterName",
                  "enAlterName"
              ],
              "example": {
                  "id": 736,
                  "rusAlterName": "Муниципальный район",
                  "enAlterName": "District"
              }
          },
          "CommonAttribute": {
              "description": "Атрибут.\n\nСхема включает общие для всех типов атрибутов поля.",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonAttributeInfo"
                  }
              ],
              "properties": {
                  "type": {
                      "readOnly": true,
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/AttributeType"
                          }
                      ]
                  },
                  "typeTag": {
                      "writeOnly": true,
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/AttributeTypeTagIdEnum"
                          }
                      ]
                  },
                  "alterNames": {
                      "description": "Альтернативные названия атрибута",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/AttributeAlterName"
                      }
                  }
              },
              "required": [
                  "type",
                  "typeTag",
                  "alterNames"
              ]
          },
          "DictionaryAttribute": {
              "type": "object",
              "description": "Справочный атрибут",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonAttribute"
                  }
              ],
              "properties": {
                  "dictionary": {
                      "description": "Информация о справочнике в справочном атрибуте",
                      "allOf": [
                          {
                              "$ref": "dictionaries.yaml#/components/schemas/CommonDictionaryInfo"
                          }
                      ],
                      "properties": {
                          "parentId": {
                              "description": "Идентификатор справочника-родителя",
                              "type": "integer"
                          }
                      },
                      "readOnly": true
                  },
                  "dictionaryId": {
                      "description": "Идентификатор справочника",
                      "type": "integer",
                      "format": "int32",
                      "writeOnly": true
                  }
              },
              "required": [
                  "dictionary",
                  "dictionaryId"
              ],
              "example": {
                  "id": 2,
                  "techName": "district",
                  "rusName": "Район",
                  "enName": "District",
                  "type": {
                      "id": 4,
                      "name": "Справочник",
                      "typeTag": "dict"
                  },
                  "description": "Название района",
                  "alterNames": [
                      {
                          "id": 91,
                          "rusAlterName": "Регион",
                          "enAlterName": "Area"
                      },
                      {
                          "id": 92,
                          "rusAlterName": "Название района",
                          "enAlterName": "Region name"
                      }
                  ],
                  "dictionary": {
                      "id": 61,
                      "name": "Справочник районов",
                      "parentId": 60
                  }
              }
          },
          "StringAttribute": {
              "type": "object",
              "description": "Строковый атрибут",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonAttribute"
                  }
              ],
              "properties": {
                  "defaultMaxLength": {
                      "description": "Максимальная длина значения атрибута по умолчанию",
                      "type": "integer",
                      "format": "int32"
                  },
                  "defaultFieldMask": {
                      "description": "Маска поля ввода строковых значений по умолчанию",
                      "type": "string"
                  },
                  "defaultFieldRegexId": {
                      "description": "Идентификатор регулярного выражения для валидации значения атрибута по умолчанию",
                      "type": "string",
                      "writeOnly": true
                  },
                  "defaultFieldRegex": {
                      "allOf": [
                          {
                              "$ref": "regexps.yaml#/components/schemas/CommonRegularExpressionInfo"
                          },
                          {
                              "$ref": "regexps.yaml#/components/schemas/RegularExpression"
                          }
                      ],
                      "description": "Регулярное выражение для валидации значения атрибута по умолчанию",
                      "type": "object",
                      "readOnly": true
                  }
              },
              "required": [
                  "defaultMaxLength"
              ]
          },
          "FloatAttribute": {
              "type": "object",
              "description": "Атрибут с типом дробное число",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonAttribute"
                  }
              ],
              "properties": {
                  "defaultMaxLength": {
                      "description": "Максимальная длина целой части по умолчанию, от `1` до `38`",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1,
                      "maximum": 38
                  },
                  "defaultMaxLengthDecimal": {
                      "description": "Максимальная длина дробной части по умолчанию, от `1` до `38`",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1,
                      "maximum": 38
                  }
              },
              "required": [
                  "defaultMaxLength",
                  "defaultMaxLengthDecimal"
              ]
          },
          "IntegerAttribute": {
              "type": "object",
              "description": "Атрибут с типом целое число",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonAttribute"
                  }
              ],
              "properties": {
                  "defaultMaxLength": {
                      "description": "Максимальная длина числа по умолчанию, от `1` до `38`",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1,
                      "maximum": 38
                  }
              },
              "required": [
                  "defaultMaxLength"
              ]
          },
          "DateAttribute": {
              "type": "object",
              "description": "Атрибут с типом дата",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonAttribute"
                  }
              ]
          },
          "FileAttribute": {
              "type": "object",
              "description": "Файловый атрибут",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonAttribute"
                  }
              ]
          },
          "BooleanAttribute": {
              "type": "object",
              "description": "Атрибут с типом флаг",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonAttribute"
                  }
              ]
          },
          "LinkAttribute": {
              "type": "object",
              "description": "Ссылочный атрибут",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonAttribute"
                  }
              ],
              "example": {
                  "id": 34,
                  "techName": "parentOrg",
                  "rusName": "Родительская организация",
                  "enName": "Parent Organization",
                  "description": "Родительская организация",
                  "type": {
                      "id": 8,
                      "name": "Ссылка на объект",
                      "typeTag": "link"
                  },
                  "typeTag": "link",
                  "alterNames": []
              }
          },
          "TableAttribute": {
              "type": "object",
              "description": "Табличный атрибут",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonAttribute"
                  }
              ]
          },
          "Attribute": {
              "description": "Атрибут",
              "type": "object",
              "oneOf": [
                  {
                      "$ref": "#/components/schemas/StringAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/IntegerAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/FloatAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/DateAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/FileAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/BooleanAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/DictionaryAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/LinkAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/TableAttribute"
                  }
              ]
          },
          "AttributeGroup": {
              "description": "Группа атрибутов",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор группы атрибутов",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "name": {
                      "description": "Наименование группы атрибутоа",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "SystemAttribute": {
              "description": "Системный атрибут",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "id": {
                      "description": "Идентификатор системного атрибута",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "description": "Наименование системного атрибута",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "AttributeCatalogInfo": {
              "description": "Информация о каталоге, в котором используется атрибут.",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "catalogId": {
                      "description": "Идентификатор каталога",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalogName": {
                      "description": "Наименование каталога",
                      "type": "string"
                  },
                  "isCatalogDeleted": {
                      "description": "Удален ли каталог",
                      "type": "boolean"
                  },
                  "attributeRusName": {
                      "description": "Русскоязычное наименование атрибута в каталоге\n\nМожет быть выбрано одно из альтернативных наименований атрибута, иначе - используется значение по умолчанию",
                      "type": "string"
                  },
                  "attributeEnName": {
                      "description": "Англоязычное наименование атрибута в каталоге\n\nМожет быть выбрано одно из альтернативных наименований атрибута, иначе - используется значение по умолчанию",
                      "type": "string"
                  }
              },
              "required": [
                  "catalogId",
                  "catalogName",
                  "isCatalogDeleted",
                  "attributeRusName",
                  "attributeEnName"
              ]
          },
          "CatalogAttributeInfo": {
              "description": "Информация о каталоге и атрибуте, в котором используется сущность (атрибут, справочник, рег. выражение, поисковый индекс, каталог заполнения).",
              "type": "object",
              "readOnly": true,
              "allOf": [
                  {
                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                  }
              ],
              "properties": {
                  "attributeRusName": {
                      "description": "Русскоязычное наименование атрибута в каталоге\n\nМожет быть выбрано одно из альтернативных наименований атрибута, иначе - используется значение по умолчанию",
                      "type": "string"
                  },
                  "attributeEnName": {
                      "description": "Англоязычное наименование атрибута в каталоге\n\nМожет быть выбрано одно из альтернативных наименований атрибута, иначе - используется значение по умолчанию",
                      "type": "string"
                  }
              },
              "required": [
                  "attributeRusName",
                  "attributeEnName"
              ]
          },
          "CommonSearchIndexInfo": {
              "description": "Общая информация о поисковом индексе в списке поисковых индексов",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор поискового индекса",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "name": {
                      "description": "Наименование поискового индекса",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "SearchIndexListItem": {
              "description": "Информация о поисковом индексе в списке поисковых индексов",
              "type": "object",
              "readOnly": true,
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonSearchIndexInfo"
                  }
              ],
              "properties": {
                  "techName": {
                      "description": "Техническое наименование поискового индекса (латиница)",
                      "type": "string"
                  },
                  "description": {
                      "description": "русскоязычное описание поискового индекса",
                      "type": "string"
                  },
                  "dictName": {
                      "description": "Наименование справочника, по которому настроен индекс",
                      "type": "string"
                  },
                  "dictColumnName": {
                      "description": "Наименование столбца справочника, по которому настроен индекс",
                      "type": "string"
                  },
                  "status": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/SearchIndexStatus"
                          }
                      ]
                  }
              },
              "required": [
                  "techName",
                  "dictName",
                  "dictColumnName",
                  "status"
              ]
          },
          "SearchIndexStatusTagIdEnum": {
              "description": "Статус поискового индекса:\n  - `waitWork` - ожидает обработки\n  - `inWork` - в обработке\n  - `done` - актуален\n  - `errorBuild` - ошибка построения\n  - `errorsUpdate` - ошибки обновления",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "waitWork",
                          "inWork",
                          "done",
                          "errorBuild",
                          "errorsUpdate"
                      ]
                  }
              ]
          },
          "SearchIndexStatusNameEnum": {
              "description": "Наименование статуса поискового индекса",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "SearchIndexStatus": {
              "description": "Статус поискового индекса",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор статуса поискового индекса",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "$ref": "#/components/schemas/SearchIndexStatusNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/SearchIndexStatusTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ]
          },
          "SearchIndex": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonSearchIndexInfo"
                  }
              ],
              "description": "Поисковый индекс",
              "type": "object",
              "properties": {
                  "techName": {
                      "description": "Техническое наименование поискового индекса (латиница)",
                      "type": "string"
                  },
                  "description": {
                      "description": "Описание поискового индекса",
                      "type": "string"
                  },
                  "dictId": {
                      "description": "Идентификатор справочника, по которому настроен индекс",
                      "type": "integer",
                      "format": "int32",
                      "writeOnly": true
                  },
                  "dictionary": {
                      "description": "Информация о справочнике, по которому настроен индекс",
                      "allOf": [
                          {
                              "$ref": "dictionaries.yaml#/components/schemas/CommonDictionaryInfo"
                          }
                      ],
                      "readOnly": true
                  },
                  "dictColTechName": {
                      "description": "Наименование столбца справочника, по которому настроен индекс",
                      "type": "string",
                      "writeOnly": true
                  },
                  "dictColumn": {
                      "description": "Информация о столбце справочника, по которому настроен индекс",
                      "allOf": [
                          {
                              "$ref": "dictionaries.yaml#/components/schemas/DictionaryColumn"
                          }
                      ],
                      "readOnly": true
                  },
                  "status": {
                      "readOnly": true,
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/SearchIndexStatus"
                          }
                      ]
                  },
                  "statusTag": {
                      "description": "Техническое наименование статуса поискового индекса",
                      "readOnly": true,
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/SearchIndexStatusTagIdEnum"
                          }
                      ]
                  }
              },
              "required": [
                  "techName",
                  "description",
                  "dictId",
                  "dictionary",
                  "dictColTechName",
                  "dictColumn",
                  "status",
                  "statusTag"
              ]
          },
          "SearchIndexDictionaryInfo": {
              "description": "Общая информация о справочнике, в котором используется поисковый индекс.",
              "$ref": "dictionaries.yaml#/components/schemas/CommonDictionaryInfo"
          },
          "ObjectCategory": {
              "description": "Категория объектов",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор категории объектов",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "rusName": {
                      "description": "Русскоязычное наименование категории объектов, должно быть уникальным",
                      "type": "string"
                  },
                  "enName": {
                      "description": "Англоязычное наименование категории объектов",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "rusName"
              ]
          },
          "ObjectCategoryCatalogInfo": {
              "description": "Информация о каталоге, в котором используется категория объектов.",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "catalogId": {
                      "description": "Идентификатор каталога",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalogName": {
                      "description": "Наименование каталога",
                      "type": "string"
                  },
                  "isCatalogDeleted": {
                      "description": "Удален ли каталог",
                      "type": "boolean"
                  }
              },
              "required": [
                  "catalogId",
                  "catalogName",
                  "isCatalogDeleted"
              ]
          },
          "CommonDictionaryInfo": {
              "type": "object",
              "description": "Общая информация о справочнике",
              "properties": {
                  "id": {
                      "description": "Идентификатор справочника",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "name": {
                      "description": "Наименование справочника",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "DictionaryListItem": {
              "description": "Информация о справочнике в списке справочников",
              "type": "object",
              "readOnly": true,
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonDictionaryInfo"
                  }
              ],
              "properties": {
                  "elementsCount": {
                      "description": "Количество элементов справочника",
                      "type": "integer"
                  },
                  "isDictFromCatalog": {
                      "description": "Основан ли справочник на каталоге",
                      "type": "boolean",
                      "default": false
                  }
              },
              "required": [
                  "elementsCount"
              ],
              "example": {
                  "id": 58,
                  "name": "Актуальные адреса БТИ",
                  "elementsCount": 500
              }
          },
          "DictionaryColumn": {
              "description": "Столбец списка элементов справочников.\nДополнительный столбец справочника.",
              "type": "object",
              "properties": {
                  "techName": {
                      "description": "Техническое название столбца определенного формата.\nНазвание может содержать английские буквы, цифры и символы нижнего подчеркивания _. Должно начинаться с буквы",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/TechNameFormat"
                          }
                      ]
                  },
                  "rusName": {
                      "description": "Русскоязычное название столбца",
                      "type": "string"
                  }
              },
              "required": [
                  "techName",
                  "rusName"
              ]
          },
          "RegularDictionary": {
              "description": "Справочник, созданный вручную",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonDictionaryInfo"
                  }
              ],
              "properties": {
                  "parentDictionaryId": {
                      "description": "Идентификатор справочника-родителя. Указывается только при создании нового справочника.",
                      "type": "integer",
                      "format": "int32",
                      "writeOnly": true
                  },
                  "parentDictionary": {
                      "description": "Справочник-родитель",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/CommonDictionaryInfo"
                          }
                      ],
                      "readOnly": true
                  },
                  "additionalColumns": {
                      "description": "Дополнительные столбцы справочника",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/DictionaryColumn"
                      }
                  }
              },
              "example": {
                  "name": "Справочник сотрудников",
                  "parentDictionary": {
                      "id": 74,
                      "name": "Справочник компаний"
                  },
                  "additionalColumns": [
                      {
                          "rusName": "Профессия",
                          "techName": "Profession"
                      },
                      {
                          "rusName": "Возраст",
                          "techName": "Age"
                      }
                  ]
              }
          },
          "DictionaryFromCatalog": {
              "description": "Справочник, созданный на основе каталога",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonDictionaryInfo"
                  }
              ],
              "properties": {
                  "parentDictionaryId": {
                      "description": "Идентификатор справочника-родителя. Указывается только при создании нового справочника.",
                      "type": "integer",
                      "format": "int32",
                      "writeOnly": true
                  },
                  "parentDictionary": {
                      "description": "Справочник-родитель",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/CommonDictionaryInfo"
                          }
                      ],
                      "readOnly": true
                  },
                  "catalogId": {
                      "description": "Идентификатор связанного каталога",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalogName": {
                      "description": "Наименование связанного каталога",
                      "type": "string",
                      "readOnly": true
                  },
                  "catalogNameFieldId": {
                      "description": "Идентификатор атрибута (attrId), из которого берутся значения для поля \"Наименование\" элементов справочника.",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalogNameFieldName": {
                      "description": "Наименование атрибута каталога, из которого берутся значения для поля \"Наименование\" элементов справочника.",
                      "type": "string",
                      "readOnly": true
                  },
                  "globalCatalogFieldId": {
                      "description": "Идентификатор атрибута, из которого берутся значения для идентификаторов элементов справочника\n\nДоступные значения -  global_id (-1), system_object_id (-2).",
                      "type": "integer",
                      "format": "int32",
                      "enum": [
                          -1,
                          -2
                      ]
                  },
                  "globalCatalogFieldName": {
                      "description": "Наименование атрибута каталога, из которого берутся значения для идентификаторов элементов справочника",
                      "type": "string",
                      "readOnly": true,
                      "enum": [
                          "global_id",
                          "system_object_id"
                      ]
                  },
                  "parentCatalogFieldId": {
                      "description": "Идентификатор атрибута (attrId), из которого берутся значения для идентификаторов родительских элементов справочника.\nУказывается, если у данного справочника есть справочник-родитель.",
                      "type": "integer",
                      "format": "int32"
                  },
                  "parentCatalogField": {
                      "description": "Наименование атрибута каталога, из которого берутся значения для идентификаторов родительских элементов справочника",
                      "type": "string",
                      "readOnly": true
                  },
                  "condition": {
                      "description": "Условие ограничения выборки в формате TOML",
                      "type": "string"
                  }
              },
              "required": [
                  "catalogId",
                  "catalogName",
                  "catalogNameFieldId",
                  "catalogNameFieldName",
                  "globalCatalogFieldId",
                  "globalCatalogFieldName"
              ]
          },
          "Dictionary": {
              "type": "object",
              "description": "Справочник",
              "oneOf": [
                  {
                      "$ref": "#/components/schemas/RegularDictionary"
                  },
                  {
                      "$ref": "#/components/schemas/DictionaryFromCatalog"
                  }
              ]
          },
          "ConditionValidationError": {
              "type": "object",
              "properties": {
                  "code": {
                      "description": "HTTP-код ошибки",
                      "type": "integer",
                      "format": "int32",
                      "example": 400
                  },
                  "messageType": {
                      "description": "Тип ответа",
                      "type": "string",
                      "example": "Bad request"
                  },
                  "errors": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "Недопустимое выражение '{expression}'.",
                              "Найдено {symbol/expression}. Ожидалось {symbol/expression}.",
                              "В каталоге отсутсвует указанный атрибут attr.{techName}.",
                              "Указано значение с некорректным типом данных. Ожидалось {type}.",
                              "Передан некорректный набор входных параметров в {operator}.",
                              "Не найден справочник с идентификатором {dictId}.",
                              "Не найден элемент справочника {elementId} в справочнике {dictId}.",
                              "Атрибут с типом {type} недоступен для оператора {operator}.",
                              "Не найден каталог с идентификатором {catalogId}.",
                              "Не найдено регулярное выражение с идентификатором {regexpId}.",
                              "В справочнике отсутсвует указанный атрибут attr.{dictTechName}.{columnTechName}/dictAttr.{techName}"
                          ]
                      }
                  }
              },
              "required": [
                  "code",
                  "messageType",
                  "errors"
              ]
          },
          "DictionaryAttrubuteInfo": {
              "description": "Информация об атрибуте, в котором используется справочник. ",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "id": {
                      "description": "Идентификатор атрибута ЕХД",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "description": "Русскоязычное наименование атрибута",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "DictionarySearchIndexInfo": {
              "description": "Информация о поисковом индексе, в котором используется справочник.",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "searchIndexes.yaml#/components/schemas/CommonSearchIndexInfo"
                  }
              ],
              "properties": {
                  "dictColumnName": {
                      "description": "Русскоязычное название столбца справочника, по которому настроен поисковый индекс",
                      "type": "string"
                  },
                  "dictColumnTechName": {
                      "description": "Техническое название столбца справочника, по которому настроен поисковый индекс",
                      "type": "string"
                  }
              },
              "required": [
                  "dictColumnName",
                  "dictColumnTechName"
              ]
          },
          "FilterOperatorAuxDictElement": {
              "description": "Элемент системного справочника с операторами для фильтрации",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "id": {
                      "description": "Идентификатор оператора в БД",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "$ref": "_common.yaml#/components/schemas/FilterOperatorNameEnum"
                  },
                  "tagId": {
                      "$ref": "_common.yaml#/components/schemas/FilterOperatorTagIdEnum"
                  },
                  "dataTypes": {
                      "description": "Технические названия типов данных, к которым применим оператор",
                      "type": "array",
                      "items": {
                          "$ref": "attributes.yaml#/components/schemas/AttributeTypeTagIdEnum"
                      }
                  },
                  "filterType": {
                      "description": "Тип фильтра:\n  - basic - базовый фильтр (используется во всех таблицах с фильтрами по столбцам)\n  - object - фильтр для спсика объектов каталога",
                      "type": "string",
                      "enum": [
                          "basic",
                          "object"
                      ]
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId",
                  "dataTypes",
                  "filterType"
              ]
          },
          "SysColumn": {
              "description": "Системный столбец",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "id": {
                      "description": "Идентификатор записи, для системных поле отрицательный",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "description": "Название столбца в интерфейсе",
                      "type": "string"
                  },
                  "dataType": {
                      "description": "Техническое название типа данных, который используется для значений столбца",
                      "type": "string"
                  },
                  "objFieldName": {
                      "description": "Техническое название столбца. Используется в качетсве ключа полей в JSON",
                      "type": "string"
                  },
                  "displayFlag": {
                      "description": "Признак отображения столбца в интерфейсе для списка объектов\n  - 0 - не отображается\n  - 1 - заполнение\n  - 2 - публикация\n  - 3 - заполнение и публикация",
                      "type": "integer",
                      "format": "int32",
                      "enum": [
                          0,
                          1,
                          2,
                          3
                      ]
                  },
                  "forNested": {
                      "description": "Признак отображения для корневого или вложенного объекта\n  - 1 - корневой объект\n  - 2 - вложенный объект\n  - 3 - корневой и вложенный",
                      "type": "integer",
                      "format": "int32",
                      "enum": [
                          1,
                          2,
                          3
                      ]
                  },
                  "forPublSettings": {
                      "description": "Признак использования в настройках публикации КП:\n  - 0 - не используется\n  - 1 - используется\n  - 2 - используется (всегда видимый, для таких столбцов нельзя изменить настройку видимости в КП)",
                      "type": "integer",
                      "format": "int32",
                      "enum": [
                          0,
                          1,
                          2
                      ]
                  },
                  "objCardFlag": {
                      "description": "Признак использования поля для карточки объекта\n  - 0 - не используется\n  - 1 - заполнение\n  - 2 - публикация\n  - 3 - заполнение и публикация",
                      "type": "integer",
                      "format": "int32",
                      "enum": [
                          0,
                          1,
                          2,
                          3
                      ]
                  },
                  "norder": {
                      "description": "Порядок сортировки",
                      "type": "integer"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "dataType",
                  "objFieldName",
                  "displayFlag",
                  "forNested",
                  "forPublSettings",
                  "objCardFlag",
                  "norder"
              ]
          },
          "UpdatePeriodicityAuxDictElement": {
              "description": "Схема элемента для вспомогательного справочника \"Периодичность обновления\"",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "tagId": {
                      "$ref": "catalogs.yaml#/components/schemas/CatalogPeriodUpdateTagIdEnum"
                  },
                  "name": {
                      "$ref": "catalogs.yaml#/components/schemas/CatalogPeriodUpdateNameEnum"
                  },
                  "isGeneral": {
                      "description": "Признак, что период явлется общим для выбора в рамках обновления каталога и фоновых процессах",
                      "type": "boolean"
                  },
                  "forPubl": {
                      "description": "Признак того, что периодичность распространяется на каталоги публикации",
                      "type": "boolean"
                  }
              },
              "required": [
                  "tagId",
                  "name",
                  "isGeneral",
                  "forPubl"
              ],
              "example": {
                  "tagId": "minutely",
                  "name": "Ежеминутно",
                  "isGeneral": false,
                  "forPubl": false
              }
          },
          "DictionaryElementStatus": {
              "description": "Статус элемента справочника",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор статуса",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "$ref": "#/components/schemas/DictionaryElementStatusNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/DictionaryElementStatusTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ],
              "example": {
                  "id": 1,
                  "name": "Активный",
                  "tagId": "active"
              }
          },
          "DictionaryElementStatusTagIdEnum": {
              "description": "Техническое название статуса элемента справочника:\n  - `active` - активный\n  - `deleted` - удаленный",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "active",
                          "deleted"
                      ]
                  }
              ]
          },
          "DictionaryElementStatusNameEnum": {
              "description": "Название статуса элемента справочника:\n  - активный\n  - удаленный",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "DictionaryElementListColumnTypeTagIdEnum": {
              "description": "Тип столбца списка элементов справочника, показывает, какой тип информации передается в столбце:\n  - `general` - общая информация\n  - `additional` - дополнительный столбец, добавленный пользователем вручную",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "general",
                          "additional"
                      ]
                  }
              ]
          },
          "DictionaryElementListColumn": {
              "description": "Столбец списка элементов справочника",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "name": {
                      "description": "Название столбца в списке",
                      "type": "string"
                  },
                  "techName": {
                      "description": "Техническое наименование столбца",
                      "type": "string"
                  },
                  "columnType": {
                      "$ref": "#/components/schemas/DictionaryElementListColumnTypeTagIdEnum"
                  },
                  "typeTag": {
                      "$ref": "attributes.yaml#/components/schemas/AttributeTypeTagIdEnum"
                  }
              },
              "required": [
                  "name",
                  "techName",
                  "columnType",
                  "typeTag"
              ]
          },
          "CommonDictionaryElementInfo": {
              "description": "Общая информация об элементе справочника",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string",
                      "description": "Идентификатор элемента справочника. Всегда имеет тип `string`.",
                      "readOnly": true
                  },
                  "name": {
                      "description": "Название элемента справочника на русском языке",
                      "type": "string"
                  },
                  "isElementDeleted": {
                      "description": "Удален ли элемент справочника",
                      "type": "boolean",
                      "readOnly": true
                  }
              },
              "required": [
                  "id",
                  "name",
                  "isElementDeleted"
              ]
          },
          "DictionaryElementListItem": {
              "description": "Информация об элементе справочника в списке элементов справочника",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonDictionaryElementInfo"
                  }
              ],
              "properties": {
                  "parentElementId": {
                      "description": "Идентификатор элемента-родителя из родительского справочника",
                      "type": "string"
                  },
                  "parentElementName": {
                      "description": "Наименование элемента-родителя из родительского справочника",
                      "type": "string"
                  },
                  "additionalFields": {
                      "description": "Значения дополнительных столбцов справочника.\n\n<*> - техническое наименование дополнительного столбца справочника.",
                      "type": "object",
                      "additionalProperties": {
                          "type": "string"
                      }
                  }
              }
          },
          "DictionaryElement": {
              "description": "Информация об элементе справочника в списке элементов справочника",
              "type": "object",
              "properties": {
                  "key": {
                      "description": "Идентификатор элемента справочника",
                      "type": "string"
                  },
                  "value": {
                      "description": "Название элемента справочника на русском языке",
                      "type": "string"
                  },
                  "value_en": {
                      "description": "Название элемента справочника на английском языке (при наличии)",
                      "type": "string"
                  },
                  "prnt_key": {
                      "description": "Идентификатор элемента родительского справочника (при наличии)",
                      "type": "string"
                  }
              },
              "required": [
                  "key",
                  "value"
              ]
          },
          "DictionaryElementsSearchFilter": {
              "description": "Фильтр по списку элементов справочника",
              "type": "object",
              "properties": {
                  "filters": {
                      "type": "array",
                      "items": {
                          "allOf": [
                              {
                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                              },
                              {
                                  "properties": {
                                      "attribute": {
                                          "enum": [
                                              "id",
                                              "name"
                                          ]
                                      }
                                  }
                              }
                          ]
                      }
                  }
              }
          },
          "ExportHistoryItem": {
              "description": "Элемент истории экспортов каталога",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "id": {
                      "description": "Идентификатор экспорта",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "description": "Наименование архива экспорта. Сервис формирует название экспорта на основе идентификатора каталога и даты старта. Формат названия описан в вики.",
                      "type": "string"
                  },
                  "dateStart": {
                      "description": "Дата и время запроса экспорта",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "dateEnd": {
                      "description": "Дата и время окончания экспорта",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "userName": {
                      "description": "ФИО пользователя, запустившего экспорт",
                      "type": "string"
                  },
                  "countAllObj": {
                      "type": "integer",
                      "description": "Общее количество объектов в экспорте"
                  },
                  "type": {
                      "$ref": "#/components/schemas/FillingExportTypeTagIdEnum"
                  },
                  "fileId": {
                      "type": "string",
                      "description": "Идентификатор (uuid) файла экспорта в файловом хранилище"
                  },
                  "status": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/ExportStatus"
                          }
                      ]
                  },
                  "hasSettings": {
                      "description": "Указывает на применение настроек к файлу экспорта.",
                      "type": "boolean"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "dateStart",
                  "userName",
                  "status",
                  "type",
                  "hasSettings"
              ]
          },
          "ExportStatus": {
              "description": "Статус экспорта",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "id": {
                      "type": "integer",
                      "description": "Идентификатор статуса"
                  },
                  "name": {
                      "$ref": "#/components/schemas/ExportStatusNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/ExportStatusTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ]
          },
          "ExportStatusNameEnum": {
              "description": "Название статуса экспорта",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "ExportStatusTagIdEnum": {
              "description": "Технчиеское навзание статуса экспорта\n  - `new` - Добавлен в очередь,\n  - `inWork` - В работе, \n  - `finished` - Экспорт завершен успешно, \n  - `error` - Ошибка экспорта, \n  - `cancelled` - Экспорт отменен пользователем.",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "new",
                          "inWork",
                          "finished",
                          "error",
                          "cancelled"
                      ]
                  }
              ]
          },
          "CommonOivInfo": {
              "description": "Общая информация об ОИВе",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор ОИВа",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "name": {
                      "description": "Наименование ОИВа",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "OivListItem": {
              "description": "Информация об ОИВе в списке ОИВов",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonOivInfo"
                  }
              ],
              "properties": {
                  "shortName": {
                      "description": "Краткое наименование ОИВа",
                      "type": "string"
                  },
                  "inn": {
                      "description": "ИНН ОИВа",
                      "type": "integer"
                  },
                  "childrenIds": {
                      "description": "Индентификаторы дочерних ОИВов",
                      "type": "array",
                      "items": {
                          "type": "integer"
                      }
                  },
                  "countCatalogs": {
                      "description": "Количество каталогов ОИВа",
                      "type": "integer"
                  }
              },
              "required": [
                  "shortName"
              ]
          },
          "Oiv": {
              "description": "ОИВ",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonOivInfo"
                  }
              ],
              "properties": {
                  "shortName": {
                      "description": "Краткое наименование ОИВа",
                      "type": "string"
                  },
                  "enName": {
                      "description": "Англоязычное наименование ОИВа",
                      "type": "string"
                  },
                  "inn": {
                      "description": "ИНН ОИВа",
                      "type": "integer",
                      "format": "int32"
                  },
                  "parentOivId": {
                      "description": "Идентификатор родительского ОИВа",
                      "type": "integer",
                      "format": "int32",
                      "writeOnly": true
                  },
                  "parentOiv": {
                      "description": "Родительский ОИВ",
                      "type": "object",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/CommonOivInfo"
                          }
                      ],
                      "readOnly": true
                  }
              },
              "required": [
                  "shortName",
                  "enName"
              ]
          },
          "OivCatalogListItem": {
              "description": "Элемент списка каталогов, связанных с ОИВ",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                  }
              ],
              "properties": {
                  "objectCategories": {
                      "description": "Категории объектов каталога, перечисленные через запятую с пробелом",
                      "type": "string"
                  },
                  "thematicCategory": {
                      "description": "Тематическая категория каталога",
                      "type": "string"
                  },
                  "oivs": {
                      "description": "ОИВ, ответственные за наполнение каталога, перечисленные через запятую с пробелом",
                      "type": "string"
                  }
              },
              "required": [
                  "objectCategories",
                  "thematicCategory",
                  "oivs"
              ]
          },
          "OivUserInfo": {
              "description": "Информация пользователе ОИВ",
              "type": "object",
              "readOnly": true,
              "allOf": [
                  {
                      "$ref": "users.yaml#/components/schemas/CommonUserInfo"
                  }
              ]
          },
          "CommonRegularExpressionInfo": {
              "description": "Общая информация регулярного выражения",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор регулярного выражения",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "name": {
                      "description": "Название регулярного выражения",
                      "type": "string"
                  },
                  "value": {
                      "description": "Регулярное выражение",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "value"
              ]
          },
          "RegularExpression": {
              "description": "Регулярное выражение",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "regexps.yaml#/components/schemas/CommonRegularExpressionInfo"
                  }
              ],
              "properties": {
                  "description": {
                      "description": "Описание регулярного выражения",
                      "type": "string"
                  }
              },
              "required": [
                  "description"
              ],
              "example": {
                  "id": 2,
                  "name": "Только числа",
                  "value": "^([0-9]+)$",
                  "description": "Регулярное выражение принимает только числа"
              }
          },
          "RegularExpressionAttributeInfo": {
              "description": "Элемент списка атрибутов и каталогов, которые используют указанное регулярное выражение",
              "type": "object",
              "properties": {
                  "catalogId": {
                      "description": "Идентификатор каталога, в котором используется данный атрибут",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalogName": {
                      "description": "Название каталога, в котором используется данный атрибут",
                      "type": "string"
                  },
                  "attributeId": {
                      "description": "Идентификатор атрибута ЕХД",
                      "type": "integer",
                      "format": "int32"
                  },
                  "attributeName": {
                      "description": "Название атрибута",
                      "type": "string"
                  }
              },
              "required": [
                  "catalogId",
                  "catalogName",
                  "attributeId",
                  "attributeName"
              ]
          },
          "NEWRegularExpressionAttributeInfo": {
              "description": "Информация об атрибуте, в котором используется регулярное выражение",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор атрибута ЕХД",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "description": "Русскоязычное наименование атрибута",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "GeoType": {
              "description": "Тип геометрии",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор типа геометрии",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "description": "Название типа геометрии",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "GeojsonGeoTypeTagIdEnum": {
              "description": "Типы геометрии в geojson",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "Point",
                          "MultiPoint",
                          "MultiLineString",
                          "MultiPolygon"
                      ]
                  }
              ]
          },
          "GeojsonGeoPublTypeTagIdEnum": {
              "description": "Типы геометрии в geojson",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "Point",
                          "MultiPoint",
                          "MultiLineString",
                          "MultiPolygon",
                          "Polygon"
                      ]
                  }
              ]
          },
          "SpatialReferenceSystemEnum": {
              "description": "Система координат (пространственная система отсчёта - spatial reference system)",
              "type": "string",
              "enum": [
                  "EPSG:4326",
                  "MSK:77"
              ]
          },
          "Point": {
              "description": "Точка",
              "type": "array",
              "items": {
                  "type": "number"
              },
              "minItems": 2,
              "maxItems": 2
          },
          "MultiPoint": {
              "description": "Мультиточка",
              "type": "array",
              "items": {
                  "$ref": "#/components/schemas/Point"
              },
              "minItems": 1
          },
          "MultiLineString": {
              "description": "Мультилиния",
              "type": "array",
              "items": {
                  "$ref": "#/components/schemas/MultiPoint"
              },
              "minItems": 1
          },
          "Polygon": {
              "description": "Полигон (необходим для обратной совместимости мигрированных объектов каталога публикации из ЕХД1)",
              "type": "array",
              "items": {
                  "$ref": "#/components/schemas/MultiPoint"
              },
              "minItems": 1
          },
          "MultiPolygon": {
              "description": "Полигон",
              "type": "array",
              "items": {
                  "$ref": "#/components/schemas/MultiLineString"
              },
              "minItems": 1
          },
          "ObjectGeodata": {
              "description": "Геоданные объекта в формате GeoJSON.",
              "type": "object",
              "properties": {
                  "type": {
                      "description": "Тип объекта GeoJSON. Всегда принимает значение Feature.",
                      "type": "string",
                      "enum": [
                          "Feature"
                      ]
                  },
                  "properties": {
                      "description": "Дополнительные свойства для геоданных объекта",
                      "type": "object",
                      "properties": {
                          "srs": {
                              "description": "Система координат (пространственная система отсчёта - spatial reference system)\".\nПо-умолчанию устанавливается СК, выбранная на каталоге.",
                              "type": "string",
                              "enum": [
                                  "EPSG:4326",
                                  "MSK:77"
                              ]
                          },
                          "isManualInput": {
                              "description": "Признак, указывающий, что геоданные должны быть заполнены вручную, а не процессом блока \"На карту\" (при условии, что настройки блока позволяют ручной ввод)",
                              "type": "boolean",
                              "default": false
                          }
                      },
                      "required": [
                          "srs",
                          "isManualInput"
                      ]
                  },
                  "geometry": {
                      "description": "Описание геометрии объекта",
                      "type": "object",
                      "properties": {
                          "type": {
                              "description": "Тип геометрии объекта. Всегда принимает значение GeometryCollection.",
                              "type": "string",
                              "enum": [
                                  "GeometryCollection"
                              ]
                          },
                          "geometries": {
                              "description": "Массив типов геометрии и их координат, которые заполнены для объекта.",
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "properties": {
                                      "coordinates": {
                                          "description": "Массив координат",
                                          "oneOf": [
                                              {
                                                  "$ref": "geodata.yaml#/components/schemas/Point"
                                              },
                                              {
                                                  "$ref": "geodata.yaml#/components/schemas/MultiPoint"
                                              },
                                              {
                                                  "$ref": "geodata.yaml#/components/schemas/MultiLineString"
                                              },
                                              {
                                                  "$ref": "geodata.yaml#/components/schemas/MultiPolygon"
                                              }
                                          ]
                                      },
                                      "type": {
                                          "$ref": "geodata.yaml#/components/schemas/GeojsonGeoTypeTagIdEnum"
                                      }
                                  },
                                  "required": [
                                      "coordinates",
                                      "type"
                                  ]
                              }
                          }
                      },
                      "required": [
                          "type",
                          "geometries"
                      ]
                  }
              },
              "required": [
                  "type",
                  "geometry"
              ]
          },
          "PublicationObjectGeodata": {
              "description": "Геоданные объекта каталога публикации в формате GeoJSON.",
              "type": "object",
              "properties": {
                  "type": {
                      "description": "Тип объекта GeoJSON. Всегда принимает значение Feature.",
                      "type": "string",
                      "enum": [
                          "Feature"
                      ]
                  },
                  "properties": {
                      "description": "Дополнительные свойства для геоданных объекта",
                      "type": "object",
                      "properties": {
                          "srs": {
                              "description": "Система координат (пространственная система отсчёта - spatial reference system)\".\nПо-умолчанию устанавливается СК, выбранная на каталоге.",
                              "type": "string",
                              "enum": [
                                  "EPSG:4326",
                                  "MSK:77"
                              ]
                          },
                          "isManualInput": {
                              "description": "Признак, указывающий, что геоданные должны быть заполнены вручную, а не процессом блока \"На карту\" (при условии, что настройки блока позволяют ручной ввод)",
                              "type": "boolean",
                              "default": false
                          }
                      },
                      "required": [
                          "srs",
                          "isManualInput"
                      ]
                  },
                  "geometry": {
                      "description": "Описание геометрии объекта",
                      "type": "object",
                      "properties": {
                          "type": {
                              "description": "Тип геометрии объекта. Всегда принимает значение GeometryCollection.",
                              "type": "string",
                              "enum": [
                                  "GeometryCollection"
                              ]
                          },
                          "geometries": {
                              "description": "Массив типов геометрии и их координат, которые заполнены для объекта.",
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "properties": {
                                      "coordinates": {
                                          "description": "Массив координат",
                                          "oneOf": [
                                              {
                                                  "$ref": "geodata.yaml#/components/schemas/Point"
                                              },
                                              {
                                                  "$ref": "geodata.yaml#/components/schemas/MultiPoint"
                                              },
                                              {
                                                  "$ref": "geodata.yaml#/components/schemas/MultiLineString"
                                              },
                                              {
                                                  "$ref": "geodata.yaml#/components/schemas/MultiPolygon"
                                              },
                                              {
                                                  "$ref": "geodata.yaml#/components/schemas/Polygon"
                                              }
                                          ]
                                      },
                                      "type": {
                                          "$ref": "geodata.yaml#/components/schemas/GeojsonGeoPublTypeTagIdEnum"
                                      }
                                  },
                                  "required": [
                                      "coordinates",
                                      "type"
                                  ]
                              }
                          }
                      },
                      "required": [
                          "type",
                          "geometries"
                      ]
                  }
              },
              "required": [
                  "type",
                  "geometry"
              ]
          },
          "ValidateResponse": {
              "description": "Схема ответа первичной валидации геоданных",
              "type": "object",
              "properties": {
                  "isValid": {
                      "description": "Признак, обозначающий результат валидации геоданных",
                      "type": "boolean"
                  },
                  "details": {
                      "description": "Массив причин почему геоданные невалидны. Если геоданные валидны, то передаётся пустой массив",
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "typeGeo": {
                                  "description": "Тип геоданных, координаты которого являются невалидными",
                                  "$ref": "#/components/schemas/GeojsonGeoTypeTagIdEnum"
                              },
                              "reason": {
                                  "description": "Причина невалидности геоданных. Указывается строка, которую вернула функция ST_IsValidDetail",
                                  "type": "string"
                              },
                              "location": {
                                  "description": "Местоположение (точка), в которой геоданные являются невалидными.",
                                  "allOf": [
                                      {
                                          "$ref": "#/components/schemas/Point"
                                      }
                                  ]
                              }
                          },
                          "required": [
                              "typeGeo",
                              "reason"
                          ]
                      }
                  }
              },
              "required": [
                  "isValid",
                  "details"
              ]
          },
          "FeatureCollectionObjectGeodata": {
              "type": "object",
              "properties": {
                  "type": {
                      "type": "string",
                      "enum": [
                          "FeatureCollection"
                      ]
                  },
                  "name": {
                      "type": "string"
                  },
                  "features": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/ObjectGeodata"
                      }
                  }
              }
          },
          "PublicationCatalogStatusTagIdEnum": {
              "description": "Статус публикации каталога публикации:\n  - `unpublished` - не опубликован\n  - `manualPublication` - публикуется вручную\n  - `autoPublication` - публикуется автоматически\n  - `archive` - архивный",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "unpublished",
                          "manualPublication",
                          "autoPublication",
                          "archive"
                      ]
                  }
              ]
          },
          "PublicationCatalogStatusNameEnum": {
              "description": "Наименование статуса публикации каталога публикации",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "GeneralInfoSyncedPropertyTagIdEnum": {
              "description": "Техническое наименование поля общей информации каталога заполнения, которое синхронизируется с каталогом публикации:\n  - `accountingObject` - объект учета\n  - `thematicCategoryId` - тематическая категория\n  - `periodUpdate` - периодичность обновления\n  - `kindCatalogId` - вид каталога\n  - `typeCatalogId` - тип каталога\n  - `oivsIds` - поставщики информации\n  - `keywords` - ключевые слова",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "accountingObject",
                          "thematicCategoryId",
                          "periodUpdate",
                          "kindCatalogId",
                          "typeCatalogId",
                          "oivsIds",
                          "keywords"
                      ]
                  }
              ]
          },
          "GeneralInfoSyncedPropertyNameEnum": {
              "description": "Наименование поля общей информации каталога заполнения, которое синхронизируется с каталогом публикации",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "MetadataSyncedPropertyTagIdEnum": {
              "description": "Техническое наименование поля метаданных каталога заполнения, которое синхронизируется с каталогом публикации:\n  - `respPersonFIO` - ФИО ответсвенного\n  - `respPersonEmail` - Email ответственного\n  - `respPersonPhone` - телефон ответственного\n  - `description` - описание каталога",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "respPersonFIO",
                          "respPersonEmail",
                          "respPersonPhone",
                          "description"
                      ]
                  }
              ]
          },
          "MetadataSyncedPropertyNameEnum": {
              "description": "Наименование поля метаданных каталога заполнения, которое синхронизируется с каталогом публикации",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "MapSyncedPropertyTagIdEnum": {
              "description": "Техническое наименование поля карты каталога заполнения, которое синхронизируется с каталогом публикации:\n  - `hasGeo` - Наличие геопривязки\n  - `typeGeoTagIds` - Тип геометрии",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "hasGeo",
                          "typeGeoTagIds"
                      ]
                  }
              ]
          },
          "PublicationCatalogReleasePeriodicityNameEnum": {
              "description": "Название периодичности формирования релизов каталога публикации",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "PublicationCatalogReleasePeriodicityTagIdEnum": {
              "description": "Техническое название периодичности формирования релизов каталога публикации",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "daily",
                          "weekly",
                          "monthly",
                          "quarterly",
                          "yearly",
                          "numDays",
                          "calendarDays",
                          "multiple",
                          "withChanges"
                      ]
                  }
              ]
          },
          "GeneralInfoSyncedProperty": {
              "description": "Поле общей информации каталога заполнения, которое синхронизируется с каталогом публикации",
              "type": "object",
              "properties": {
                  "tagId": {
                      "$ref": "#/components/schemas/GeneralInfoSyncedPropertyTagIdEnum"
                  },
                  "name": {
                      "$ref": "#/components/schemas/GeneralInfoSyncedPropertyNameEnum"
                  }
              },
              "required": [
                  "tagId",
                  "name"
              ]
          },
          "MetadataSyncedProperty": {
              "description": "Поле метаданных каталога заполнения, которое синхронизируется с каталогом публикации",
              "type": "object",
              "properties": {
                  "tagId": {
                      "$ref": "#/components/schemas/MetadataSyncedPropertyTagIdEnum"
                  },
                  "name": {
                      "$ref": "#/components/schemas/MetadataSyncedPropertyNameEnum"
                  }
              },
              "required": [
                  "tagId",
                  "name"
              ]
          },
          "MapSyncedProperty": {
              "description": "Поле метаданных каталога заполнения, которое синхронизируется с каталогом публикации",
              "type": "object",
              "properties": {
                  "tagId": {
                      "$ref": "#/components/schemas/MapSyncedPropertyTagIdEnum"
                  },
                  "name": {
                      "description": "Наименование поля настройки карты каталога заполнения, которое синхронизируется с каталогом публикации.\nВозможны следующие значения:\n  - hasGeo - Наличие геопривязки\n  - typeGeoTagIds - Тип геометрии",
                      "type": "string"
                  }
              },
              "required": [
                  "tagId",
                  "name"
              ]
          },
          "PublicationCatalogPriority": {
              "description": "Приоритет публикации каталога",
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 11
          },
          "PublicationCatalogStatus": {
              "description": "Cтатус публикации каталога публикации",
              "type": "object",
              "properties": {
                  "tagId": {
                      "$ref": "#/components/schemas/PublicationCatalogStatusTagIdEnum"
                  },
                  "name": {
                      "$ref": "#/components/schemas/PublicationCatalogStatusNameEnum"
                  }
              },
              "required": [
                  "tagId",
                  "name"
              ]
          },
          "CommonPublicationCatalogInfo": {
              "description": "Общая информация о каталоге публикации",
              "type": "object",
              "properties": {
                  "publicationStatus": {
                      "$ref": "#/components/schemas/PublicationCatalogStatusTagIdEnum"
                  },
                  "periodUpdate": {
                      "$ref": "#/components/schemas/PublicationCatalogReleasePeriodicityNameEnum"
                  },
                  "dateNextUpdate": {
                      "description": "Рассчитанная дата следующей публикации каталога, вычисленной на основе даты последней публикации и периодичности формирования релизов.\nФормат даты: DD.MM.YYYY"
                  }
              },
              "required": [
                  "publicationStatus",
                  "periodUpdate",
                  "dataNextUpdate"
              ]
          },
          "PublicationCatalogListItem": {
              "description": "Элемент списка каталогов публикации",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogListItem"
                  }
              ],
              "properties": {
                  "publicationStatus": {
                      "$ref": "#/components/schemas/PublicationCatalogStatusTagIdEnum"
                  },
                  "sourceCatalogId": {
                      "description": "Идентификатор каталога-источника",
                      "type": "integer"
                  },
                  "userPrivileges": {
                      "$ref": "users.yaml#/components/schemas/UserPrivilegePubl"
                  }
              },
              "required": [
                  "publicationStatus",
                  "sourceCatalogId",
                  "userPrivileges"
              ]
          },
          "PublicationCatalogUpdatePeriodicity": {
              "description": "Периодичность формирования релизов каталога публикации",
              "type": "object",
              "properties": {
                  "tagId": {
                      "$ref": "#/components/schemas/PublicationCatalogReleasePeriodicityTagIdEnum"
                  },
                  "name": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/PublicationCatalogReleasePeriodicityNameEnum"
                          }
                      ],
                      "readOnly": true
                  },
                  "numDays": {
                      "description": "Настройки периодичности \"Настраиваемая (произвольный срок)\". Обязателен, если tagId = numDays.",
                      "type": "integer"
                  },
                  "calendarDays": {
                      "description": "Настройки периодичности \"Настраиваемая (Календарные дни)\". Обязателен, если tagId = calendarDays.",
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "day": {
                                  "description": "День месяца в формате DD.MM",
                                  "type": "string",
                                  "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])$"
                              }
                          }
                      },
                      "minItems": 1
                  },
                  "isCheckLastDay": {
                      "description": "Дополнительное свойство для периодичности \"Ежемесячно\" - \"Обновлять не позднее последнего дня следующего месяца за месяцем последнего подписания\"",
                      "type": "boolean"
                  },
                  "multiple": {
                      "description": "Настройки периодичности \"Множественная периодичность\". Обязателен, если tagId = multiple.",
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "tagId": {
                                  "$ref": "#/components/schemas/PublicationCatalogReleasePeriodicityTagIdEnum"
                              },
                              "name": {
                                  "allOf": [
                                      {
                                          "$ref": "#/components/schemas/PublicationCatalogReleasePeriodicityNameEnum"
                                      }
                                  ],
                                  "readOnly": true
                              },
                              "dateStart": {
                                  "description": "Дата начала действия указанной периодичности. Используется формат DD.MM",
                                  "type": "string",
                                  "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])$"
                              },
                              "numDays": {
                                  "description": "Настройки периодичности \"Настраиваемая (произвольный срок)\". Обязателен, если tagId = numDays.",
                                  "type": "integer"
                              },
                              "calendarDays": {
                                  "description": "Настройки периодичности \"Настраиваемая (Календарные дни)\". Обязателен, если tagId = calendarDays.",
                                  "type": "array",
                                  "items": {
                                      "type": "object",
                                      "properties": {
                                          "day": {
                                              "description": "День месяца в формате DD.MM",
                                              "type": "string",
                                              "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])$"
                                          }
                                      }
                                  },
                                  "minItems": 1
                              },
                              "isCheckLastDay": {
                                  "description": "Дополнительное свойство для периодичности \"Ежемесячно\" - \"Обновлять не позднее последнего дня следующего месяца за месяцем последней публкиации\"",
                                  "type": "boolean"
                              }
                          },
                          "required": [
                              "tagId",
                              "name",
                              "dateStart"
                          ]
                      },
                      "minItems": 1
                  }
              },
              "required": [
                  "tagId",
                  "name"
              ]
          },
          "PublicationCatalogGeneralInfo": {
              "description": "Общая информация каталога публикации",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogGeneralInfo"
                  }
              ],
              "properties": {
                  "fillingCatalogId": {
                      "description": "Идентификатор каталога заполнения",
                      "type": "integer",
                      "format": "int32"
                  },
                  "identNumber": {
                      "description": "Идентификационный номер каталога публикации",
                      "type": "string"
                  },
                  "syncedProperties": {
                      "description": "Синхронизируемые параметры общей информации из каталога заполнения, которые автоматически обновляются в каталоге публикации",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/GeneralInfoSyncedProperty"
                      },
                      "readOnly": true
                  },
                  "syncedPropertiesTagIds": {
                      "description": "Технические названия синхронизируемых параметров общей информации из каталога заполнения, которые автоматически обновляются в каталоге публикации",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/GeneralInfoSyncedPropertyTagIdEnum"
                      },
                      "writeOnly": true
                  },
                  "defaultPriority": {
                      "description": "Приоритет публикации каталога по умолчанию",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/PublicationCatalogPriority"
                          }
                      ],
                      "default": 5
                  },
                  "periodUpdate": {
                      "$ref": "#/components/schemas/PublicationCatalogUpdatePeriodicity"
                  },
                  "hasEnglishVersion": {
                      "description": "Признак наличия английской версии у каталога.\nПо умолчанию каталог не имеет английской версии.\n\nЕсли имеет значение `true`, то поля `fullNameEn`, `shortNameEn`, `accountingObjectEn` и `keywordsEn` являются обязательными.",
                      "type": "boolean"
                  },
                  "fullNameEn": {
                      "description": "Полное наименование каталога на английском языке",
                      "type": "string",
                      "minLength": 1
                  },
                  "shortNameEn": {
                      "description": "Краткое наименование каталога на английском языке",
                      "type": "string",
                      "minLength": 1
                  },
                  "accountingObjectEn": {
                      "description": "Объект учёта каталога на английском языке",
                      "type": "string",
                      "minLength": 1
                  },
                  "keywordsEn": {
                      "description": "Ключевые слова каталога на английском языке",
                      "type": "string",
                      "minLength": 1
                  }
              },
              "required": [
                  "fillingCatalogId",
                  "syncedProperties",
                  "syncedPropertiesTagIds",
                  "defaultPriority",
                  "hasEnglishVersion"
              ]
          },
          "CommonPublicationCatalogAttribute": {
              "description": "Общая информация атрибута каталога публикации.",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogAttribute"
                  }
              ],
              "properties": {
                  "rown": {
                      "description": "Уникальный идентификатор атрибута каталога в БД публикации (используется в REST API публикации)",
                      "readOnly": true,
                      "type": "string"
                  },
                  "maxLength": {
                      "description": "Максимальная длина значения (используется в REST API публикации)\n\nДля всех типов кроме строки, целое число и дробное число возвращается 4000 по умолчанию",
                      "readOnly": true,
                      "type": "integer"
                  }
              },
              "required": [
                  "rown",
                  "maxLength"
              ]
          },
          "StringPublicationCatalogAttribute": {
              "description": "Строковый атрибут каталога публикации",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonPublicationCatalogAttribute"
                  }
              ]
          },
          "IntegerPublicationCatalogAttribute": {
              "description": "Целочисленный атрибут каталога публикации",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonPublicationCatalogAttribute"
                  }
              ]
          },
          "FloatPublicationCatalogAttribute": {
              "description": "Атрибут каталога публикации с типом дробное число",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonPublicationCatalogAttribute"
                  }
              ]
          },
          "DatePublicationCatalogAttribute": {
              "description": "Атрибут каталога публикации с типом дата (и время)",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonPublicationCatalogAttribute"
                  }
              ]
          },
          "FilePublicationCatalogAttribute": {
              "description": "Файловый атрибут каталога публикации",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonPublicationCatalogAttribute"
                  }
              ]
          },
          "BooleanPublicationCatalogAttribute": {
              "description": "Атрибут каталога публикации с типом флаг",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonPublicationCatalogAttribute"
                  }
              ]
          },
          "DictPublicationCatalogAttribute": {
              "description": "Справочный атрибут каталога публикации",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonPublicationCatalogAttribute"
                  },
                  {
                      "properties": {
                          "attribute": {
                              "$ref": "attributes.yaml#/components/schemas/DictionaryAttribute"
                          }
                      }
                  }
              ],
              "properties": {
                  "defaultColDictTechName": {
                      "description": "Столбец справочника, который будет отображаться в каталоге. По умолчанию поле \"Наименование\".",
                      "type": "string",
                      "writeOnly": true
                  },
                  "defaultColDict": {
                      "type": "object",
                      "description": "Столбец справочника, который будет отображаться в каталоге.",
                      "allOf": [
                          {
                              "$ref": "dictionaries.yaml#/components/schemas/DictionaryColumn"
                          }
                      ],
                      "readOnly": true
                  }
              },
              "required": [
                  "defaultColDictTechName",
                  "defaultColDict"
              ]
          },
          "LinkPublicationCatalogAttribute": {
              "description": "Ссылочный атрибут каталога публикации",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonPublicationCatalogAttribute"
                  }
              ],
              "properties": {
                  "refCatalog": {
                      "description": "Каталог публикации, на объекты которого ссылается объект",
                      "type": "object",
                      "readOnly": true,
                      "properties": {
                          "id": {
                              "description": "Идентификатор каталога",
                              "type": "integer"
                          },
                          "name": {
                              "description": "Полное наименование каталога",
                              "type": "string"
                          },
                          "mainAttrId": {
                              "description": "Идентификатор главного атрибута"
                          }
                      },
                      "required": [
                          "id",
                          "name",
                          "mainAttrId"
                      ]
                  },
                  "refCatalogId": {
                      "description": "Идентификатор каталога публикации, на объекты которого ссылается объект",
                      "type": "integer",
                      "writeOnly": true
                  }
              },
              "required": [
                  "refCatalog",
                  "refCatalogId"
              ]
          },
          "TablePublicationCatalogAttribute": {
              "description": "Табличный атрибут каталога публикации",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonPublicationCatalogAttribute"
                  }
              ],
              "properties": {
                  "childCatalogId": {
                      "description": "Идентификатор вложенного каталога, хранящего значения объектов табличного атрибута.\n\nПри создании передается отрицательный идентификатор, уникальный в пределах запроса.",
                      "type": "integer",
                      "format": "int32"
                  },
                  "attributes": {
                      "description": "Атрибутивный состав вложенного каталога (табличного атрибута)",
                      "type": "array",
                      "minItems": 1,
                      "items": {
                          "anyOf": [
                              {
                                  "$ref": "#/components/schemas/StringPublicationCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/IntegerPublicationCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/FloatPublicationCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/DatePublicationCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/FilePublicationCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/BooleanPublicationCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/DictPublicationCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/LinkPublicationCatalogAttribute"
                              },
                              {
                                  "$ref": "#/components/schemas/TablePublicationCatalogAttribute"
                              }
                          ]
                      }
                  }
              },
              "required": [
                  "childCatalogId",
                  "attributes"
              ]
          },
          "PublicationCatalogAttribute": {
              "description": "Атрибут каталога публикации",
              "type": "object",
              "oneOf": [
                  {
                      "$ref": "#/components/schemas/StringPublicationCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/IntegerPublicationCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/FloatPublicationCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/DatePublicationCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/FilePublicationCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/BooleanPublicationCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/DictPublicationCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/LinkPublicationCatalogAttribute"
                  },
                  {
                      "$ref": "#/components/schemas/TablePublicationCatalogAttribute"
                  }
              ]
          },
          "CommonAttributePublicationSettings": {
              "description": "Общие настройки публикации атрибута для систем",
              "type": "object",
              "properties": {
                  "attrId": {
                      "description": "Идентификатор атрибута",
                      "type": "integer",
                      "format": "int32"
                  },
                  "order": {
                      "description": "Порядковый номер атрибута для системы",
                      "type": "integer",
                      "format": "int32"
                  },
                  "isVisible": {
                      "description": "Является ли атрибут видимым для системы",
                      "type": "boolean"
                  },
                  "isMain": {
                      "description": "Является ли атрибут главным для системы",
                      "type": "boolean"
                  },
                  "systemAttributeId": {
                      "description": "Идентификатор системного атрибута, сопоставленного с атрибутом каталога",
                      "type": "integer",
                      "format": "int32"
                  },
                  "attributeGroupId": {
                      "description": "Идентификатор группы атрибутов, сопоставленной с атрибутом каталога",
                      "type": "integer",
                      "format": "int32"
                  },
                  "childCatalogId": {
                      "description": "Идентификатор вложенного каталога.\n\nПри создании передается отрицательный идентификатор, уникальный в пределах запроса, который совпадает в идентифкиатором, указанном в поле `attributes` для табличных атрибутов.\n\nУказывается только для табличных атрибутов.",
                      "type": "integer",
                      "format": "int32"
                  },
                  "attributes": {
                      "description": "Атрибуты, входящие в табличный атрибут",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CommonAttributePublicationSettings"
                      }
                  }
              },
              "required": [
                  "attrId",
                  "order",
                  "isVisible",
                  "isMain"
              ]
          },
          "AttributePublicationSettings": {
              "description": "Настройки публикации атрибута для системы",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonAttributePublicationSettings"
                  }
              ]
          },
          "OpodAttributePublicationSettings": {
              "description": "Настройки публикации атрибута для системы \"Портал открытых данных\"",
              "type": "object",
              "properties": {
                  "attrId": {
                      "description": "Идентификатор атрибута",
                      "type": "integer",
                      "format": "int32"
                  },
                  "order": {
                      "description": "Порядковый номер атрибута для системы",
                      "type": "integer",
                      "format": "int32"
                  },
                  "isVisible": {
                      "description": "Является ли атрибут видимым для системы",
                      "type": "boolean"
                  },
                  "isMain": {
                      "description": "Является ли атрибут главным для системы",
                      "type": "boolean"
                  },
                  "systemAttributeId": {
                      "description": "Идентификатор системного атрибута, сопоставленного с атрибутом каталога",
                      "type": "integer",
                      "format": "int32"
                  },
                  "attributeGroupId": {
                      "description": "Идентификатор группы атрибутов, сопоставленной с атрибутом каталога",
                      "type": "integer",
                      "format": "int32"
                  },
                  "isDefaultVisible": {
                      "description": "Является ли атрибут видимым по умолчанию на Портале открытых данных",
                      "type": "boolean"
                  },
                  "childCatalogId": {
                      "description": "Идентификатор вложенного каталога.\n\nПри создании передается отрицательный идентификатор, уникальный в пределах запроса, который совпадает в идентифкиатором, указанном в поле `attributes` для табличных атрибутов.\n\nУказывается только для табличных атрибутов.",
                      "type": "integer",
                      "format": "int32"
                  },
                  "attributes": {
                      "description": "Атрибуты, входящие в табличный атрибут",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/OpodAttributePublicationSettings"
                      }
                  }
              },
              "required": [
                  "attrId",
                  "order",
                  "isVisible",
                  "isMain",
                  "isDefaultVisible"
              ]
          },
          "CommonSystemPublicationSettings": {
              "description": "Общие настройки публикации для системы",
              "type": "object",
              "properties": {
                  "systemId": {
                      "description": "Идентификатор системы",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalogRusName": {
                      "description": "Русскоязычное полное наименование каталога для системы",
                      "type": "string"
                  },
                  "catalogEnName": {
                      "description": "Англоязычное полное наименование каталога для системы",
                      "type": "string"
                  },
                  "catalogRusShortName": {
                      "description": "Русскоязычное краткое наименование каталога для системы",
                      "type": "string"
                  },
                  "catalogEnShortName": {
                      "description": "Англоязычное краткое наименование каталога для системы",
                      "type": "string"
                  },
                  "catalogTechName": {
                      "description": "Техническое наименование каталога для системы",
                      "type": "string"
                  },
                  "attributeSettings": {
                      "description": "Настройки публикации атрибутов",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CommonAttributePublicationSettings"
                      },
                      "minItems": 1
                  }
              },
              "required": [
                  "systemId",
                  "attributeSettings"
              ]
          },
          "OpodSystemPublicationSettings": {
              "description": "Настройки публкиации для системы \"Портал открытых данных\"",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonSystemPublicationSettings"
                  },
                  {
                      "properties": {
                          "attributeSettings": {
                              "items": {
                                  "$ref": "#/components/schemas/OpodAttributePublicationSettings"
                              }
                          }
                      }
                  }
              ],
              "properties": {
                  "titleSn": {
                      "description": "Заголовок набора данных для социальных сетей",
                      "type": "string"
                  },
                  "descriptionSn": {
                      "description": "Опсиание набора данных для социальных сетей",
                      "type": "string"
                  },
                  "seasonalityTagId": {
                      "$ref": "datasets.yaml#/components/schemas/DatasetSeasonalityTagIdEnum"
                  },
                  "tags": {
                      "description": "Тэги набора данных",
                      "type": "string"
                  },
                  "sefUrl": {
                      "description": "SEF URL, разрешается использование латинских букв, цифр и дефиса.",
                      "type": "string"
                  },
                  "polygonsSortingTagId": {
                      "description": "Идентификатор сортировки полигональных объектов",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/SortingOrderTagIdEnum"
                          }
                      ]
                  },
                  "isClusteredByDistrict": {
                      "description": "Включена ли сортировка по округам и районам",
                      "type": "boolean"
                  },
                  "isIsoIndicatorsDataset": {
                      "description": "Содержит ли набор показатели ISO37120 и U4SSC",
                      "type": "boolean"
                  },
                  "isAvailableDataset": {
                      "description": "Относится ли набор данных к категории \"Доступная среда\"",
                      "type": "boolean"
                  },
                  "forumLink": {
                      "description": "Ссылка на форум",
                      "type": "string"
                  },
                  "dictTypeId": {
                      "$ref": "datasets.yaml#/components/schemas/DatasetDictionaryTypeTagIdEnum"
                  }
              },
              "required": [
                  "seasonalityTagId",
                  "tags",
                  "sefUrl",
                  "isClusteredByDistrict",
                  "isIsoIndicatorsDataset",
                  "isAvailableDataset"
              ]
          },
          "YandexSystemPublicationSettings": {
              "description": "Настройки публкиации для системы \"Яндекс\"",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonSystemPublicationSettings"
                  },
                  {
                      "properties": {
                          "attributeSettings": {
                              "items": {
                                  "$ref": "#/components/schemas/AttributePublicationSettings"
                              }
                          }
                      }
                  }
              ],
              "properties": {
                  "rubricatorId": {
                      "description": "Идентификатор рубрикатора каталога для системы \"Яндекс\".",
                      "type": "integer",
                      "format": "int32",
                      "writeOnly": true
                  },
                  "rubricator": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/Rubric"
                          }
                      ],
                      "readOnly": true
                  }
              }
          },
          "Rubric": {
              "description": "Данные рубрикатора для системы \"Яндекс\".",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор рубрикатора",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "description": "Наименование рубрикатора",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "SystemPublicationSettings": {
              "description": "Настройки публкиации для системы",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonSystemPublicationSettings"
                  },
                  {
                      "properties": {
                          "attributeSettings": {
                              "items": {
                                  "$ref": "#/components/schemas/AttributePublicationSettings"
                              }
                          }
                      }
                  }
              ]
          },
          "PublicationSorting": {
              "description": "Сортировка по атрибуту в каталоге публикации",
              "type": "object",
              "properties": {
                  "attrId": {
                      "description": "Идентификатор атрибута каталога, по которому определена сортировка",
                      "type": "integer",
                      "format": "int32"
                  },
                  "sortingOrder": {
                      "$ref": "_common.yaml#/components/schemas/SortingOrderTagIdEnum"
                  }
              },
              "required": [
                  "attrId",
                  "sortingOrder"
              ]
          },
          "PublicationCatalogMetadata": {
              "description": "Метаданные каталога публикации",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogMetadata"
                  }
              ],
              "properties": {
                  "syncedProperties": {
                      "description": "Синхронизируемые параметры метаданных из каталога заполнения, которые автоматически обновляются в каталоге публикации",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/MetadataSyncedProperty"
                      },
                      "readOnly": true
                  },
                  "syncedPropertiesTagIds": {
                      "description": "Технические названия синхронизируемых параметров метаданных из каталога заполнения, которые автоматически обновляются в каталоге публикации",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/MetadataSyncedPropertyTagIdEnum"
                      },
                      "writeOnly": true
                  }
              },
              "required": [
                  "syncedPropertiesTagIds"
              ]
          },
          "PublicationCatalogSettings": {
              "description": "Настройки каталога публикации",
              "type": "object",
              "properties": {
                  "generalInfo": {
                      "$ref": "#/components/schemas/PublicationCatalogGeneralInfo"
                  },
                  "attributes": {
                      "description": "Атрибуты каталога публикации",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/PublicationCatalogAttribute"
                      },
                      "minItems": 1
                  },
                  "meta": {
                      "$ref": "#/components/schemas/PublicationCatalogMetadata"
                  },
                  "systemPublicationSettings": {
                      "description": "Настройки публикации для систем-потребителей",
                      "type": "array",
                      "items": {
                          "anyOf": [
                              {
                                  "$ref": "#/components/schemas/SystemPublicationSettings"
                              },
                              {
                                  "$ref": "#/components/schemas/OpodSystemPublicationSettings"
                              },
                              {
                                  "$ref": "#/components/schemas/YandexSystemPublicationSettings"
                              }
                          ]
                      }
                  },
                  "sortings": {
                      "description": "Настройки сортировки каталога публикации.\nПередается в виде массива объектов, вклчюающий идентификатор атрибута в каталоге и порядок сортировки.\n\nНесколько объектов определяют многоуровневую сортировку.\nПорядок объектов в массиве определяет уровни сортировки.",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/PublicationSorting"
                      }
                  },
                  "publicationConditions": {
                      "description": "Условия ограничения выборки каталога публикации.\n\nПередается в виде строки, имеющий синтаксис, аналогичный синтаксису условий в конструкторе процессов.",
                      "type": "string"
                  },
                  "map": {
                      "$ref": "#/components/schemas/PublicationCatalogMap"
                  }
              },
              "required": [
                  "generalInfo",
                  "attributes",
                  "map"
              ]
          },
          "PublicationCatalogSystemAccess": {
              "description": "Информация о доступе системы к каталогу публикации",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "systems.yaml#/components/schemas/CommonSystemInfo"
                  }
              ],
              "properties": {
                  "access": {
                      "description": "Признак доступа системы к каталогу публикации",
                      "type": "boolean"
                  }
              },
              "required": [
                  "access"
              ]
          },
          "SystemPublicationSettingsInHistVersion": {
              "type": "object",
              "properties": {
                  "systemsConsumersIds": {
                      "description": "Список идентификаторов систем потребителей данных",
                      "type": "array",
                      "items": {
                          "type": "integer"
                      },
                      "writeOnly": true
                  },
                  "systemPublicationSettings": {
                      "$ref": "#/components/schemas/SystemPublicationSettings"
                  }
              }
          },
          "CommonPublicationCatalogAttributeForValidation": {
              "description": "Основные свойства атрибута кататалога заполнения, необходимые для проведения валидации настроек конструктора проверок, групповой и условной уникальностей\".",
              "type": "object",
              "properties": {
                  "techName": {
                      "description": "Техническое наименование атрибута.",
                      "type": "string"
                  },
                  "typeTagId": {
                      "$ref": "attributes.yaml#/components/schemas/AttributeTypeTagIdEnum"
                  }
              },
              "required": [
                  "techName",
                  "typeTagId"
              ]
          },
          "DictPublicationCatalogAttributeForValidation": {
              "description": "Свойства справочного атрибута каталога публикации, необходимые для проведения валидации настроек огранчиения выборки",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonPublicationCatalogAttributeForValidation"
                  },
                  {
                      "properties": {
                          "dictionaryId": {
                              "description": "Идентификатор справочника, который используется в справочном атрибуте",
                              "type": "integer"
                          }
                      },
                      "required": [
                          "dictionaryId"
                      ]
                  }
              ]
          },
          "PublicationCatalogAttributeForValidation": {
              "description": "Атрибут каталога публикации с набором свойств, необходимых для проведения валидации настроек огранчиения выборки",
              "type": "object",
              "oneOf": [
                  {
                      "$ref": "#/components/schemas/CommonPublicationCatalogAttributeForValidation"
                  },
                  {
                      "$ref": "#/components/schemas/DictPublicationCatalogAttributeForValidation"
                  }
              ]
          },
          "PublicationConditionsValidationError": {
              "type": "object",
              "properties": {
                  "code": {
                      "description": "HTTP-код ошибки",
                      "type": "integer",
                      "format": "int32",
                      "example": 400
                  },
                  "messageType": {
                      "description": "Тип ответа",
                      "type": "string",
                      "example": "Bad request"
                  },
                  "errors": {
                      "description": "Массив ошибок, обнаруженных при валидации настройки ограничения выборки",
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "Недопустимое выражение '{expression}'.",
                              "Найдено {symbol/expression}. Ожидалось {symbol/expression}.",
                              "В каталоге отсутсвует указанный атрибут attr.{techName}.",
                              "Указано значение с некорректным типом данных. Ожидалось {type}.",
                              "Передан некорректный набор входных параметров в {operator}.",
                              "Не найден справочник с идентификатором {dictId}.",
                              "Не найден элемент справочника {elementId} в справочнике {dictId}.",
                              "Атрибут с типом {type} недоступен для оператора {operator}.",
                              "Не найден каталог с идентификатором {catalogId}.",
                              "Не найдено регулярное выражение с идентификатором {regexpId}.",
                              "В справочнике отсутсвует указанный атрибут attr.{dictTechName}.{columnTechName}/dictAttr.{techName}",
                              "Атрибут с типом ссылка и таблица не может быть использован в условии огранчиения выборки"
                          ]
                      }
                  }
              },
              "required": [
                  "code",
                  "messageType",
                  "errors"
              ]
          },
          "PublicationAttributeChange": {
              "description": "Изменение в атрибуте каталога публикации",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор атрибута",
                      "type": "integer",
                      "format": "int32"
                  },
                  "newRusName": {
                      "description": "Новое русскоязычное наименование атрибута",
                      "type": "string"
                  },
                  "newEnName": {
                      "description": "Новое англоязычное наименование атрибута",
                      "type": "string"
                  },
                  "newTechName": {
                      "description": "Новое техническое наименование атрибута",
                      "type": "string"
                  },
                  "alterNameChanges": {
                      "description": "Изменения в альтернативных наименованиях атрибута",
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "id": {
                                  "description": "Идентификатор альтернативного наименования атрибута",
                                  "type": "integer",
                                  "format": "int32"
                              },
                              "newRusName": {
                                  "description": "Новое русскоязычное альтернативное наименование атрибута",
                                  "type": "string"
                              },
                              "newEnName": {
                                  "description": "Новое англоязычное альтернативное наименование атрибута",
                                  "type": "string"
                              }
                          },
                          "required": [
                              "id"
                          ]
                      }
                  },
                  "deletedAlterNameIds": {
                      "description": "Идентификаторы удаленных альтернативных наименований атрибута",
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              }
          },
          "PublicationCatalogSyncChange": {
              "description": "Синхронизируемое изменение настроек каталога публикации",
              "type": "object",
              "properties": {
                  "maxLengthChanges": {
                      "description": "Изменения значения максимальной длины атрибутов",
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "attrId": {
                                  "description": "Идентификатор атрибута",
                                  "type": "integer",
                                  "format": "int32"
                              },
                              "newValue": {
                                  "description": "Новое значение для атрибута",
                                  "type": "integer",
                                  "format": "int32"
                              },
                              "childCatalogId": {
                                  "description": "Идентификатор вложеннего каталога, если атрибут принадлежит табличному",
                                  "type": "integer",
                                  "format": "int32"
                              }
                          },
                          "required": [
                              "attrId",
                              "newValue"
                          ]
                      }
                  },
                  "syncedPropertyChanges": {
                      "description": "Изменения синхронизируемых полей настроек каталога публикации",
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "tagId": {
                                  "description": "Техническое наименование измененного поля из списка синхронизируемых",
                                  "allOf": [
                                      {
                                          "$ref": "#/components/schemas/GeneralInfoSyncedPropertyTagIdEnum"
                                      },
                                      {
                                          "$ref": "#/components/schemas/MetadataSyncedPropertyTagIdEnum"
                                      },
                                      {
                                          "$ref": "#/components/schemas/MapSyncedPropertyTagIdEnum"
                                      }
                                  ]
                              },
                              "newValue": {
                                  "description": "Новое значение синхронизируемого поля",
                                  "oneOf": [
                                      {
                                          "type": "array",
                                          "items": {
                                              "type": "integer",
                                              "format": "int32"
                                          }
                                      },
                                      {
                                          "type": "string"
                                      },
                                      {
                                          "type": "integer",
                                          "format": "int32"
                                      }
                                  ]
                              }
                          },
                          "required": [
                              "tagId",
                              "newValue"
                          ]
                      }
                  }
              }
          },
          "PublicationCatalogCatalogAttributeInfo": {
              "description": "Информация о каталоге и атрибуте, в котором используется каталог.",
              "type": "object",
              "readOnly": true,
              "allOf": [
                  {
                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                  }
              ],
              "properties": {
                  "attributeId": {
                      "description": "Идентификатор атрибута ЕХД",
                      "type": "integer",
                      "format": "int32"
                  },
                  "attributeName": {
                      "description": "Русскоязычное наименование атрибута",
                      "type": "string"
                  }
              },
              "required": [
                  "attributeId",
                  "attributeName"
              ]
          },
          "PublicationCatalogMap": {
              "description": "Настройки карты каталога публикации",
              "type": "object",
              "properties": {
                  "hasGeo": {
                      "description": "Наличие геопривязки в каталоге",
                      "type": "boolean",
                      "default": false
                  },
                  "typeGeoTagIds": {
                      "description": "Массив строковых идентификаторов типов геометрии",
                      "type": "array",
                      "items": {
                          "$ref": "geodata.yaml#/components/schemas/GeojsonGeoTypeTagIdEnum"
                      }
                  },
                  "syncedProperties": {
                      "description": "Синхронизируемые параметры карты из каталога заполнения, которые автоматически обновляются в каталоге публикации",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/MapSyncedProperty"
                      },
                      "readOnly": true
                  },
                  "syncedPropertiesTagIds": {
                      "description": "Технические названия синхронизируемых параметров карты из каталога заполнения, которые автоматически обновляются в каталоге публикации",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/MapSyncedPropertyTagIdEnum"
                      },
                      "writeOnly": true
                  }
              },
              "required": [
                  "syncedProperties",
                  "syncedPropertiesTagIds"
              ]
          },
          "PublicationCatalogRelease": {
              "description": "Информация об одном релизе КП.",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Уникальный идентификатор релиза",
                      "type": "integer"
                  },
                  "createDate": {
                      "description": "Дата создания релиза",
                      "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                  },
                  "cntPublished": {
                      "description": "Количество новых опубликованных объектов в рамках релиза.",
                      "type": "integer",
                      "minimum": 0
                  },
                  "cntDeleted": {
                      "description": "Количество помеченных удалёнными объектов в рамках релиза.",
                      "type": "integer",
                      "minimum": 0
                  },
                  "cntRestored": {
                      "description": "Количество восстановленных объектов в рамках релиза.",
                      "type": "integer",
                      "minimum": 0
                  },
                  "cntUpdated": {
                      "description": "Количество изменённых объектов в рамках релиза.",
                      "type": "integer",
                      "minimum": 0
                  },
                  "cntPassed": {
                      "description": "Количество обработанных записей каталога, которые не были опубликованы, изменены, удалены или восстановлены в БД публикации в связи с несоответствием условию ограничения выборки.",
                      "type": "integer",
                      "minimum": 0
                  },
                  "cntActive": {
                      "description": "Общее количество активных объектов каталога публикации, получившееся в рамках релиза.",
                      "type": "integer",
                      "minimum": 0
                  },
                  "cntAll": {
                      "description": "Общее количество всех объектов каталога публикации, получившееся в рамках релиза.",
                      "type": "integer",
                      "minimum": 0
                  }
              },
              "required": [
                  "cntPublished",
                  "cntDeleted",
                  "cntRestored",
                  "cntUpdated",
                  "cntPassed",
                  "cntActive",
                  "cntAll"
              ]
          },
          "PublicationCatalogVersion": {
              "type": "object",
              "properties": {
                  "versionNum": {
                      "description": "Номер версии настроек каталога публикации",
                      "type": "integer",
                      "minimum": 1
                  },
                  "dateFrom": {
                      "allOf": [
                          {
                              "description": "Дата создания версии"
                          },
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "dateUntil": {
                      "allOf": [
                          {
                              "description": "Дата окончания актуальности версии"
                          },
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  }
              }
          },
          "PublicationCatalogSettingsChange": {
              "description": "Настройки каталога публикации для проверки запуска перепубликации",
              "type": "object",
              "properties": {
                  "attributes": {
                      "description": "Настройки атрибутов каталога публикации",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/PublicationCatalogAttribute"
                      }
                  },
                  "conditions": {
                      "description": "Настройки ограничения выборки каталога публикации",
                      "type": "string"
                  },
                  "map": {
                      "description": "Настройки карты каталога публикации",
                      "type": "object",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/PublicationCatalogMap"
                          }
                      ]
                  }
              },
              "required": [
                  "attributes",
                  "conditions",
                  "mapShort"
              ]
          },
          "CommonCatalogGroupInfo": {
              "description": "Основная информация группы каталогов",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор группы каталогов",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "name": {
                      "description": "Наименование группы каталогов",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "CatalogGroupListItem": {
              "description": "Информация о группах каталогов в списке групп каталогов",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonCatalogGroupInfo"
                  }
              ]
          },
          "CatalogGroup": {
              "description": "Информация о группах каталогов в списке групп каталогов",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonCatalogGroupInfo"
                  }
              ],
              "properties": {
                  "addNewCat": {
                      "description": "Добавлять все новые каталоги в группу",
                      "type": "boolean"
                  },
                  "addNewCatOiv": {
                      "description": "Добавлять все каталоги выбранных ОИВ в группу",
                      "type": "boolean"
                  },
                  "oivs": {
                      "description": "Перечень ОИВов, выбранных при addNewCatOiv=true",
                      "type": "array",
                      "items": {
                          "$ref": "oivs.yaml#/components/schemas/CommonOivInfo"
                      },
                      "readOnly": true
                  },
                  "oivIds": {
                      "description": "Перечень ОИВов, выбранных при addNewCatOiv=true",
                      "writeOnly": true,
                      "type": "array",
                      "items": {
                          "type": "integer"
                      }
                  }
              },
              "required": [
                  "addNewCat",
                  "addNewCatOiv"
              ]
          },
          "CatalogGroupCatalogRequest": {
              "description": "Информация о каталогах, добавляемых в группу каталогов (список идентификаторов)",
              "type": "array",
              "items": {
                  "type": "integer"
              }
          },
          "UserSpecPrivilegeCatalogGroup": {
              "description": "Информация о пользователе и спецпривилегиях для группы каталогов",
              "properties": {
                  "id": {
                      "description": "Идентификатор пользователя",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "login": {
                      "description": "Логин пользователя",
                      "type": "string"
                  },
                  "userFio": {
                      "description": "ФИО пользователя",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "login",
                  "userFio"
              ]
          },
          "DatasetPublicationStatusTagIdEnum": {
              "description": "Статус публикации набора данных:\n  - `published` - опубликован\n  - `unpublished` - не опубликован\n  - `archive` - архивный",
              "type": "string",
              "enum": [
                  "published",
                  "archive",
                  "unpublished"
              ]
          },
          "DatasetPublicationStatusNameEnum": {
              "description": "Наименование статуса публикации набора данных",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "DatasetSeasonalityTagIdEnum": {
              "description": "Техническое наименование сезонности набора данных:\n  - `notSeasonal` - Несезонный набор данных;\n  - `winter` - Зимний набор данных;\n  - `summer` - Летний набор данных;\n  - `allSeasonal` - Всесезонный набор данных.",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "notSeasonal",
                          "winter",
                          "summer",
                          "allSeasonal"
                      ]
                  }
              ]
          },
          "DatasetSeasonalityNameEnum": {
              "description": "Наименование сезонности набора данных",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "DatasetSeasonality": {
              "description": "Сезонность набора данных",
              "type": "object",
              "properties": {
                  "tagId": {
                      "$ref": "#/components/schemas/DatasetSeasonalityTagIdEnum"
                  },
                  "name": {
                      "$ref": "#/components/schemas/DatasetSeasonalityNameEnum"
                  }
              },
              "required": [
                  "tagId",
                  "name"
              ]
          },
          "DatasetDictionaryTypeTagIdEnum": {
              "description": "Техническое наименование типа справочника для набора данных:\n  - `regular` - Обычный;\n  - `regional` - Региональный;\n  - `federal` - Федеральный.",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "regular",
                          "regional",
                          "federal"
                      ]
                  }
              ]
          },
          "DatasetDictionaryTypeNameEnum": {
              "description": "Наименование типа справочника для набора данных.",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "DatasetDictionaryType": {
              "description": "Тип справочника для набора данных",
              "type": "object",
              "properties": {
                  "tagId": {
                      "$ref": "#/components/schemas/DatasetDictionaryTypeTagIdEnum"
                  },
                  "name": {
                      "$ref": "#/components/schemas/DatasetDictionaryTypeNameEnum"
                  }
              },
              "required": [
                  "tagId",
                  "name"
              ]
          },
          "DatasetListItem": {
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор набора данных",
                      "type": "integer"
                  },
                  "name": {
                      "description": "Полное наименование набора данных",
                      "type": "string"
                  },
                  "publicationStatus": {
                      "$ref": "#/components/schemas/DatasetPublicationStatusNameEnum"
                  },
                  "lastReleaseDate": {
                      "description": "Дата открытия актуального релиза набора данных",
                      "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                  },
                  "publicationCatalogId": {
                      "description": "Идентификатор каталога публикации, который связан с актуальной версией набора данных",
                      "type": "integer"
                  },
                  "publicationCatalogHasNewVersion": {
                      "description": "Признак наличия новых версий каталога публикации, которые были созданы после открытия версии набора данных.",
                      "type": "boolean"
                  }
              }
          },
          "DatasetSettings": {
              "type": "object",
              "properties": {
                  "publicationCatalogId": {
                      "description": "Идентификатор каталога публикации, с которым связывается набор данных",
                      "writeOnly": true,
                      "type": "integer"
                  },
                  "seasonalityTagId": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/DatasetSeasonalityTagIdEnum"
                          },
                          {
                              "default": "allSeasonal"
                          },
                          {
                              "writeOnly": true
                          }
                      ]
                  },
                  "seasonality": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/DatasetSeasonality"
                          },
                          {
                              "readOnly": true
                          }
                      ]
                  },
                  "sefUrl": {
                      "description": "SEF URL, который может использоваться в ссылке набора данных. Формируется по следующим правилам:\n{ИНН ОИВ}-{Транслитерация технического наименования для ОПОД}\nДопустимые символы [a-zA-Z0-9-]. Пробелы и нижнее подчёркивание заменяются дефисом.",
                      "type": "string"
                  },
                  "polygonsSortingTagId": {
                      "description": "Идентификатор сортировки полигональных объектов",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/SortingOrderTagIdEnum"
                          }
                      ]
                  },
                  "isClusteredByDistrict": {
                      "description": "Признак наличия кластеризации по округам и районам",
                      "type": "boolean"
                  },
                  "isIsoIndicatorsDataset": {
                      "description": "Признак, содержит ли набор показатели ISO37120 и U4SSC",
                      "type": "boolean"
                  },
                  "isAvailableDataset": {
                      "description": "Признак, относится ли набор данных к категории \"Доступная среда\"",
                      "type": "boolean"
                  },
                  "forumLink": {
                      "description": "Ссылка на обсуждение в социальных сетях",
                      "type": "string"
                  },
                  "isDict": {
                      "description": "Признак, что набор данных раскрывается на ОПОД как справочник",
                      "type": "boolean"
                  },
                  "dictTypeTagId": {
                      "type": "string"
                  },
                  "isManualRelease": {
                      "description": "Признак, что релизы набора данных выпускаются вручную",
                      "type": "boolean",
                      "default": false
                  },
                  "useAsDictDatasetIds": {
                      "description": "Массив идентификаторов наборов данных - справочников, которые используются в текущем наборе данных.",
                      "writeOnly": true,
                      "type": "array",
                      "items": {
                          "type": "integer"
                      }
                  },
                  "useAsDictDatasets": {
                      "description": "Массив объектов из идентификаторов и наименований наборов данных - справочников, которые используются в текущем наборе данных.",
                      "type": "object",
                      "properties": {
                          "id": {
                              "description": "Идентификатор набора данных - справочника",
                              "type": "integer"
                          },
                          "name": {
                              "description": "Полное наименование набора данных",
                              "type": "string"
                          }
                      },
                      "readOnly": true
                  }
              },
              "required": [
                  "publicationCatalogId",
                  "sefUrl"
              ]
          },
          "DatasetVersion": {
              "description": "Версия набора данных",
              "type": "object",
              "properties": {
                  "versionNum": {
                      "description": "Номер версии набора данных",
                      "type": "integer"
                  },
                  "openDate": {
                      "allOf": [
                          {
                              "description": "Дата открытия версии набора данных"
                          },
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "isActual": {
                      "description": "Признак, что версия является актуальной в ноборе данных",
                      "type": "boolean"
                  },
                  "publicationCatalogId": {
                      "description": "Идентификатор каталога публикации, который привязан к версии набора данных",
                      "type": "integer"
                  },
                  "publicationCatalogVersionNum": {
                      "description": "Номер версии каталога публикации",
                      "type": "integer"
                  },
                  "attributeSettings": {
                      "allOf": [
                          {
                              "description": "Дополнительные настройки свойств атрибутов для набора данных. Настройки доступны только для атрибутов, у которых включена видимость для ОПОД в связанном КП."
                          },
                          {
                              "$ref": "#/components/schemas/DatasetAttributeSettings"
                          }
                      ]
                  }
              }
          },
          "DatasetRelease": {
              "description": "Релиз набора данных",
              "type": "object",
              "properties": {
                  "releaseNum": {
                      "description": "Релиз набора данных",
                      "type": "integer"
                  },
                  "createDate": {
                      "allOf": [
                          {
                              "description": "Дата создания релиза"
                          },
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "openDate": {
                      "allOf": [
                          {
                              "description": "Дата открытия релиза для пользователей ОПОД"
                          },
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "isActual": {
                      "description": "Признак, что релиз является актуальным в ноборе данных",
                      "type": "boolean"
                  },
                  "isOpen": {
                      "description": "Признак, что релиз доступен пользователям ОПОД",
                      "type": "boolean"
                  },
                  "cntObjects": {
                      "description": "Количество объектов в релизе",
                      "type": "integer"
                  }
              }
          },
          "DatasetAttributeSettings": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/DatasetCommonAttributeSettings"
                  },
                  {
                      "type": "object",
                      "properties": {
                          "isDisplayInTable": {
                              "description": "Признак, что атрибут должен отображаться в таблице набора данных при открытии его на портале. Для атрибутов с типом \"Таблица\" всегда принимает значение false.",
                              "type": "boolean",
                              "default": true
                          }
                      }
                  }
              ]
          },
          "DatasetCommonAttributeSettings": {
              "type": "object",
              "properties": {
                  "attrId": {
                      "description": "Идентификатор атрибута",
                      "type": "integer",
                      "format": "int32"
                  },
                  "childCatalogId": {
                      "description": "Идентификатор вложенного каталога.\nУказывается только для табличных атрибутов.",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1
                  },
                  "isDisplayInExport": {
                      "description": "Признак, что атрибут должен попадать в файл экспорта содержимого набора данных.",
                      "type": "boolean",
                      "default": true
                  },
                  "attributes": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/DatasetCommonAttributeSettings"
                      }
                  }
              }
          },
          "DatasetLiteListItem": {
              "description": "Минимальная информация о наборе данных для выпадающих списков",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор набора данных",
                      "type": "integer"
                  },
                  "name": {
                      "description": "Наименование набора данных",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name"
              ]
          },
          "CommonChildObjectListItem": {
              "description": "Информация об объекте, выводимая в списке объектов вложенного каталога (заполнения и публикации)",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "globalObjectId": {
                      "description": "Глобальный идентификатор родительского объекта",
                      "type": "integer",
                      "format": "int64"
                  }
              },
              "required": [
                  "globalObjectId"
              ]
          },
          "CommonObjectSignInfo": {
              "description": "Общая информация о подписании корневых объектов в списке объектов каталога заполнения",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "subjectName": {
                      "description": "Информация о подписанте",
                      "type": "string"
                  },
                  "issuerName": {
                      "description": "Информация о том, кто выпустил сертификат",
                      "type": "string"
                  },
                  "signDate": {
                      "description": "Дата подписания",
                      "type": "string",
                      "format": "date"
                  }
              }
          },
          "CommonObjectListItem": {
              "description": "Общая информация об объекте, выводимая в списке объектов каталога и вложенного каталога (каталогов заполнения и публикации)",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "systemObjectId": {
                      "description": "Идентификатор объекта в системе-поставщике",
                      "type": "string"
                  },
                  "globalId": {
                      "description": "Глобальный идентификатор объекта",
                      "type": "integer",
                      "format": "int64"
                  },
                  "attributes": {
                      "additionalProperties": {
                          "description": "- <*> = \"field_{attrId}\" для каталога заполнения\n- <*> = \"field_{catalogAttrId}\" для каталога публикации\n    - attrId - идентификатор атрибута в ЕХД\n    - catalogAttrId - идентификатор атрибута каталога\n\nЗначения атрибутов объекта, возвращаются в JSON в виде пары ключ - значение, где ключ записывается в формате \"field_{attrId}\". Возвращаются все атрибуты, кроме табличных. Незаполненные атрибуты имеют значение `null`. Значения формируются по следующим правилам в зависимости от типа:\n  - Строка - значение возвращается с типом string;\n  - Целое число - значение возвращается с типом integer;\n  - Дробное число - значение возвращается с типом number;\n  - Дата - значение возвращается в виде строки с типом string;\n  - Флаг - возвращается в виде объекта. Объект содержит строку `tableValue` со значением \"да\"/\"нет\"/\"\", а также соответствующее логическое значение в поле `boolValue`;\n  - Файл - возвращается в виде объекта. Объект содержит строку `tableValue` со значением \"Файлов: N\", где N - число файлов в значении атрибута, а также массив идентификаторов файлов `fileIds`;\n  - Справочник - возвращается в виде объекта. Объект содержит строку `tableValue` со значениями выбранных элементов справочника, разделенных точкой с запятой, а также массив объектов `dictElements` с данными выбранных элементов справочника. В данных объектах передаются `dictElementId` - идентификатор элемента справочника и `value` - значение атрибута справочника, выбранного для показа в каталоге.\n  В качестве значения выступает атрибут справочника, выбранный в настройках атрибута каталога;\n  - Ссылка - возвращается в виде объекта. Объект содержит строку `tableValue` со значениями выбранных элементов ссылочного каталога, разделенных точкой с запятой, а также массив объектов `linkObjects` с данными выбранных объектов-ссылок. В данных объектах передаются `globalId` - глобавльный идентификатор объекта из ссылочного каталога и `value` - значение атрибута ссылочного каталога, выбранного для показа в каталоге.\n  В качестве значения выступает атрибут ссылочного каталога, выбранный в настройках атрибута каталога.\n  - Таблица - возвращается в виде булевого значения, гдe `true` указывает на наличие вложенных объектов, `false` - на отсутствие.",
                          "oneOf": [
                              {
                                  "description": "Значение строкового атрибута",
                                  "type": "string"
                              },
                              {
                                  "description": "Значение целочисленного атрибута",
                                  "type": "integer"
                              },
                              {
                                  "description": "Значение атрибута с типом дробное число",
                                  "type": "number"
                              },
                              {
                                  "description": "Значение атрибута с типом дата",
                                  "type": "string"
                              },
                              {
                                  "description": "Значение атрибута с типом флаг",
                                  "type": "object",
                                  "properties": {
                                      "tableValue": {
                                          "description": "Строковое значение атрибута типа Флаг для отображения в столбце таблицы объектов.",
                                          "type": "string"
                                      },
                                      "boolValue": {
                                          "description": "Логическое значение атрибута типа Флаг. Имеет значение `null`, если объект не имеет значения атрибута. Возвращается только для атрибутов типа Флаг.",
                                          "type": "boolean"
                                      }
                                  },
                                  "required": [
                                      "tableValue"
                                  ]
                              },
                              {
                                  "description": "Значение атрибута с типом файл",
                                  "type": "object",
                                  "properties": {
                                      "tableValue": {
                                          "description": "Строковое значение атрибута типа Файл для отображения в столбце таблицы объектов.\nИмеет значение `Файлов: N`, где N - число файлов в значении атрибута",
                                          "type": "string"
                                      },
                                      "fileIds": {
                                          "description": "Идентификаторы файлов значения файлового атрибута. Имеет значение `null`, если объект не имеет значения атрибута.",
                                          "type": "array",
                                          "items": {
                                              "type": "string"
                                          }
                                      }
                                  },
                                  "required": [
                                      "tableValue"
                                  ]
                              },
                              {
                                  "description": "Значение справочного атрибута",
                                  "type": "object",
                                  "properties": {
                                      "tableValue": {
                                          "description": "Строковое значение справочного атрибута для отображения в столбце таблицы объектов.\nИмеет значение из выбранных элементов справочника (из столбца, выбранного для отображения в каталоге), разделенных точкой с запятой.",
                                          "type": "string"
                                      },
                                      "dictElements": {
                                          "description": "Массив элементов справочника, выбранных в качестве значения справочного атрибута. Имеет значение `null`, если объект не имеет значения атрибута.",
                                          "type": "array",
                                          "items": {
                                              "type": "object",
                                              "properties": {
                                                  "dictElementId": {
                                                      "description": "Идентификатор элемента справочника.",
                                                      "type": "string"
                                                  },
                                                  "value": {
                                                      "description": "Значение атрибута выбранного элемента справочника.",
                                                      "oneOf": [
                                                          {
                                                              "type": "string"
                                                          },
                                                          {
                                                              "type": "number"
                                                          },
                                                          {
                                                              "type": "integer"
                                                          }
                                                      ]
                                                  }
                                              }
                                          }
                                      }
                                  },
                                  "required": [
                                      "tableValue"
                                  ]
                              },
                              {
                                  "description": "Значение ссылочного атрибута",
                                  "type": "object",
                                  "properties": {
                                      "tableValue": {
                                          "description": "Строковое значение ссылочного атрибута для отображения в столбце таблицы объектов.\nИмеет значение из выбранных элементов ссылочного каталога (из главного атрибута ссылочного каталога), разделенных точкой с запятой.",
                                          "type": "string"
                                      },
                                      "linkObjects": {
                                          "description": "Массив объектов ссылочного каталога, выбранных в качестве значения ссылочного атрибута. Имеет значение `null`, если объект не имеет значения атрибута.",
                                          "type": "array",
                                          "items": {
                                              "type": "object",
                                              "properties": {
                                                  "globalId": {
                                                      "description": "Глобальный идентификатор ссылочного объекта.",
                                                      "type": "integer"
                                                  },
                                                  "value": {
                                                      "description": "Значение атрибута выбранного объекта ссылочного каталога.",
                                                      "oneOf": [
                                                          {
                                                              "type": "string"
                                                          },
                                                          {
                                                              "type": "number"
                                                          },
                                                          {
                                                              "type": "integer"
                                                          }
                                                      ]
                                                  }
                                              }
                                          }
                                      }
                                  },
                                  "required": [
                                      "tableValue"
                                  ]
                              },
                              {
                                  "description": "Значение табличного атрибута. Значение `true` указывает на наличие вложенных объектов, `false` - на отсутствие.",
                                  "type": "boolean"
                              }
                          ]
                      }
                  }
              },
              "required": [
                  "globalId",
                  "attributes",
                  "systemObjectId"
              ]
          },
          "ObjectsDataForDeletion": {
              "description": "Информация об объектах, передаваемая при удалении",
              "type": "object",
              "properties": {
                  "globalIds": {
                      "description": "Массив глобальных идентификаторов объектов",
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int64"
                      },
                      "minItems": 1,
                      "maxItems": 500
                  },
                  "data": {
                      "description": "Массив атрибутов и их значений в рамках удаляемых объектов",
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "attrId": {
                                  "description": "Идентификатор атрибута",
                                  "type": "integer",
                                  "format": "int32"
                              },
                              "value": {
                                  "description": "Значение атрибута, передаваемое при удалении.\nДля типов данных справочник, ссылка на объект, файл значение **всегда** передаётся в массиве, независимо от установленного свойства isMultiple на атрибуте.",
                                  "oneOf": [
                                      {
                                          "description": "Значение атрибута типа строка",
                                          "type": "string"
                                      },
                                      {
                                          "description": "Значение атрибута типа целое число",
                                          "type": "integer"
                                      },
                                      {
                                          "description": "Значение атрибута типа дробное число",
                                          "type": "number"
                                      },
                                      {
                                          "description": "Значение атрибута типа флаг",
                                          "type": "boolean"
                                      },
                                      {
                                          "description": "Значение атрибута типа дата (без времени) в формате dd.MM.YYYY",
                                          "type": "string",
                                          "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3})$"
                                      },
                                      {
                                          "description": "Значение атрибута типа дата (со временем) в формате dd.MM.YYYY hh:mm:ss",
                                          "type": "string",
                                          "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3}) ([0-1]\\d|2[0-4])(:[0-5]\\d){2}$"
                                      },
                                      {
                                          "description": "Значение атрибута типа файл, в массиве передается id (uuid) файла, загруженного на файловый сервер",
                                          "type": "array",
                                          "items": {
                                              "type": "string"
                                          }
                                      },
                                      {
                                          "description": "Значение атрибута типа справочник, в массиве передается id элемента справочника",
                                          "type": "array",
                                          "items": {
                                              "type": "string"
                                          }
                                      },
                                      {
                                          "description": "Значение атрибута типа ссылка, в массиве передается gloabl_id объекта, на который ссылается объект",
                                          "type": "array",
                                          "items": {
                                              "type": "integer"
                                          }
                                      }
                                  ]
                              }
                          }
                      }
                  }
              },
              "required": [
                  "globalIds"
              ]
          },
          "ObjectStatusTagIdEnum": {
              "description": "Техническое наименование статуса объекта",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "new",
                          "signed",
                          "toModification",
                          "toDeletion",
                          "deleted",
                          "toRecovery"
                      ]
                  }
              ]
          },
          "ObjectStatusNameEnum": {
              "description": "Наименование статуса объекта",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "ObjectProcess": {
              "description": "Процесс, запущенный на каталоге или объекте каталога",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "description": "Идентификатор процесса"
                  },
                  "name": {
                      "$ref": "#/components/schemas/ObjectProcessNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/ObjectProcessTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ],
              "example": {
                  "id": 1,
                  "name": "Фоновая проверка",
                  "tagId": "backgroundCheck"
              }
          },
          "ObjectProcessNameEnum": {
              "description": "Название процесса",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "ObjectProcessTagIdEnum": {
              "description": "Технчиеское наименование процесса, запущенного на каталоге или объекте каталога\n  - `backgroundCheck` - Фоновая проверка, \n  - `signing` - Подписание, \n  - `import` - Импорт",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "backgroundCheck",
                          "signing",
                          "import"
                      ]
                  }
              ]
          },
          "CatalogObjectListColumnTypeTagIdEnum": {
              "description": "Тип столбца, показывает, какой тип информации передается в столбце списка объектов каталога:\n  - `technical` - техническая информация\n  - `attribute` - атрибут каталога\n  - `manualInput` - признак ручного ввода для атрибута каталога",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "technical",
                          "attribute",
                          "manualInput"
                      ]
                  }
              ]
          },
          "CatalogObjectActionTagIdEnum": {
              "description": "Тип действия с объектом при сохранении:\n  - `added` - создание нового объекта,\n  - `modified` - изменение существующего объекта,\n  - `deleted` - удаление существующего объекта",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "added",
                          "modified",
                          "deleted"
                      ]
                  }
              ]
          },
          "ObjectStatus": {
              "description": "Статус объекта",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "id": {
                      "description": "Идентификатор статуса",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "$ref": "#/components/schemas/ObjectStatusNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/ObjectStatusTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ],
              "example": {
                  "id": 1,
                  "name": "Новый",
                  "tagId": "new"
              }
          },
          "LastChangeTypeTagIdEnum": {
              "description": "Тип последнего изменения объекта:\n  - `added` - Создание,\n  - `modified` - Изменение,\n  - `signatured` - Подписание,\n  - `deleted` - Удаление,\n  - `recovered` - Восстановление,",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "added",
                          "modified",
                          "signatured",
                          "deleted",
                          "recovered"
                      ]
                  }
              ]
          },
          "LastChangeTypeNameEnum": {
              "description": "Наименование типа последнего изменения объекта",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "LastChangeType": {
              "description": "Тип последнего изменения объекта",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "id": {
                      "description": "Идентификатор типа изменения",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "$ref": "#/components/schemas/LastChangeTypeNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/LastChangeTypeTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ],
              "example": {
                  "id": 1,
                  "name": "Создание",
                  "tagId": "added"
              }
          },
          "CatalogObjectListColumn": {
              "description": "Информация о столбце в списке объектов каталога",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "attrId": {
                      "description": "Идентификатор атрибута или системного атрибута",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "description": "Название столбца в списке",
                      "type": "string"
                  },
                  "objectFieldName": {
                      "description": "Название поля, используемое в объекте каталога",
                      "type": "string"
                  },
                  "dictionaryId": {
                      "description": "Идентификатор справочника, возвращается для справочных атрибутов каталога",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalogId": {
                      "description": "Идентификатор каталога, возвращается для табличных (вложенных) и ссылочных атрибутов каталога",
                      "type": "integer",
                      "format": "int32"
                  },
                  "columnType": {
                      "$ref": "#/components/schemas/CatalogObjectListColumnTypeTagIdEnum"
                  },
                  "typeTag": {
                      "$ref": "attributes.yaml#/components/schemas/AttributeTypeTagIdEnum"
                  }
              },
              "required": [
                  "attrId",
                  "name",
                  "columnType",
                  "typeTag"
              ],
              "example": {
                  "attrId": 2342,
                  "typeTag": "string",
                  "name": "Фамилия",
                  "objectFieldName": "field_2342",
                  "columnType": "attribute"
              }
          },
          "CommonCatalogObjectListFilter": {
              "description": "Объект, используемый для фильтров по списку объектов",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "_common.yaml#/components/schemas/Filter"
                  }
              ],
              "example": {
                  "attribute": "field_34",
                  "operator": "equals",
                  "value": "Иванов"
              }
          },
          "RootCatalogObjectListFilter": {
              "type": "object",
              "description": "Объект фильтрации, используемый для фильтрации по списку объектов корневого каталога.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonCatalogObjectListFilter"
                  }
              ],
              "properties": {
                  "childCatalogId": {
                      "description": "Идентификатор вложенного каталога, по атриубту которого производят фильтрацию.\nФильтрация производится только по первому уровню вложенности.",
                      "type": "integer"
                  }
              },
              "example": {
                  "attribute": "field_34",
                  "operator": "equals",
                  "value": "Иванов",
                  "childCatalogId": 1624
              }
          },
          "ChildCatalogObjectListFilter": {
              "type": "object",
              "description": "Объект фильтрации, используемый для фильтрации по списку объектов вложенного каталога.\n\nВ отличие от фильтрации по корневому каталогу, не позволяет производить фильтрацию по вложенным каталогам (т.е. по вложенным 2, 3 уровня и т.д.) через поле `childCatalogId`.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonCatalogObjectListFilter"
                  }
              ],
              "example": {
                  "attribute": "field_34",
                  "operator": "equals",
                  "value": "Иванов"
              }
          },
          "CommonCatalogObjectListItem": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonObjectListItem"
                  }
              ],
              "description": "Общая информация об объекте в списке объектов каталога заполнения",
              "type": "object",
              "readOnly": true
          },
          "CatalogObjectListItem": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonCatalogObjectListItem"
                  },
                  {
                      "$ref": "#/components/schemas/CommonObjectSignInfo"
                  }
              ],
              "description": "Информация об объекте, выводимая в списке объектов каталога",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "objectStatus": {
                      "$ref": "#/components/schemas/ObjectStatus"
                  },
                  "isError": {
                      "description": "Есть ли на объекте ошибки фоновой проверки",
                      "type": "boolean"
                  },
                  "creationDate": {
                      "description": "Дата создания объекта",
                      "type": "string"
                  },
                  "lastChangeType": {
                      "description": "Тип последнего изменения объекта",
                      "type": "string"
                  },
                  "lastChangeDate": {
                      "description": "Дата последнего изменения объекта",
                      "type": "string"
                  },
                  "lastChangeActorName": {
                      "description": "Имя пользователя или название информационной системы, совершившая последнее действие над объектом",
                      "type": "string"
                  },
                  "hasGeoObj": {
                      "description": "Признак наличия геоданных в объекте. Указывается только в каталогах, где включено наличие геопривязки.",
                      "type": "boolean"
                  },
                  "geodata": {
                      "$ref": "geodata.yaml#/components/schemas/ObjectGeodata"
                  }
              },
              "required": [
                  "objectStatus",
                  "isError",
                  "creationDate",
                  "lastChangeType",
                  "lastChangeDate",
                  "lastChangeActorName"
              ]
          },
          "ChildCatalogObjectListItem": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonCatalogObjectListItem"
                  },
                  {
                      "$ref": "#/components/schemas/CommonChildObjectListItem"
                  }
              ],
              "description": "Информация о объекте, выводимая в списке объектов вложенного каталога",
              "type": "object",
              "readOnly": true
          },
          "FillingNestedCatalogObject": {
              "type": "object",
              "description": "Объект вложенного каталога.\n\nДля идентификации обязательна передача `globalId` или `systemobjectId`.\nПри создании без `systemObjectId` может быть передан отрицательный `globalId` для идентификации возможных ошибок в ответе.\nВ таком случае он должен быть уникальным в рамкха запроса.\n\nПри чтении объектов `action` не указывается.",
              "properties": {
                  "action": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/CatalogObjectActionTagIdEnum"
                          }
                      ],
                      "writeOnly": true
                  },
                  "globalId": {
                      "description": "Глобальный идентификатор объекта.",
                      "type": "integer"
                  },
                  "systemObjectId": {
                      "description": "Идентификатор объекта в системе-поставщике",
                      "type": "string"
                  },
                  "parentSystemObjectId": {
                      "description": "Идентификатор родительского объекта в системе-поставщике",
                      "type": "string"
                  },
                  "parentGlobalId": {
                      "description": "Глобальный идентификатор родительского объекта",
                      "type": "integer"
                  },
                  "rootGlobalId": {
                      "description": "Идентификатор глобального объекта",
                      "type": "integer"
                  },
                  "catalogId": {
                      "description": "Идентификатор каталога",
                      "type": "integer"
                  },
                  "parentCatalogId": {
                      "description": "Идентификатор родительского каталога",
                      "type": "integer"
                  },
                  "rootCatalogId": {
                      "description": "Идентификатор корневого каталога",
                      "type": "integer"
                  },
                  "data": {
                      "description": "Массив атрибутов и их значений в рамках одного объекта",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/FillingCatalogObjectDataItem"
                      },
                      "minItems": 1
                  }
              },
              "required": [
                  "action",
                  "catalogId",
                  "parentCatalogId",
                  "rootCatalogId",
                  "data"
              ]
          },
          "FillingNestedCatalogObjectVerbose": {
              "type": "object",
              "description": "Объект вложенного каталога с расширенной схемой для справочных и ссылочных атрибутов.\n\nДля идентификации обязательна передача `globalId` или `systemobjectId`.\nПри создании без `systemObjectId` может быть передан отрицательный `globalId` для идентификации возможных ошибок в ответе.\nВ таком случае он должен быть уникальным в рамкха запроса.\n\nПри чтении объектов `action` не указывается.",
              "readOnly": true,
              "properties": {
                  "globalId": {
                      "description": "Глобальный идентификатор объекта.",
                      "type": "integer"
                  },
                  "systemObjectId": {
                      "description": "Идентификатор объекта в системе-поставщике",
                      "type": "string"
                  },
                  "parentSystemObjectId": {
                      "description": "Идентификатор родительского объекта в системе-поставщике",
                      "type": "string"
                  },
                  "parentGlobalId": {
                      "description": "Глобальный идентификатор родительского объекта",
                      "type": "integer"
                  },
                  "rootGlobalId": {
                      "description": "Идентификатор глобального объекта",
                      "type": "integer"
                  },
                  "catalogId": {
                      "description": "Идентификатор каталога",
                      "type": "integer"
                  },
                  "parentCatalogId": {
                      "description": "Идентификатор родительского каталога",
                      "type": "integer"
                  },
                  "rootCatalogId": {
                      "description": "Идентификатор корневого каталога",
                      "type": "integer"
                  },
                  "data": {
                      "description": "Массив атрибутов и их значений в рамках одного объекта",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/FillingCatalogObjectDataItemVerbose"
                      },
                      "minItems": 1
                  }
              },
              "required": [
                  "globalId",
                  "parentGlobalId",
                  "rootGlobalId",
                  "catalogId",
                  "parentCatalogId",
                  "rootCatalogId",
                  "data"
              ]
          },
          "FillingCatalogObjectDataItem": {
              "description": "Значение атрибута объекта.",
              "type": "object",
              "properties": {
                  "attrId": {
                      "description": "Идентификатор атрибута",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalogAttrId": {
                      "description": "Идентификатор атрибута каталога",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "isManualInput": {
                      "description": "Заполнен ли атрибут с использованием ручного ввода.\n`true` указывается только для тех атрибутов, которые сопоставляются со справочником в Автозаполнении. Для самих автозаполняемых указывается `false` (если они не используются для сопоставления со справочником в других блоках Автозаполнение).",
                      "type": "boolean"
                  },
                  "value": {
                      "description": "Значение атрибута, передаваемое при сохранении или чтении, если verbose=false.\nДля типов данных справочник, ссылка на объект, файл, таблица значение **всегда** передаётся в массиве, независимо от установленного свойства isMultiple на атрибуте.",
                      "oneOf": [
                          {
                              "description": "Значение атрибута типа строка",
                              "type": "string"
                          },
                          {
                              "description": "Значение атрибута типа целое число",
                              "type": "integer"
                          },
                          {
                              "description": "Значение атрибута типа дробное число",
                              "type": "number"
                          },
                          {
                              "description": "Значение атрибута типа флаг",
                              "type": "boolean"
                          },
                          {
                              "description": "Значение атрибута типа дата (без времени) в формате dd.MM.YYYY",
                              "type": "string",
                              "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3})$"
                          },
                          {
                              "description": "Значение атрибута типа дата (со временем) в формате dd.MM.YYYY hh:mm:ss",
                              "type": "string",
                              "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3}) ([0-1]\\d|2[0-4])(:[0-5]\\d){2}$"
                          },
                          {
                              "description": "Значение атрибута типа файл, в массиве передается id (uuid) файла, загруженного на файловый сервер",
                              "type": "array",
                              "items": {
                                  "type": "string"
                              }
                          },
                          {
                              "description": "Значение атрибута типа справочник, в массиве передается id элемента справочника",
                              "type": "array",
                              "items": {
                                  "type": "string"
                              }
                          },
                          {
                              "description": "Значение атрибута типа ссылка, в массиве передается gloabl_id объекта, на который ссылается объект",
                              "type": "array",
                              "items": {
                                  "type": "integer"
                              }
                          },
                          {
                              "description": "Значение атрибута типа таблица",
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/FillingNestedCatalogObject"
                              }
                          }
                      ]
                  }
              },
              "required": [
                  "attrId",
                  "isManualInput"
              ]
          },
          "FillingCatalogObjectDataItemVerbose": {
              "description": "Значение атрибута объекта.",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "attrId": {
                      "description": "Идентификатор атрибута",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalogAttrId": {
                      "description": "Идентификатор атрибута каталога",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "isManualInput": {
                      "description": "Заполнен ли атрибут с использованием ручного ввода.\n\n`true` указывается только для тех атрибутов, которые сопоставляются со справочником в Автозаполнении.\nДля самих автозаполняемых указывается `false` (если они не используются для сопоставления со справочником в других блоках Автозаполнение).",
                      "type": "boolean"
                  },
                  "value": {
                      "description": "Значение атрибута, передаваемое при сохранении или чтении, если verbose=true.\nДля типов данных справочник, ссылка на объект, файл, таблица значение **всегда** передаётся в массиве, независимо от установленного свойства isMultiple на атрибуте.",
                      "oneOf": [
                          {
                              "description": "Значение атрибута типа строка",
                              "type": "string"
                          },
                          {
                              "description": "Значение атрибута типа целое число",
                              "type": "integer"
                          },
                          {
                              "description": "Значение атрибута типа дробное число",
                              "type": "number"
                          },
                          {
                              "description": "Значение атрибута типа флаг",
                              "type": "boolean"
                          },
                          {
                              "description": "Значение атрибута типа дата (без времени) в формате dd.MM.YYYY",
                              "type": "string",
                              "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3})$"
                          },
                          {
                              "description": "Значение атрибута типа дата (со временем) в формате dd.MM.YYYY hh:mm:ss",
                              "type": "string",
                              "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3}) ([0-1]\\d|2[0-4])(:[0-5]\\d){2}$"
                          },
                          {
                              "description": "Значение атрибута типа файл, в массиве передается uuid файла, загруженного на файловый сервер",
                              "type": "array",
                              "items": {
                                  "type": "string"
                              }
                          },
                          {
                              "description": "Значение атрибута типа справочник",
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "properties": {
                                      "dictElementId": {
                                          "description": "Идентификатор элемента справочника",
                                          "type": "string"
                                      },
                                      "value": {
                                          "description": "Значение элемента справочника из столбца, выбранного в каталоге для отображения",
                                          "type": "string"
                                      }
                                  }
                              }
                          },
                          {
                              "description": "Значение атрибута типа ссылка",
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "properties": {
                                      "globalId": {
                                          "description": "Глобальный идентификатор объекта, записанного в значении ссылочного атрибута",
                                          "type": "integer",
                                          "format": "int64"
                                      },
                                      "value": {
                                          "description": "Значение главного атрибута объекта, записанного в значении ссылочного атрибута",
                                          "type": "string"
                                      }
                                  }
                              }
                          },
                          {
                              "description": "Значение атрибута типа таблица",
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/FillingNestedCatalogObjectVerbose"
                              }
                          }
                      ]
                  }
              },
              "required": [
                  "attrId",
                  "isManualInput"
              ]
          },
          "FillingCatalogObject": {
              "description": "Объект каталога.\n\nДля идентификации обязательна передача `globalId` или `systemobjectId`.\nПри создании без `systemObjectId` может быть передан отрицательный `globalId` для идентификации возможных ошибок в ответе.\n\nПри чтении объектов `action` не указывается.",
              "type": "object",
              "properties": {
                  "action": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/CatalogObjectActionTagIdEnum"
                          }
                      ],
                      "writeOnly": true
                  },
                  "catalogId": {
                      "description": "Идентификатор каталога",
                      "type": "integer"
                  },
                  "globalId": {
                      "description": "Глобальный идентификатор объекта.",
                      "type": "integer"
                  },
                  "systemObjectId": {
                      "description": "Идентификатор объекта в системе-поставщике",
                      "type": "string"
                  },
                  "objectStatus": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/ObjectStatus"
                          }
                      ],
                      "readOnly": true
                  },
                  "isError": {
                      "description": "Есть ли на объекте ошибки фоновой проверки",
                      "type": "boolean",
                      "readOnly": true
                  },
                  "data": {
                      "description": "Массив атрибутов и их значений в рамках одного объекта",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/FillingCatalogObjectDataItem"
                      },
                      "minItems": 1
                  },
                  "geodata": {
                      "$ref": "geodata.yaml#/components/schemas/ObjectGeodata"
                  }
              },
              "required": [
                  "action",
                  "catalogId",
                  "data"
              ]
          },
          "FillingCatalogObjectVerbose": {
              "description": "Объект каталога с расширенной схемой для справочных и ссылочных атрибутов.\n\nДля идентификации обязательна передача `globalId` или `systemobjectId`.\nПри создании без `systemObjectId` может быть передан отрицательный `globalId` для идентификации возможных ошибок в ответе.\n\nПри чтении объектов `action` не указывается.",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "catalogId": {
                      "description": "Идентификатор каталога",
                      "type": "integer"
                  },
                  "globalId": {
                      "description": "Глобальный идентификатор объекта.",
                      "type": "integer"
                  },
                  "systemObjectId": {
                      "description": "Идентификатор объекта в системе-поставщике",
                      "type": "string"
                  },
                  "objectStatus": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/ObjectStatus"
                          }
                      ],
                      "readOnly": true
                  },
                  "isError": {
                      "description": "Есть ли на объекте ошибки фоновой проверки",
                      "type": "boolean",
                      "readOnly": true
                  },
                  "data": {
                      "description": "Массив атрибутов и их значений в рамках одного объекта",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/FillingCatalogObjectDataItemVerbose"
                      },
                      "minItems": 1
                  },
                  "geodata": {
                      "$ref": "geodata.yaml#/components/schemas/ObjectGeodata"
                  }
              },
              "required": [
                  "catalogId",
                  "globalId",
                  "data"
              ]
          },
          "OkCatalogObjectResponse": {
              "allOf": [
                  {
                      "$ref": "catalogObjects.yaml#/components/schemas/OkCatalogObjectResponse"
                  }
              ],
              "properties": {
                  "responseAction": {
                      "$ref": "#/components/schemas/CatalogObjectResponseActionTagIdEnum"
                  }
              }
          },
          "IncorrectDataCatalogObjectResponse": {
              "allOf": [
                  {
                      "$ref": "catalogObjects.yaml#/components/schemas/IncorrectDataCatalogObjectResponse"
                  }
              ],
              "properties": {
                  "responseAction": {
                      "$ref": "#/components/schemas/CatalogObjectResponseActionTagIdEnum"
                  }
              }
          },
          "CatalogObjectErrors": {
              "description": "Ошибки объекта каталога заполнения",
              "type": "object",
              "properties": {
                  "globalId": {
                      "description": "Глобальный идентификатор объекта, для которого вернулась ошибка",
                      "type": "integer",
                      "format": "int64"
                  },
                  "errorInfo": {
                      "description": "Информация об ошибках ФЛК",
                      "type": "object",
                      "properties": {
                          "mismatchWithProperties": {
                              "description": "Ошибки, обнаруженные при проверке соответствия переданных значений свойствам атрибутов.",
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/IncorrectDataAttributeCatalogObjectResponse"
                              }
                          },
                          "mismatchWithConditions": {
                              "description": "Ошибки, обнаруженные при проверке условий, настроенных в конструкторе проверок.",
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/IncorrectDataProcessCatalogObjectResponse"
                              }
                          },
                          "mismatchWithGeoProperties": {
                              "description": "Ошибки, обнаруженные при проверке геоданных объекта",
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/IncorrectGeodataCatalogObjectResponse"
                              }
                          }
                      }
                  }
              },
              "required": [
                  "globalId",
                  "errorInfo"
              ]
          },
          "IncorrectDataAttributeCatalogObjectResponse": {
              "description": "Ошибка ФЛК для атрибута при сохранении объекта",
              "type": "object",
              "properties": {
                  "attrId": {
                      "description": "Идентификатор атрибута, для которого вернулась ошибка",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalogAttrId": {
                      "description": "Идентификатор атрибута каталога, для которого вернулась ошибка",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalogAttrName": {
                      "description": "Наименование атрибута в каталоге, для которого вернулась ошибка",
                      "type": "string"
                  },
                  "catalogId": {
                      "description": "Идентификатор корневого или вложенного каталога, для объекта которого вернулась ошибка",
                      "type": "integer",
                      "format": "int32"
                  },
                  "parentCatalogId": {
                      "description": "Идентификатор родительского каталога",
                      "type": "integer",
                      "format": "int32"
                  },
                  "globalId": {
                      "description": "Глобальный идентификатор объекта корневого или вложенного каталога, для которого вернулась ошибка",
                      "type": "integer",
                      "format": "int64"
                  },
                  "parentGlobalId": {
                      "description": "Глобальный идентификатор родительского объекта",
                      "type": "integer",
                      "format": "int64"
                  },
                  "systemObjectId": {
                      "description": "Идентификатор объекта в системе-поставщике",
                      "type": "string"
                  },
                  "parentSystemObjectId": {
                      "description": "Идентификатор родительского объекта в системе-поставщике",
                      "type": "string"
                  },
                  "value": {
                      "description": "Значение атрибута",
                      "additionalProperties": {
                          "oneOf": [
                              {
                                  "type": "string"
                              },
                              {
                                  "type": "integer"
                              },
                              {
                                  "type": "number"
                              },
                              {
                                  "type": "boolean"
                              },
                              {
                                  "type": "array",
                                  "items": {
                                      "oneOf": [
                                          {
                                              "type": "string"
                                          },
                                          {
                                              "type": "integer"
                                          }
                                      ]
                                  }
                              }
                          ]
                      }
                  },
                  "text": {
                      "description": "Сообщение об ошибке",
                      "type": "string"
                  }
              },
              "required": [
                  "attrId",
                  "catalogAttrId",
                  "catalogAttrName",
                  "сatalogId",
                  "value",
                  "text"
              ]
          },
          "IncorrectDataProcessCatalogObjectResponse": {
              "description": "Ошибка ФЛК конструктора проверок при сохранении объекта",
              "type": "object",
              "properties": {
                  "packageName": {
                      "description": "Название пакета, в котором произошла ошибка.\nНе указывается для корневого пакета конструктора.",
                      "type": "string"
                  },
                  "text": {
                      "description": "Сообщение об ошибке",
                      "type": "string"
                  }
              },
              "required": [
                  "text"
              ]
          },
          "IncorrectGeodataCatalogObjectResponse": {
              "description": "Ошибки соответсвия геоданных настройкам карты и правилам первичной валидации.",
              "type": "object",
              "properties": {
                  "text": {
                      "description": "Сообщение об ошибке в геоданных объекта",
                      "type": "string"
                  }
              }
          },
          "EditProperties": {
              "description": "Свойства редактирования каталога для карточки объекта",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "catalogProperties": {
                      "description": "Свойства редактирования объектов каталога",
                      "type": "object",
                      "properties": {
                          "catalogStatus": {
                              "$ref": "catalogs.yaml#/components/schemas/FillingCatalogObjectsStatusTagIdEnum"
                          },
                          "hasGeo": {
                              "description": "Признак наличия геопривязки в каталоге. \nЕсли принимает значение true, то при открытии карточки объекта необходимо дополнительно получить настройки карты каталога.",
                              "type": "boolean"
                          },
                          "isCopyObjects": {
                              "description": "Признак \"Возможно копирование объектов\"",
                              "type": "boolean"
                          },
                          "isDeleteAllObjects": {
                              "description": "Признак \"Возможно одновременное удаление всех объектов\"",
                              "type": "boolean"
                          },
                          "isBlockEditObjectsGUI": {
                              "description": "Признак \"Заблокировать редактирование данных (веб)\"",
                              "type": "boolean"
                          }
                      },
                      "required": [
                          "catalogStatus",
                          "hasGeo",
                          "isCopyObjects",
                          "isDeleteAllObjects",
                          "isBlockEditObjectsGUI"
                      ]
                  },
                  "dictionaryProperties": {
                      "type": "array",
                      "items": {
                          "$ref": "dictionaries.yaml#/components/schemas/DictionaryListItem"
                      }
                  }
              },
              "required": [
                  "catalogProperties",
                  "dictionaryProperties"
              ]
          },
          "PublicationObjectStatusTagIdEnum": {
              "description": "Техническое наименование статуса объекта каталога публикации",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "active",
                          "deleted"
                      ]
                  }
              ]
          },
          "PublicationObjectStatusNameEnum": {
              "description": "Наименование статуса объекта каталога публикации",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "PublicationObjectStatus": {
              "description": "Статус объекта каталога публикации",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "id": {
                      "description": "Идентификатор статуса",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "$ref": "#/components/schemas/PublicationObjectStatusNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/PublicationObjectStatusTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ],
              "example": {
                  "id": 1,
                  "name": "Активный",
                  "tagId": "active"
              }
          },
          "PublicationObjectListColumnTypeTagIdEnum": {
              "description": "Тип столбца, показывает, какой тип информации передается в столбце списка объектов каталога публикации\n\n`technical` - техническая информация\n\n`attribute` - атрибут каталога",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "technical",
                          "attribute"
                      ]
                  }
              ]
          },
          "ChildPublicationObjectListItem": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonPublicationObjectListItem"
                  },
                  {
                      "$ref": "catalogObjects.yaml#/components/schemas/CommonChildObjectListItem"
                  }
              ],
              "description": "Информация о объекте, выводимая в списке объектов вложенного каталога в каталог публикации",
              "type": "object",
              "readOnly": true
          },
          "CommonPublicationObjectListItem": {
              "allOf": [
                  {
                      "$ref": "catalogObjects.yaml#/components/schemas/CommonObjectListItem"
                  }
              ],
              "description": "Общая информация об объекте в списке объектов каталога публикации",
              "type": "object",
              "readOnly": true
          },
          "PublicationObjectListItem": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonPublicationObjectListItem"
                  }
              ],
              "description": "Информация об объекте, выводимая в списке объектов каталога публикации",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "publicationStatus": {
                      "$ref": "#/components/schemas/PublicationObjectStatus"
                  },
                  "publDate": {
                      "description": "Дата публикации",
                      "type": "string",
                      "format": "date"
                  },
                  "hasGeoObj": {
                      "description": "Признак наличия геоданных в объекте. Указывается только в каталогах, где включено наличие геопривязки.",
                      "type": "boolean"
                  },
                  "geodata": {
                      "description": "Свойство `properties` для объектов публикации не используется.",
                      "$ref": "geodata.yaml#/components/schemas/PublicationObjectGeodata"
                  }
              },
              "required": [
                  "publicationStatus",
                  "publDate"
              ]
          },
          "PublicationNestedCatalogObject": {
              "type": "object",
              "description": "Объект вложенного каталога публикации.",
              "properties": {
                  "globalId": {
                      "description": "Глобальный идентификатор объекта",
                      "type": "integer"
                  },
                  "systemObjectId": {
                      "description": "Идентификатор объекта в системе-поставщике",
                      "type": "string"
                  },
                  "parentSystemObjectId": {
                      "description": "Идентификатор родительского объекта в системе-поставщике",
                      "type": "string"
                  },
                  "parentGlobalId": {
                      "description": "Глобальный идентификатор родительского объекта",
                      "type": "integer"
                  },
                  "rootGlobalId": {
                      "description": "Идентификатор глобального объекта",
                      "type": "integer"
                  },
                  "catalogId": {
                      "description": "Идентификатор каталога",
                      "type": "integer"
                  },
                  "parentCatalogId": {
                      "description": "Идентификатор родительского каталога",
                      "type": "integer"
                  },
                  "rootCatalogId": {
                      "description": "Идентификатор корневого каталога",
                      "type": "integer"
                  },
                  "data": {
                      "description": "Массив атрибутов и их значений в рамках одного объекта",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/PublicationCatalogObjectDataItem"
                      },
                      "minItems": 1
                  }
              },
              "required": [
                  "catalogId",
                  "parentCatalogId",
                  "rootCatalogId",
                  "data"
              ]
          },
          "PublicationNestedCatalogObjectVerbose": {
              "type": "object",
              "description": "Объект вложенного каталога публикации с расширенной схемой для справочных и ссылочных атрибутов.",
              "readOnly": true,
              "properties": {
                  "globalId": {
                      "description": "Глобальный идентификатор объекта",
                      "type": "integer"
                  },
                  "systemObjectId": {
                      "description": "Идентификатор объекта в системе-поставщике",
                      "type": "string"
                  },
                  "parentSystemObjectId": {
                      "description": "Идентификатор родительского объекта в системе-поставщике",
                      "type": "string"
                  },
                  "parentGlobalId": {
                      "description": "Глобальный идентификатор родительского объекта",
                      "type": "integer"
                  },
                  "rootGlobalId": {
                      "description": "Идентификатор глобального объекта",
                      "type": "integer"
                  },
                  "catalogId": {
                      "description": "Идентификатор каталога",
                      "type": "integer"
                  },
                  "parentCatalogId": {
                      "description": "Идентификатор родительского каталога",
                      "type": "integer"
                  },
                  "rootCatalogId": {
                      "description": "Идентификатор корневого каталога",
                      "type": "integer"
                  },
                  "data": {
                      "description": "Массив атрибутов и их значений в рамках одного объекта",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/PublicationCatalogObjectDataItemVerbose"
                      },
                      "minItems": 1
                  }
              },
              "required": [
                  "globalId",
                  "parentGlobalId",
                  "rootGlobalId",
                  "catalogId",
                  "parentCatalogId",
                  "rootCatalogId",
                  "data"
              ]
          },
          "PublicationCatalogObjectDataItem": {
              "description": "Значение атрибута объекта.",
              "type": "object",
              "properties": {
                  "attrId": {
                      "description": "Идентификатор атрибута",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalogAttrId": {
                      "description": "Идентификатор атрибута каталога",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "value": {
                      "description": "Значение атрибута, передаваемое при сохранении или чтении, если verbose=false.\nДля типов данных справочник, ссылка на объект, файл, таблица значение **всегда** передаётся в массиве, независимо от установленного свойства isMultiple на атрибуте.",
                      "oneOf": [
                          {
                              "description": "Зачение атрибута типа строка",
                              "type": "string"
                          },
                          {
                              "description": "Зачение атрибута типа целое число",
                              "type": "integer"
                          },
                          {
                              "description": "Зачение атрибута типа дробное число",
                              "type": "number"
                          },
                          {
                              "description": "Зачение атрибута типа флаг",
                              "type": "boolean"
                          },
                          {
                              "description": "Зачение атрибута типа дата (без времени) в формате dd.MM.YYYY",
                              "type": "string",
                              "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3})$"
                          },
                          {
                              "description": "Зачение атрибута типа дата (со временем) в формате dd.MM.YYYY hh:mm:ss",
                              "type": "string",
                              "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3}) ([0-1]\\d|2[0-4])(:[0-5]\\d){2}$"
                          },
                          {
                              "description": "Значение атрибута типа файл, в массиве передается uuid файла, загруженного на файловый сервер",
                              "type": "array",
                              "items": {
                                  "type": "string"
                              }
                          },
                          {
                              "description": "Зачение атрибута типа справочник, в массиве передается id элемента справочника",
                              "type": "array",
                              "items": {
                                  "type": "string"
                              }
                          },
                          {
                              "description": "Зачение атрибута типа ссылка, в массиве передается gloabl_id объекта, на который ссылается объект",
                              "type": "array",
                              "items": {
                                  "type": "integer"
                              }
                          },
                          {
                              "description": "Зачение атрибута типа таблица",
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/PublicationNestedCatalogObject"
                              }
                          }
                      ]
                  }
              },
              "required": [
                  "attrId"
              ]
          },
          "PublicationCatalogObjectDataItemVerbose": {
              "description": "Значение атрибута объекта.",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "attrId": {
                      "description": "Идентификатор атрибута",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalogAttrId": {
                      "description": "Идентификатор атрибута каталога",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "value": {
                      "description": "Значение атрибута, передаваемое при сохранении или чтении, если verbose=true.\nДля типов данных справочник, ссылка на объект, файл, таблица значение **всегда** передаётся в массиве, независимо от установленного свойства isMultiple на атрибуте.",
                      "oneOf": [
                          {
                              "description": "Зачение атрибута типа строка",
                              "type": "string"
                          },
                          {
                              "description": "Зачение атрибута типа целое число",
                              "type": "integer"
                          },
                          {
                              "description": "Зачение атрибута типа дробное число",
                              "type": "number"
                          },
                          {
                              "description": "Зачение атрибута типа флаг",
                              "type": "boolean"
                          },
                          {
                              "description": "Зачение атрибута типа дата (без времени) в формате dd.MM.YYYY",
                              "type": "string",
                              "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3})$"
                          },
                          {
                              "description": "Зачение атрибута типа дата (со временем) в формате dd.MM.YYYY hh:mm:ss",
                              "type": "string",
                              "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3}) ([0-1]\\d|2[0-4])(:[0-5]\\d){2}$"
                          },
                          {
                              "description": "Зачение атрибута типа файл, в массиве передается id файла, загруженного на файловый сервер",
                              "type": "array",
                              "items": {
                                  "type": "integer"
                              }
                          },
                          {
                              "description": "Зачение атрибута типа справочник",
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "properties": {
                                      "dictElementId": {
                                          "description": "Идентификатор элемента справочника",
                                          "type": "string"
                                      },
                                      "value": {
                                          "description": "Значение элемента справочника из столбца, выбранного в каталоге для отображения",
                                          "type": "string"
                                      }
                                  }
                              }
                          },
                          {
                              "description": "Зачение атрибута типа ссылка",
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "properties": {
                                      "globalId": {
                                          "description": "Глобальный идентификатор объекта, записанного в значении ссылочного атрибута",
                                          "type": "integer",
                                          "format": "int64"
                                      },
                                      "value": {
                                          "description": "Значение главного атрибута объекта, записанного в значении ссылочного атрибута",
                                          "type": "string"
                                      }
                                  }
                              }
                          },
                          {
                              "description": "Зачение атрибута типа таблица",
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/PublicationNestedCatalogObjectVerbose"
                              }
                          }
                      ]
                  }
              },
              "required": [
                  "attrId"
              ]
          },
          "PublicationCatalogObject": {
              "description": "Объект каталога публикации.\n\nДля публикации не требуются дополнительные свойства для геоданных объекта.",
              "type": "object",
              "properties": {
                  "catalogId": {
                      "description": "Идентификатор каталога",
                      "type": "integer"
                  },
                  "globalId": {
                      "description": "Глобальный идентификатор объекта, назначенный в рамках ГИС ЕХД",
                      "type": "integer"
                  },
                  "systemObjectId": {
                      "description": "Идентификатор объекта в системе-поставщике",
                      "type": "string"
                  },
                  "data": {
                      "description": "Массив атрибутов и их значений в рамках одного объекта",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/PublicationCatalogObjectDataItem"
                      },
                      "minItems": 1
                  },
                  "geodata": {
                      "description": "Свойство `properties` для объектов публикации не используется.",
                      "$ref": "geodata.yaml#/components/schemas/PublicationObjectGeodata"
                  }
              },
              "required": [
                  "catalogId",
                  "data"
              ]
          },
          "PublicationCatalogObjectVerbose": {
              "description": "Объект каталога публикации с расширенной схемой для справочных и ссылочных атрибутов.\n\nДля публикации не требуются дополнительные свойства для геоданных объекта.",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "catalogId": {
                      "description": "Идентификатор каталога",
                      "type": "integer"
                  },
                  "globalId": {
                      "description": "Глобальный идентификатор объекта, назначенный в рамках ГИС ЕХД",
                      "type": "integer"
                  },
                  "systemObjectId": {
                      "description": "Идентификатор объекта в системе-поставщике",
                      "type": "string"
                  },
                  "data": {
                      "description": "Массив атрибутов и их значений в рамках одного объекта",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/PublicationCatalogObjectDataItemVerbose"
                      },
                      "minItems": 1
                  },
                  "geodata": {
                      "$ref": "geodata.yaml#/components/schemas/PublicationObjectGeodata"
                  }
              },
              "required": [
                  "catalogId",
                  "globalId",
                  "data"
              ]
          },
          "ImportFile": {
              "description": "Данные файла и параметры для обработки файла",
              "type": "object",
              "properties": {
                  "catalogId": {
                      "description": "Идентификатор каталога для импорта",
                      "type": "integer",
                      "format": "int32"
                  },
                  "file": {
                      "type": "string",
                      "format": "binary",
                      "description": "Файл с содержимым"
                  },
                  "encoding": {
                      "description": "Кодировка",
                      "type": "string",
                      "enum": [
                          "UTF-8",
                          "WINDOWS-1251",
                          "MACCYRILLIC",
                          "KOI8-R"
                      ]
                  },
                  "separator": {
                      "description": "Разделитель",
                      "type": "string"
                  },
                  "textLimiter": {
                      "description": "Ограничитель текста",
                      "type": "string"
                  }
              },
              "required": [
                  "catalogId",
                  "file",
                  "encoding",
                  "separator",
                  "textLimiter"
              ]
          },
          "ProcessedFileInfo": {
              "description": "Информация после обработки файла",
              "type": "object",
              "properties": {
                  "fileId": {
                      "description": "Идентификатор файла (uuid)",
                      "type": "string"
                  },
                  "fileColumns": {
                      "description": "Массив колонок файла",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/FileColumn"
                      }
                  }
              },
              "required": [
                  "fileId",
                  "fileColumns"
              ]
          },
          "FileColumn": {
              "description": "Информация о колонке файла",
              "type": "object",
              "properties": {
                  "fileColumnName": {
                      "description": "Наименование колонки файла (пользовательское)",
                      "type": "string"
                  },
                  "fileColumnTechName": {
                      "description": "Техническое наименование колонки файла, задается на бэке. Нужно, чтобы оперировать данными внутри методов/функций",
                      "type": "string"
                  }
              },
              "required": [
                  "fileColumnName",
                  "fileColumnTechName"
              ]
          },
          "ImportInfo": {
              "description": "Данные импорта",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор импорта",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "name": {
                      "description": "Наименование загрузки",
                      "type": "string"
                  },
                  "catalogId": {
                      "description": "Идентификатор каталога для импорта",
                      "type": "integer",
                      "format": "int32"
                  },
                  "encoding": {
                      "description": "Кодировка",
                      "type": "string",
                      "enum": [
                          "UTF-8",
                          "WINDOWS-1251",
                          "MACCYRILLIC",
                          "KOI8-R"
                      ]
                  },
                  "separator": {
                      "description": "Разделитель",
                      "type": "string"
                  },
                  "textLimiter": {
                      "description": "Ограничитель текста",
                      "type": "string"
                  },
                  "preparatoryDeletion": {
                      "description": "Предварительное удаление записей",
                      "type": "boolean",
                      "default": false
                  },
                  "deleteOutdated": {
                      "description": "Удалить неактуальные записи",
                      "type": "boolean",
                      "default": false
                  },
                  "catalogFileId": {
                      "description": "Идентификатор файла (uuid) для импорта в каталог",
                      "type": "string"
                  },
                  "catalogFileName": {
                      "description": "Наименование файла для импорта в каталог",
                      "type": "string",
                      "readOnly": true
                  },
                  "catalogFileArchiveId": {
                      "description": "Идентификатор файла (uuid) архива для импорта данных в атрибуты с типом \"Файл\"",
                      "type": "string"
                  },
                  "catalogFileArchiveName": {
                      "description": "Наименование файла архива для импорта данных в атрибуты с типом \"Файл\"",
                      "type": "string",
                      "readOnly": true
                  },
                  "columnsMatching": {
                      "description": "Сопоставление колонок файла с атрибутами каталога",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/ColumnAttrMatchItem"
                      }
                  },
                  "childCatalogImportInfo": {
                      "description": "Информация об импорте для вложенных атрибутов каталога",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/ChildCatalogImportInfoItem"
                      }
                  }
              },
              "required": [
                  "id",
                  "name",
                  "catalogId",
                  "encoding",
                  "separator",
                  "textLimiter",
                  "catalogFileId",
                  "catalogFileName",
                  "columnsMatching"
              ]
          },
          "ColumnAttrMatchItem": {
              "description": "Сопоставление колонки файла с атрибутом каталога",
              "type": "object",
              "properties": {
                  "fileColumnName": {
                      "description": "Наименование колонки файла, является уникальным идентификатором",
                      "type": "string"
                  },
                  "fileColumnTechName": {
                      "description": "Техническое наименование колонки файла, полученное из метода /imports/uploadCSV",
                      "type": "string"
                  },
                  "attributeId": {
                      "description": "Идентификатор атрибута каталога",
                      "type": "integer",
                      "format": "int32",
                      "writeOnly": true
                  },
                  "attributeTechName": {
                      "description": "Техническое наименование атрибута каталога",
                      "type": "string",
                      "readOnly": true
                  },
                  "dictAttributeTechName": {
                      "description": "Техническое наименование атрибута справочника. Заполняется только для справочных атрибутов",
                      "type": "string"
                  }
              },
              "required": [
                  "fileColumnName",
                  "fileColumnTechName",
                  "attributeId",
                  "attributeTechName"
              ]
          },
          "ChildCatalogImportInfoItem": {
              "description": "Информация об импорте для вложенного атрибута каталога",
              "type": "object",
              "properties": {
                  "childCatalogId": {
                      "description": "Идентификатор атрибута, содержащего вложенный каталог",
                      "type": "integer",
                      "format": "int32",
                      "writeOnly": true
                  },
                  "childCatalogName": {
                      "description": "Наименование атрибута, содержащего вложенный каталог",
                      "type": "string",
                      "readOnly": true
                  },
                  "childCatalogFileId": {
                      "description": "Идентификатор файла (uuid) для импорта вложенного каталога",
                      "type": "string"
                  },
                  "childCatalogFileName": {
                      "description": "Наименование файла для импорта вложенного каталога",
                      "type": "string",
                      "readOnly": true
                  },
                  "columnsMatching": {
                      "description": "Сопоставление колонок файла с атрибутами вложенного каталога",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/ColumnAttrMatchItem"
                      }
                  }
              },
              "required": [
                  "childCatalogId",
                  "childCatalogFileId",
                  "columnsMatching"
              ]
          },
          "CatalogImportHistoryItem": {
              "description": "Элемент истории импорта каталога заполнения",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "id": {
                      "description": "Идентификатор импорта каталога",
                      "type": "integer",
                      "format": "int32"
                  },
                  "importName": {
                      "description": "Наименование загрузки",
                      "type": "string"
                  },
                  "dateStart": {
                      "description": "Дата старта импорта каталога",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "dateEnd": {
                      "description": "Дата окончания импорта каталога",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "userName": {
                      "description": "ФИО пользователя, запустившего импорт",
                      "type": "string"
                  },
                  "countInWorkObj": {
                      "description": "Количество объектов, взятых в работу при запуске импорта",
                      "type": "integer"
                  },
                  "countImportedObj": {
                      "description": "Количество импортированных объектов (по окончании процесса импорта)",
                      "type": "integer"
                  },
                  "importLogFileId": {
                      "description": "Идентификатор файла лога",
                      "type": "string"
                  },
                  "status": {
                      "$ref": "#/components/schemas/CatalogImportHistoryStatus"
                  }
              },
              "required": [
                  "id",
                  "importName",
                  "dateStart",
                  "userName",
                  "status"
              ]
          },
          "CatalogImportHistoryStatus": {
              "description": "Статус импорта в истории импортов каталога заполнения",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "description": "Идентификатор статуса"
                  },
                  "name": {
                      "$ref": "#/components/schemas/ImportHistoryStatusNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/ImportHistoryStatusTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ],
              "example": {
                  "id": 1,
                  "name": "В работе",
                  "tagId": "inWork"
              }
          },
          "ImportHistoryStatusNameEnum": {
              "description": "Название статуса импорта в истории импортов каталога заполнения",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "ImportHistoryStatusTagIdEnum": {
              "description": "Технчиеское навзание статуса импорта в истории импортов каталога заполнения\n  - `new` - Новый, \n  - `inWork` - В работе, \n  - `errorQueue` - Ошибка отправки в брокер, \n  - `errorImport` - Ошибка в процессе импорта, \n  - `canceled` - Импорт отменен пользователем,\n  - `finished` - Импорт объектов завершен.",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "new",
                          "inWork",
                          "errorQueue",
                          "errorImport",
                          "canceled",
                          "finished"
                      ]
                  }
              ]
          },
          "CommonPushsubInfo": {
              "description": "Основная информация о подписке",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор подписки",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "url": {
                      "description": "Адрес веб-сервиса приема push-уведомлений",
                      "type": "string"
                  },
                  "pushType": {
                      "description": "Тип push-уведомления",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/PushsubTypeTagIdEnum"
                          }
                      ]
                  },
                  "status": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/PushsubStatus"
                          }
                      ],
                      "readOnly": true
                  }
              },
              "required": [
                  "url",
                  "pushType"
              ]
          },
          "PushsubListItem": {
              "description": "Информация о подписке в списке подписок",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonPushsubInfo"
                  }
              ],
              "properties": {
                  "systemName": {
                      "description": "Наименование системы-подписчика",
                      "type": "string",
                      "readOnly": true
                  },
                  "systemLogin": {
                      "description": "Логин (техническое наименование) системы-подписчика",
                      "type": "string",
                      "readOnly": true
                  }
              }
          },
          "Pushsub": {
              "description": "Информация о подписке",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonPushsubInfo"
                  }
              ],
              "properties": {
                  "systemId": {
                      "description": "Идентификатор системы",
                      "writeOnly": true,
                      "type": "integer"
                  },
                  "system": {
                      "allOf": [
                          {
                              "$ref": "systems.yaml#/components/schemas/CommonSystemInfo"
                          }
                      ],
                      "readOnly": true
                  },
                  "forAccum": {
                      "description": "Признак подписки на сборные каталоги",
                      "type": "boolean"
                  },
                  "needAuth": {
                      "description": "Требуется авторизация в сервисе приема push-уведомлений",
                      "type": "boolean"
                  },
                  "authLogin": {
                      "description": "Логин для авторизации в сервисе приема push-уведомлений при needAuth=true",
                      "type": "string"
                  },
                  "authPassword": {
                      "description": "Пароль для авторизации в сервисе приема push-уведомлений при needAuth=true",
                      "type": "string",
                      "writeOnly": true
                  },
                  "certId": {
                      "description": "Идентификатор (uuid) контейнера сертификата для подключения к сервису приема push-уведомлений",
                      "type": "string"
                  },
                  "certPassword": {
                      "description": "Парольная фраза сертификата",
                      "type": "string",
                      "writeOnly": true
                  },
                  "withGeo": {
                      "description": "Необходимость включать геоданные объекта в push-уведомление при их наличии у каталога",
                      "type": "boolean",
                      "default": false
                  },
                  "isWGS84": {
                      "description": "Необходимость передать геометрию в системе координат EPSG:4326 (WGS84). \nАктуально для подписок с каталогами, у которых геоданные хранятся в системе MSK 77. \n\nПо-умолчанию отправляется СК, выбранная на каталоге.",
                      "type": "boolean",
                      "default": false
                  }
              },
              "required": [
                  "systemId",
                  "needAuth"
              ]
          },
          "PushsubStatusTagIdEnum": {
              "description": "Статус подписки:\n  - `active` - Активна\n  - `inactive` - Неактивна\n  - `tmpBlocked` - Временно заблокирована",
              "type": "string",
              "enum": [
                  "inactive",
                  "active",
                  "tmpBlocked"
              ]
          },
          "PushsubStatusNameEnum": {
              "description": "Наименование статуса подписки",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "PushsubStatus": {
              "description": "Статус подписки",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор статуса подписки",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "$ref": "#/components/schemas/PushsubStatusNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/PushsubStatusTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ]
          },
          "PushsubTypeTagIdEnum": {
              "description": "Тип push-уведомления:\n  - `xml` - XML\n  - `json` - JSON",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "xml",
                          "json"
                      ]
                  }
              ]
          },
          "PushsubSubscriptionCatalogInfoListItem": {
              "description": "Информация о каталоге, добавленном в подписку",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                  }
              ],
              "properties": {
                  "isEnabled": {
                      "description": "Статуса подписки - `true` - подписка на каталог активна, - `false` - подписка на каталог не активна.",
                      "type": "boolean"
                  }
              },
              "required": [
                  "isEnabled"
              ]
          },
          "SecurityEventTypeTagIdEnum": {
              "description": "Техническое наименование типа события безопасности:\n  - `loginAttempt` - попытка входа\n  - `login` - вход в систему\n  - `logout` - выход из системы\n  - `passwordReset` - сброс пароля\n  - `sessionCancel` - системное преркащение сеанса\n  - `userCreate` - создание пользователя\n  - `userAccessChange` - изменение прав доступа пользователя\n  - `userBlock` - блокировка пользователя\n  - `userUnblock` - разблокировка пользователя\n  - `userDelete` - удаление пользователя\n  - `userRestore` - восстановление пользователя",
              "type": "string",
              "enum": [
                  "loginAttempt",
                  "login",
                  "logout",
                  "passwordReset",
                  "sessionCancel",
                  "userCreate",
                  "userAccessChange",
                  "userBlock",
                  "userUnblock",
                  "userDelete",
                  "userRestore"
              ]
          },
          "SecurityEventType": {
              "description": "Тип события безопасности",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор типа события безопасности",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "description": "Наименование типа события безопасности",
                      "type": "string"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/SecurityEventTypeTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ]
          },
          "SecurityEventListItem": {
              "description": "Элемент списка событий безопасности из лога",
              "type": "object",
              "properties": {
                  "userId": {
                      "description": "Идентификатор пользователя, связанного с событием безопасности",
                      "type": "integer"
                  },
                  "login": {
                      "description": "Логин пользователя, связанного с событием безопасности",
                      "type": "string"
                  },
                  "lastName": {
                      "description": "Фамилия пользователя, связанного с событием безопасности",
                      "type": "string"
                  },
                  "firstName": {
                      "description": "Имя пользователя, связанного с событием безопасности",
                      "type": "string"
                  },
                  "pathroName": {
                      "description": "Отчество пользователя, связанного с событием безопасности",
                      "type": "string"
                  },
                  "email": {
                      "description": "Email пользователя, связанного с событием безопасности",
                      "type": "string"
                  },
                  "eventDate": {
                      "description": "Дата и время события безопасности",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "eventTypeName": {
                      "description": "Наименование типа события безопасности",
                      "type": "string"
                  },
                  "isAdmin": {
                      "description": "Является ли пользователя администратором ЕХД",
                      "type": "boolean"
                  },
                  "changedUser": {
                      "description": "Информация об измененном пользователе.\nВозвращается для событий:\n  - `userCreate` - создание пользователя\n  - `userAccessChange` - изменение прав доступа пользователя\n  - `userBlock` - блокировка пользователя\n  - `userUnblock` - разблокировка пользователя\n  - `userDelete` - удаление пользователя\n  - `userRestore` - восстановление пользователя",
                      "type": "object",
                      "properties": {
                          "userId": {
                              "description": "Идентификатор пользователя",
                              "type": "integer"
                          },
                          "login": {
                              "description": "Логин пользователя",
                              "type": "string"
                          },
                          "lastName": {
                              "description": "Фамилия пользователя",
                              "type": "string"
                          },
                          "firstName": {
                              "description": "Имя пользователя",
                              "type": "string"
                          },
                          "pathroName": {
                              "description": "Отчество пользователя",
                              "type": "string"
                          },
                          "email": {
                              "description": "Email пользователя",
                              "type": "string"
                          }
                      }
                  },
                  "accessChanges": {
                      "description": "Изменения прав учетной записи пользователя, указанного в `changedUser`.\nВозвращается для события `userAccessChange` - изменение прав доступа пользователя.",
                      "type": "object",
                      "properties": {
                          "userGroup": {
                              "description": "Изменение группы пользователя",
                              "type": "object",
                              "properties": {
                                  "oldGroup": {
                                      "description": "Наименование старой группы пользователя",
                                      "type": "string"
                                  },
                                  "newGroup": {
                                      "description": "Наименование новой группы пользователя",
                                      "type": "string"
                                  }
                              }
                          },
                          "userRole": {
                              "description": "Изменение роли пользователя",
                              "type": "object",
                              "properties": {
                                  "oldRole": {
                                      "description": "Наименование старой роли пользователя",
                                      "type": "string"
                                  },
                                  "newRole": {
                                      "description": "Наименование новой роли пользователя",
                                      "type": "string"
                                  }
                              }
                          },
                          "menu": {
                              "description": "Изменение пунктов меню",
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "properties": {
                                      "changeType": {
                                          "description": "Наименование изменения:\n  - Добавление\n  - Удаление",
                                          "type": "string"
                                      },
                                      "menuItem": {
                                          "description": "Наименование пункта меню",
                                          "type": "string"
                                      }
                                  }
                              }
                          },
                          "specroles": {
                              "description": "Изменение специальных привилегий",
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "properties": {
                                      "changeType": {
                                          "description": "Наименование изменения:\n  - Добавление\n  - Удаление\n  - Изменение",
                                          "type": "string"
                                      },
                                      "fillingCatalog": {
                                          "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                                      },
                                      "publicationCatalog": {
                                          "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                                      },
                                      "catalogGroup": {
                                          "$ref": "catalogGroups.yaml#/components/schemas/CommonCatalogGroupInfo"
                                      },
                                      "oldRole": {
                                          "description": "Наименование старой роли пользователя",
                                          "type": "string"
                                      },
                                      "newRole": {
                                          "description": "Наименование новой роли пользователя",
                                          "type": "string"
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "AuthUrl": {
              "description": "url-адрес",
              "type": "string",
              "readOnly": true,
              "example": "https://ehd-tools-test.mos.ru/keycloak/admin/master/console/#/master/authentication/policies"
          },
          "SessionListItem": {
              "description": "Информация о сеансе пользователя",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "users.yaml#/components/schemas/CommonUserInfo"
                  }
              ],
              "properties": {
                  "accessJwtId": {
                      "description": "Идентификатор токена доступа",
                      "type": "string"
                  },
                  "panel": {
                      "description": "Кабинет (пользователя/администратора)",
                      "oneOf": [
                          {
                              "type": "string",
                              "enum": [
                                  "admin",
                                  "user"
                              ]
                          }
                      ]
                  },
                  "dateLogin": {
                      "description": "Дата и время входа",
                      "type": "string",
                      "pattern": "/^(?:\\d{4})-(?:\\d{2})-(?:\\d{2})T(?:\\d{2}):(?:\\d{2}):(?:\\d{2}(?:\\.\\d*)?)(?:(?:-(?:\\d{2}):(?:\\d{2})|Z)?)$/"
                  },
                  "ip": {
                      "description": "IP-адрес пользователя",
                      "type": "string"
                  }
              },
              "required": [
                  "accessJwtId"
              ]
          },
          "TokenResponse": {
              "description": "Access и refresh-токены доступа пользователя",
              "type": "object",
              "properties": {
                  "accessToken": {
                      "description": "JWT-токен",
                      "type": "string",
                      "readOnly": true,
                      "example": "dkgpkpoi0495094irdkgdk45445"
                  },
                  "refreshToken": {
                      "description": "JWT-токен",
                      "type": "string",
                      "readOnly": true,
                      "example": "ugughgfsghkokgcgfd654676kjnkhk"
                  }
              }
          },
          "DigitalSignatureValidationRequest": {
              "description": "Запрос к методу валидации электронной подписи.\n`json` используется при вызове метода внешнего REST API. `xml` - при вызове из SOAP API.",
              "properties": {
                  "json": {
                      "description": "Строка JSON-запроса.",
                      "type": "string"
                  },
                  "xml": {
                      "description": "Строка XML-запроса.",
                      "type": "string"
                  }
              }
          },
          "CheckResultTagIdEnum": {
              "description": "Техническое наименование статуса результата проверки",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "success",
                          "error"
                      ]
                  }
              ]
          },
          "SigningTypeNameEnum": {
              "description": "Название типа подписания информации каталога заполнения",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "SigningTypeTagIdEnum": {
              "description": "Техническое название типа подписания информации каталога заполнения:\n  - `allObjects` - подписание всех неподписанных объектов каталога, \n  - `selectedObjects` - подписание выбранных объектов каталога, \n  - `metadata` - подписание метаданных каталога, \n  - `confirmSign` - подписание отсутствия изменений в каталоге",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "allObjects",
                          "selectedObjects",
                          "metadata",
                          "confirmSign"
                      ]
                  }
              ]
          },
          "SigningHistoryStatusNameEnum": {
              "description": "Название статуса подписания в истории подписаний каталога заполнения",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "SigningHistoryStatusTagIdEnum": {
              "description": "Технчиеское навзание статуса подписания в истории подписаний каталога заполнения\n  - `inWork` - В работе, \n  - `finished` - Подписание каталога завершено, \n  - `error` - Ошибка подписания, \n  - `hashGen` - Формирование хэша подписи, \n  - `canceled` - Подписание отменено пользователем,\n  - `fillQueue` - Наполнение очереди объектов",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "inWork",
                          "finished",
                          "error",
                          "hashGen",
                          "canceled",
                          "fillQueue"
                      ]
                  }
              ]
          },
          "SignStatusNameEnum": {
              "description": "Название статуса подписания информации в каталоге заполнения",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "SignStatusTagIdEnum": {
              "description": "Технчиеское навзание статуса подписания информации каталога заполнения:\n  - `signed` - Подписанный, \n  - `unsigned` - Неподписанный, \n  - `expiredSigning` - Подписание просрочено ",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "signed",
                          "unsigned",
                          "expiredSigning"
                      ]
                  }
              ]
          },
          "SignObjectLogStatusNameEnum": {
              "description": "Название статуса объекта в логе подписания",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "SignObjectLogStatusTagIdEnum": {
              "description": "Техническое название статуса объекта в логе подписания:\n  - `canceled` - подписание отменено пользователем, \n  - `new` - ожидает обработки, \n  - `done` - готов, \n  - `ErrQueue` - ошибка отправки в брокер,\n  - `inWork` - в обработке,\n  - `ErrSub` - ошибки при подписании",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "canceled",
                          "new",
                          "done",
                          "ErrQueue",
                          "inWork",
                          "ErrSub"
                      ]
                  }
              ]
          },
          "SigningCheckResult": {
              "description": "Результат проверки возможности подписания информации в каталоге заполнения",
              "type": "object",
              "properties": {
                  "status": {
                      "$ref": "#/components/schemas/CheckResultTagIdEnum"
                  },
                  "signCheckId": {
                      "type": "integer",
                      "description": "Идентификатор блокировки, которая будет применяться к каталогу"
                  },
                  "message": {
                      "description": "Сообщения с результатом проверки",
                      "type": "object",
                      "properties": {
                          "isSigning": {
                              "type": "string"
                          },
                          "userRights": {
                              "type": "string"
                          },
                          "FLKErrors": {
                              "type": "string"
                          },
                          "responsiblePerson": {
                              "type": "string"
                          },
                          "description": {
                              "type": "string"
                          }
                      }
                  }
              },
              "required": [
                  "status"
              ]
          },
          "DigitalSignatureCertificate": {
              "description": "Информация о сертификате ЭЦП",
              "type": "object",
              "properties": {
                  "subjectName": {
                      "description": "Информация о сертификате подписи",
                      "type": "string"
                  },
                  "issuerName": {
                      "description": "Информация о том, кто выпустил сертификат",
                      "type": "string"
                  },
                  "validFromDate": {
                      "description": "Дата начала валидации подписи",
                      "type": "string",
                      "format": "date"
                  },
                  "validToDate": {
                      "description": "Дата окончания валидации подписи",
                      "type": "string",
                      "format": "date"
                  },
                  "serialNumber": {
                      "description": "Серийный номер",
                      "type": "string"
                  },
                  "publicKey": {
                      "description": "Публичный ключ",
                      "type": "string"
                  }
              },
              "required": [
                  "subjectName",
                  "issuerName",
                  "validFromDate",
                  "validToDate",
                  "serialNumber",
                  "publicKey"
              ]
          },
          "DigitalSignatureInfo": {
              "description": "Данные подписания ЭЦП.",
              "type": "object",
              "properties": {
                  "unsignedHash": {
                      "description": "Неподписанный хэш от бэкенда",
                      "type": "string"
                  },
                  "signedHash": {
                      "description": "Подписанный хэш от КриптоПро",
                      "type": "string"
                  },
                  "certificateObject": {
                      "$ref": "#/components/schemas/DigitalSignatureCertificate"
                  }
              },
              "required": [
                  "unsignedHash",
                  "signedHash",
                  "certificateObject"
              ]
          },
          "SigningHash": {
              "description": "Общий хэш подписания объектов или метаданных каталога заполнения",
              "type": "object",
              "properties": {
                  "signatureId": {
                      "description": "Идентификатор процесса подписания",
                      "type": "integer",
                      "format": "int32"
                  },
                  "hash": {
                      "description": "Хэш подписания",
                      "type": "string"
                  }
              },
              "required": [
                  "signatureId",
                  "hash"
              ]
          },
          "CatalogHistorySignStatus": {
              "description": "Статус подписания информации в истории подписаний каталога заполнения",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "description": "Идентификатор статуса"
                  },
                  "name": {
                      "$ref": "#/components/schemas/SigningHistoryStatusNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/SigningHistoryStatusTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ],
              "example": {
                  "id": 0,
                  "name": "В работе",
                  "tagId": "inWork"
              }
          },
          "SignStatus": {
              "description": "Статус подписания информации в каталоге заполнения",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "description": "Идентификатор статуса"
                  },
                  "name": {
                      "$ref": "#/components/schemas/SignStatusNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/SignStatusTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ],
              "example": {
                  "id": 1,
                  "name": "Подписанный",
                  "tagId": "signed"
              }
          },
          "CatalogHistorySignType": {
              "description": "Тип подписания в истории каталога заполнения",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "description": "Идентификатор типа"
                  },
                  "name": {
                      "$ref": "#/components/schemas/SigningTypeNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/SigningTypeTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ],
              "example": {
                  "id": 3,
                  "name": "подписание метаданных каталога",
                  "tagId": "metadata"
              }
          },
          "SignObjectLogStatus": {
              "description": "Статус объектов в логе подписания",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "description": "Идентификатор типа"
                  },
                  "name": {
                      "$ref": "#/components/schemas/SignObjectLogStatusNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/SignObjectLogStatusTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ],
              "example": {
                  "id": 3,
                  "name": "в обработке",
                  "tagId": "inWork"
              }
          },
          "CatalogSignHistoryItem": {
              "description": "Элемент истории подписаний каталога заполнения",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "id": {
                      "description": "Идентификатор подписания каталога заполнения",
                      "type": "integer",
                      "format": "int32"
                  },
                  "dateStart": {
                      "type": "string",
                      "format": "date",
                      "description": "Дата начала подписания каталога заполнения"
                  },
                  "dateEnd": {
                      "type": "string",
                      "format": "date",
                      "description": "Дата окончания подписания каталога заполнения"
                  },
                  "signingType": {
                      "$ref": "#/components/schemas/SigningTypeTagIdEnum"
                  },
                  "userName": {
                      "description": "ФИО пользователя, запустившего подписание",
                      "type": "string"
                  },
                  "countInWorkObj": {
                      "type": "integer",
                      "description": "Количество объектов, взятых в работу при запуске процесса подписания"
                  },
                  "countSignedObj": {
                      "type": "integer",
                      "description": "Количество подписанных объектов (по окончании процесса подписания)"
                  },
                  "countAllObj": {
                      "type": "integer",
                      "description": "Общее количество объектов каталога заполнения"
                  },
                  "signLog": {
                      "type": "string",
                      "description": "Ссылка на файл лога"
                  },
                  "status": {
                      "$ref": "#/components/schemas/CatalogHistorySignStatus"
                  }
              },
              "required": [
                  "id",
                  "dateStart",
                  "signingType",
                  "userName",
                  "status"
              ]
          },
          "CatalogLastSigningInfo": {
              "description": "Информация о последнем подписании информации каталога заполнения",
              "type": "object",
              "properties": {
                  "date": {
                      "description": "Дата последнего подписания объектов каталога или подписания отсутствия изменений в объектах",
                      "type": "string",
                      "format": "date"
                  },
                  "subjectName": {
                      "description": "ФИО владельца сертификата или краткое наименование системы",
                      "type": "string"
                  },
                  "signingType": {
                      "$ref": "#/components/schemas/SigningTypeTagIdEnum"
                  }
              },
              "required": [
                  "date",
                  "subjectName",
                  "signingType"
              ]
          },
          "CatalogSigningInfo": {
              "description": "Информация о подписании объектов и метаданных каталога заполнения",
              "type": "object",
              "properties": {
                  "lastSign": {
                      "$ref": "#/components/schemas/CatalogLastSigningInfo"
                  },
                  "dateNextUpdate": {
                      "description": "Рассчитанная дата следующего обновления каталога, исходя из последней подписи/обновления и периодичности обновления",
                      "type": "string",
                      "format": "date"
                  },
                  "statusSignObjects": {
                      "$ref": "catalogs.yaml#/components/schemas/FillingCatalogObjectsStatusTagIdEnum"
                  },
                  "statusSignMetadata": {
                      "$ref": "catalogs.yaml#/components/schemas/FillingCatalogMetadataStatusTagIdEnum"
                  },
                  "countUnsignedObjects": {
                      "description": "Количество неподписанных объектов, оставшихся после последнего подписания",
                      "type": "integer"
                  },
                  "countActiveObjects": {
                      "description": "Количество активных объектов в каталоге",
                      "type": "integer"
                  }
              },
              "required": [
                  "lastSign",
                  "dateNextUpdate",
                  "statusSignObjects",
                  "statusSignMetadata",
                  "countUnsignedObjects",
                  "countActiveObjects"
              ]
          },
          "CatalogObjectsSignatureInfo": {
              "description": "Информация о подписываемых объектах каталога заполнения",
              "type": "object",
              "properties": {
                  "digitalSignatureParams": {
                      "$ref": "#/components/schemas/DigitalSignatureInfo"
                  },
                  "signatureId": {
                      "description": "Идентификатор подписания каталога, полученный на этапе формирования хэша.",
                      "type": "integer"
                  },
                  "catalogId": {
                      "description": "Идентификатор каталога заполнения",
                      "type": "integer",
                      "format": "int32"
                  },
                  "objectBatches": {
                      "description": "Массив подписываемых объектов, объединенных по статусам объектов.\n\nВсего может быть отправлено на подписание не более 500 объектов.",
                      "type": "array",
                      "maxItems": 6,
                      "items": {
                          "type": "object",
                          "properties": {
                              "status": {
                                  "$ref": "catalogObjects.yaml#/components/schemas/ObjectStatusTagIdEnum"
                              },
                              "objectIds": {
                                  "description": "Глобальные идентификаторы подписываемых объектов",
                                  "type": "array",
                                  "items": {
                                      "type": "integer",
                                      "format": "int32"
                                  },
                                  "maxItems": 500
                              }
                          },
                          "required": [
                              "status",
                              "objectIds"
                          ]
                      }
                  },
                  "dateOpen": {
                      "description": "Дата открытия страницы. Используется для проверки, что объекты не были изменены другим пользователем перед подписанием",
                      "type": "string",
                      "format": "date"
                  }
              },
              "required": [
                  "digitalSignatureParams",
                  "signatureId",
                  "catalogId",
                  "objectBatches",
                  "dateOpen"
              ]
          },
          "File": {
              "description": "Данные файла",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор файла",
                      "type": "integer",
                      "readOnly": true
                  },
                  "uuid": {
                      "description": "Идентификатор uuid файла",
                      "type": "string",
                      "readOnly": true
                  },
                  "file": {
                      "type": "string",
                      "format": "binary",
                      "description": "Файл с содержимым",
                      "writeOnly": true
                  },
                  "name": {
                      "description": "Имя файла (без расширения)",
                      "type": "string",
                      "readOnly": true
                  },
                  "extension": {
                      "description": "Расширение файла, включая точку",
                      "type": "string",
                      "readOnly": true
                  },
                  "fileProcessType": {
                      "$ref": "#/components/schemas/FileTypeTagIdEnum"
                  },
                  "size": {
                      "description": "Размер файла",
                      "type": "string",
                      "readOnly": true
                  },
                  "mimeType": {
                      "description": "Тип файла, формат MIME-типа",
                      "type": "string",
                      "readOnly": true
                  },
                  "catalogId": {
                      "description": "Идентификатор каталога, к которому привязывается файл",
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "required": [
                  "id",
                  "uuid",
                  "file",
                  "name",
                  "extension",
                  "fileProcessType",
                  "size",
                  "mimeType"
              ]
          },
          "FileTypeTagIdEnum": {
              "description": "Техническое название типа файла:\n  - `import` - файл импорта, \n  - `export` - файл экспорта, \n  - `catalog-object` - файл объекта каталога, \n  - `soap-api` - файл SOAP API\n  - `background` - файл фоновой проверки\n  - `thematic-category` - файл иконки тематической категории\n  - `cert-subscription` - файл сертификата подписки на push уведомления\n  - `accum-catalog` - файл выгрузки для сборного каталога\n  - `dictionary-export` - файл экспорта справочника",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "import",
                          "export",
                          "catalog-object",
                          "soap-api",
                          "background",
                          "thematic-category",
                          "cert-subscription",
                          "accum-catalog",
                          "dictionary-export"
                      ]
                  }
              ]
          },
          "FileText": {
              "type": "object",
              "properties": {
                  "name": {
                      "description": "Название файла.",
                      "type": "string"
                  },
                  "extension": {
                      "description": "Расширение файла, включая точку",
                      "type": "string",
                      "enum": [
                          ".txt",
                          ".toml"
                      ]
                  },
                  "content": {
                      "description": "Текстовые данные, которые необходимо записать в файл.",
                      "type": "string"
                  }
              },
              "required": [
                  "name",
                  "extension",
                  "content"
              ]
          },
          "fileUuidArray": {
              "description": "Массив uuid файлов",
              "type": "object",
              "properties": {
                  "uuids": {
                      "description": "Массив uuid",
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  }
              },
              "required": [
                  "uuids"
              ]
          },
          "FileCreatedResponse": {
              "description": "Ответ на запрос при создании файла",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "id": {
                      "description": "Идентифкатор файла (uuid)",
                      "type": "string"
                  },
                  "code": {
                      "enum": [
                          201
                      ]
                  },
                  "messageType": {
                      "enum": [
                          "Created"
                      ]
                  },
                  "message": {
                      "description": "Текст ответа",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "code",
                  "messageType",
                  "message"
              ]
          },
          "PublicationReasonTagIdEnum": {
              "description": "Техническое наименование причины публикации объектов:\n  - `isSign` - Подписание;\n  - `isPublConditionsCh` - Перепубликация при изменении условий ограничения выборки;\n  - `isTruncate` - Техническое удаление объекта со всеми версиями в БД публикации;\n  - `isNsiCh` - Перепубликация при изменении элементов справочника.",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "isSign",
                          "isPublConditionsCh",
                          "isTruncate",
                          "isNsiCh"
                      ]
                  }
              ]
          },
          "CatalogPublicationQueueInfo": {
              "description": "Информация о каталоге в очереди публикации",
              "readOnly": true,
              "type": "object",
              "properties": {
                  "catalogId": {
                      "description": "Идентификатор каталога",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalogName": {
                      "description": "Наименование каталога",
                      "type": "string"
                  },
                  "priority": {
                      "$ref": "publicationCatalogs.yaml#/components/schemas/PublicationCatalogPriority"
                  },
                  "newCnt": {
                      "description": "Количество объектов каталога, ожидающих обработки",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                  },
                  "inWorkCnt": {
                      "description": "Количество объектов каталога, находящихся в обработке",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                  },
                  "publishedCnt": {
                      "description": "Количество успешно опубликованных (в первый раз) объектов каталога",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                  },
                  "updatedCnt": {
                      "description": "Количество успешно обновленных в публикации объектов каталога",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                  },
                  "deletedCnt": {
                      "description": "Количество успешно удаленных из публикации объектов каталога",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                  },
                  "restoredCnt": {
                      "description": "Количество успешно восстановленных в публикации объектов каталога",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                  },
                  "passedCnt": {
                      "description": "Количество успешно обработанных объектов каталога, которые не были удалены или изменены в БД публикации",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                  },
                  "errorCnt": {
                      "description": "Количество объектов каталога, не обработанных из-за ошибок",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0
                  }
              },
              "required": [
                  "catalogId",
                  "catalogName",
                  "priority",
                  "newCnt",
                  "inWorkCnt",
                  "publishedCnt",
                  "updatedCnt",
                  "deletedCnt",
                  "restoredCnt",
                  "passedCnt",
                  "errorCnt"
              ]
          },
          "CommonLockInfo": {
              "description": "Общая информация о блокировке",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор блокировки",
                      "type": "integer",
                      "readOnly": true
                  },
                  "catalogId": {
                      "description": "Идентификатор каталога, на который установлена блокировка",
                      "type": "integer"
                  },
                  "catalogName": {
                      "description": "Наименование каталога, на который установлена блокировка",
                      "type": "string",
                      "readOnly": true
                  },
                  "lockType": {
                      "readOnly": true,
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/LockType"
                          }
                      ]
                  },
                  "lockTypeTagId": {
                      "writeOnly": true,
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/LockTypeTagIdEnum"
                          }
                      ]
                  },
                  "userId": {
                      "description": "Идентификатор пользователя, установившего блокировку",
                      "type": "integer"
                  },
                  "userLogin": {
                      "description": "Логин пользователя, установившего блокировку",
                      "type": "string",
                      "readOnly": true
                  },
                  "systemId": {
                      "description": "Идентификатор системы, установившей блокировку",
                      "type": "integer"
                  },
                  "systemLogin": {
                      "description": "Логин системы, установившей блокировку",
                      "type": "string",
                      "readOnly": true
                  },
                  "dateTimeCreated": {
                      "description": "Дата старта блокировки каталога",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ],
                      "readOnly": true
                  },
                  "dateTimeExpired": {
                      "description": "Дата снятия блокировки каталога по истечению времени жизни",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ],
                      "readOnly": true
                  },
                  "lifeTime": {
                      "description": "Время жизни блокировки в миллисекундах",
                      "type": "integer"
                  }
              },
              "required": [
                  "id",
                  "catalogId",
                  "lockType",
                  "lockTypeTagId"
              ]
          },
          "LockListItem": {
              "description": "Информация о блокировке в списке блокировок",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonLockInfo"
                  }
              ]
          },
          "Lock": {
              "description": "Блокировка",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonLockInfo"
                  }
              ],
              "properties": {
                  "lifeTime": {
                      "description": "Время жизни блокировки в миллисекундах",
                      "type": "integer",
                      "minimum": 0
                  }
              },
              "required": [
                  "lifeTime"
              ]
          },
          "LockTypeTagIdEnum": {
              "description": "Тип блокировки:\n  - `signatures` - Подписание\n  - `imports` - Импорт\n  - `backgroundChecks` - Фоновые проверки каталогов\n  - `exports` - Экспорт каталога заполнения",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "signatures",
                          "imports",
                          "backgroundChecks",
                          "exports"
                      ]
                  }
              ]
          },
          "LockTypeNameEnum": {
              "description": "Наименование типа блокировки",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "LockType": {
              "description": "Тип блокировки",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор типа блокировки",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "$ref": "#/components/schemas/LockTypeNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/LockTypeTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ]
          },
          "LockCatalogInfo": {
              "description": "Информация о каталоге, на который наложена блокировка.",
              "type": "object",
              "readOnly": true,
              "allOf": [
                  {
                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                  }
              ]
          },
          "FillingExportTypeTagIdEnum": {
              "description": "Техническое наименование типа файла экспорта",
              "type": "string",
              "enum": [
                  "csv"
              ]
          },
          "ExportAttributesList": {
              "description": "Массив идентификаторов атрибутов - attrId, включаемых в файл экспорта. Допускается передача только корневых атрибутов каталога",
              "type": "array",
              "items": {
                  "type": "integer"
              },
              "minItems": 1,
              "example": [
                  -1,
                  4212,
                  47296,
                  23426
              ]
          },
          "ExportSettings": {
              "description": "Настройки, применённые к экспорту",
              "type": "object",
              "properties": {
                  "name": {
                      "description": "Наименование архива экспорта. Сервис формирует название экспорта на основе идентификатора каталога и даты старта. Формат названия описан в вики.",
                      "type": "string"
                  },
                  "type": {
                      "$ref": "#/components/schemas/FillingExportTypeTagIdEnum"
                  },
                  "fileId": {
                      "type": "string",
                      "description": "Идентификатор (uuid) файла экспорта в файловом хранилище"
                  },
                  "onlyRootCatalog": {
                      "description": "Признак, что был получен экспорт только с данными корневого каталога",
                      "type": "boolean"
                  },
                  "objectStatuses": {
                      "description": "Статусы объекта, которые учитывались при формировании файла экспорта",
                      "type": "array",
                      "items": {
                          "$ref": "catalogObjects.yaml#/components/schemas/ObjectStatus"
                      }
                  },
                  "filters": {
                      "description": "Фильтры по атрибутам каталога, которые были применены к выборке объектов в файле экспорта.",
                      "type": "array",
                      "items": {
                          "$ref": "catalogObjects.yaml#/components/schemas/RootCatalogObjectListFilter"
                      }
                  },
                  "sortings": {
                      "description": "Сортировки по атрибутам каталога, которые были применены к выборке объектов в файле экспорта.",
                      "type": "array",
                      "items": {
                          "$ref": "_common.yaml#/components/schemas/Sorting"
                      }
                  },
                  "attributes": {
                      "$ref": "#/components/schemas/ExportAttributesList"
                  },
                  "fetchGeodata": {
                      "description": "Признак, указывающий на включение в экспорт каталога заполнения геоданных объектов в заданной системе координат.\nДоступны следующие варианты:\n  - `признак не передаётся` - объекты возвращаются без геоданных,\n  - `EPSG:4326` - геоданные объекта возвращаются в системе координат WGS84,\n  - `default` - геоданные объекта возвращаются в системе координт, заданной настройками каталога.",
                      "type": "string",
                      "enum": [
                          "EPSG:4326",
                          "default"
                      ]
                  }
              },
              "required": [
                  "name",
                  "type",
                  "fileId"
              ]
          },
          "PublicExportTypeTagIdEnum": {
              "description": "Техническое наименование типа файла экспорта",
              "type": "string",
              "enum": [
                  "csv",
                  "xlsx",
                  "json",
                  "xml"
              ]
          },
          "PublicExportFilter": {
              "description": "Объект расширенного фильтра для запросов с фильтрацией по столбцам таблиц",
              "type": "object",
              "properties": {
                  "attribute": {
                      "$ref": "_common.yaml#/components/schemas/FilterSortingAttribute"
                  },
                  "operator": {
                      "description": "Оператор фильтрации:\n  - `empty` - выводить только пустые значения. Доступен для всех типов данных.\n  Для данного оператора не передаётся поле `value`.\n  - `notEmpty` - выводить только непустые значения. Доступен для всех типов данных.\n  Для данного оператора не передаётся поле `value`.\n  - `contains` - содержит переданное значение. Является регистронезависимым. Используется для строковых, справочных и ссылочных атрибутов.\n  Для справочных и ссылочных атрибутов сравнение идет по атрибуту, выбранному для связи в данном каталоге.\n  - `inEnum` - перечисление. Выводятся записи, атрибут которых имеет значение, совпадающее с одним из введенных в перечисление.\n  Сравнение не зависит от регистра строковых значений. Работает со всеми типами данных кроме типов Флаг, Файл, Таблица и Справочник.\n  Значения передаются через точку с запятой `;`.\n  - `equals` - равно переданному значению или совпадает с переданным значением (в случае сравнения строк). Является регистронезависимым. Используется для любых типов кроме типов Файл и Таблица.\n  Для справочных и ссылочных атрибутов сравнение идет по атрибуту, выбранному для связи в данном каталоге.\n  - `greaterThan` - больше, чем переданное значение. Используется для сравнения чисел и дат.\n  - `greaterOrEqualsThan` - больше или равно переданному значению. Используется для сравнения чисел и дат.\n  - `lessThan` - меньше, чем переданное значение. Используется для сравнения чисел и дат.\n  - `lessOrEqualsThan` - меньше или равно переданному значению. Используется для сравнения чисел и дат.\n  - `startsWith` - начинается с переданного значения. Используется для строковых, справочных и ссылочных атрибутов.\n  Для справочных и ссылочных атрибутов сравнение идет по атрибуту, выбранному для связи в данном каталоге.\n  - `endsWith` - заканчивается на переданное значение. Используется для строковых, справочных и ссылочных атрибутов.\n  Для справочных и ссылочных атрибутов сравнение идет по атрибуту, выбранному для связи в данном каталоге.\n  - `matchesRegexStr` - соответствует регулярному выражению, переданному в виде строки. Используется для строковых, справочных и ссылочных атрибутов.\n  Для справочных и ссылочных атрибутов сравнение идет по атрибуту, выбранному для связи в данном каталоге.\n  - `matchesRegexId` - соответствует одному из регулярных выражений, хранящихся в системе. Используется для строковых, справочных и ссылочных атрибутов.\n  Для справочных и ссылочных атрибутов сравнение идет по атрибуту, выбранному для связи в данном каталоге.\n  В `value` передается идентификатор регулярного выражения.\n  - `inDict` - перечисление по справочнику. Выводятся записи, в значении которых выбраны все элементы справочника, что и в выбранном множестве для фильтарции. Используется для справочниых атрибутов.\n  В `value` передается список идентификаторов элементов справочника.",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/FilterOperatorTagIdEnum"
                          }
                      ]
                  },
                  "value": {
                      "description": "Значение для сравнения со значением атрибута при применении оператора",
                      "oneOf": [
                          {
                              "type": "string"
                          },
                          {
                              "type": "integer"
                          },
                          {
                              "type": "number"
                          },
                          {
                              "type": "array",
                              "items": {
                                  "type": "integer"
                              }
                          }
                      ]
                  }
              },
              "required": [
                  "attribute",
                  "operator"
              ],
              "example": {
                  "attribute": "field_4212",
                  "operator": "greaterThan",
                  "value": "01.02.2024 15:25:05"
              }
          },
          "PublicExportSorting": {
              "description": "Объект сортировки, для запросов с многоуровневой сортировкой по таблице",
              "type": "object",
              "properties": {
                  "attribute": {
                      "description": "Техническое название атрибута (столбца), по которому производится сортировка.",
                      "type": "string"
                  },
                  "order": {
                      "$ref": "_common.yaml#/components/schemas/SortingOrderTagIdEnum"
                  }
              },
              "required": [
                  "attribute",
                  "order"
              ],
              "example": {
                  "attribute": "field_4212",
                  "order": "desc"
              }
          },
          "PublicExportHistoryItem": {
              "description": "Элемент истории экспортов каталога публикации",
              "allOf": [
                  {
                      "$ref": "exports.yaml#/components/schemas/ExportHistoryItem"
                  }
              ],
              "type": "object",
              "properties": {
                  "systemId": {
                      "description": "Идентификатор системы, запустившей экспорт",
                      "type": "integer",
                      "format": "int32"
                  },
                  "systemName": {
                      "description": "Краткое наименование системы, запустившей экспорт",
                      "type": "string"
                  },
                  "dataEpoch": {
                      "description": "Дата, на которую брался срез данных каталога.",
                      "oneOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateFormat"
                          },
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  }
              },
              "required": [
                  "id",
                  "name",
                  "dateStart",
                  "status",
                  "type",
                  "hasSettings"
              ]
          },
          "PublicExportSettings": {
              "description": "Настройки, применённые к экспорту",
              "type": "object",
              "properties": {
                  "name": {
                      "description": "Наименование архива экспорта. Сервис формирует название экспорта на основе идентификатора каталога и даты, на которую берётся срез данных(epoch) . Формат названия описан в вики.",
                      "type": "string"
                  },
                  "type": {
                      "$ref": "#/components/schemas/PublicExportTypeTagIdEnum"
                  },
                  "fileId": {
                      "type": "string",
                      "description": "Идентификатор файла экспорта в файловом хранилище (uuid)"
                  },
                  "onlyRootCatalog": {
                      "description": "Признак, что был получен экспорт только с данными корневого каталога",
                      "type": "boolean"
                  },
                  "objectStatuses": {
                      "description": "Статусы объектов, примененные к файлу экспорта",
                      "type": "array",
                      "items": {
                          "$ref": "publicationObjects.yaml#/components/schemas/PublicationObjectStatus"
                      }
                  },
                  "filters": {
                      "description": "Фильтры по атрибутам каталога, которые были применены к выборке объектов в файле экспорта.",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/PublicExportFilter"
                      }
                  },
                  "sortings": {
                      "description": "Сортировки по атрибутам каталога, которые были применены к выборке объектов в файле экспорта.",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/PublicExportSorting"
                      }
                  },
                  "attributes": {
                      "$ref": "exports.yaml#/components/schemas/ExportAttributesList"
                  },
                  "fetchGeodata": {
                      "description": "Признак, указывающий на включение в экспорт каталога публикации геоданных объектов.\nВ каталоге публикации геоданные возвращаются в системе координат WGS84.",
                      "type": "boolean"
                  }
              },
              "required": [
                  "name",
                  "type",
                  "fileId"
              ]
          },
          "CatalogObjectResponseActionTagIdEnum": {
              "description": "Тип действия с объектом, к которому относится возвращаемый ответ:\n  - `save` - сохранение без подписания;\n  - `subscribe` - сохранение с подписанием объекта;\n  - `deleted` - удаление объекта (возвращается для новых объектов при физическом удалении из системы).",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "save",
                          "subscribe",
                          "delete"
                      ]
                  }
              ]
          },
          "CatalogAttribute": {
              "description": "Атрибут каталога заполнения",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "catalogs.yaml#/components/schemas/FillingCatalogAttribute"
                  }
              ],
              "properties": {
                  "isManualInput": {
                      "description": "Возможен ли ручной ввод атрибута. Описывается в блоке \"Автозаполнение\"",
                      "type": "boolean"
                  }
              },
              "required": [
                  "isManualInput"
              ]
          },
          "CatalogCount": {
              "description": "Количество объектов каталога заполнения",
              "type": "object",
              "properties": {
                  "countActiveObjects": {
                      "description": "Количество подписанных неудаленных объектов каталога",
                      "type": "integer"
                  },
                  "countDelObjects": {
                      "description": "Количество удаленных объектов каталога",
                      "type": "integer"
                  },
                  "countUnsignedObjects": {
                      "description": "Количество неподписанных объектов каталога",
                      "type": "integer"
                  },
                  "countError": {
                      "description": "Количество объектов каталога с ошибками",
                      "type": "integer"
                  },
                  "countGeoError": {
                      "description": "Количество объектов каталогас ошибками геоданных",
                      "type": "integer"
                  }
              },
              "required": [
                  "countActiveObjects",
                  "countDelObjects",
                  "countUnsignedObjects",
                  "countError",
                  "countGeoError"
              ]
          },
          "CommonCatalogObject": {
              "description": "Объект каталога. Общие поля.",
              "type": "object",
              "properties": {
                  "action": {
                      "allOf": [
                          {
                              "$ref": "catalogObjects.yaml#/components/schemas/CatalogObjectActionTagIdEnum"
                          }
                      ],
                      "writeOnly": true
                  },
                  "catalogId": {
                      "description": "Идентификатор каталога",
                      "type": "integer"
                  },
                  "globalId": {
                      "description": "Глобальный идентификатор объекта",
                      "type": "integer"
                  },
                  "systemObjectId": {
                      "description": "Идентификатор объекта в системе-поставщике",
                      "type": "string"
                  },
                  "data": {
                      "description": "Массив атрибутов и их значений в рамках одного объекта",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CatalogObjectDataItem"
                      },
                      "minItems": 1
                  }
              },
              "required": [
                  "action",
                  "catalogId",
                  "data"
              ]
          },
          "CatalogObject": {
              "description": "Объект каталога публикации",
              "type": "object",
              "properties": {
                  "system_object_id": {
                      "description": "Идентификатор объекта в системе-поставщике",
                      "type": "string"
                  },
                  "global_id": {
                      "description": "Глобальный идентификатор объекта",
                      "type": "integer",
                      "format": "int64"
                  },
                  "is_deleted": {
                      "description": "Статус объекта:\n  - 0 - активен\n  - 1 - удален",
                      "type": "integer",
                      "format": "int32",
                      "enum": [
                          0,
                          1
                      ]
                  },
                  "signature_date": {
                      "description": "Дата подписания объекта в формате dd.MM.YYYY hh:mm:ss",
                      "type": "string"
                  },
                  "geoData": {
                      "description": "Геометрия объекта.",
                      "oneOf": [
                          {
                              "$ref": "#/components/schemas/GeodataCollection"
                          },
                          {
                              "$ref": "#/components/schemas/SingleGeodata"
                          }
                      ]
                  },
                  "geodata_center": {
                      "description": "Центроид геометрии объекта. Координата [x,y].",
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                          "type": "number"
                      }
                  },
                  "geoarea": {
                      "description": "Площадь геометрии.",
                      "type": "integer",
                      "format": "number"
                  }
              },
              "additionalProperties": {
                  "description": "<*> = \"techName атрибута\"\n\nЗначения атрибутов объекта, возвращаются в JSON в виде пары ключ - значение.\nВозвращаются все атрибуты, кроме табличных.\nНезаполненные атрибуты имеют значение `null`.\nЗначения формируются по следующим правилам в зависимости от типа:\n  - Строка - значение возвращается с типом string;\n  - Целое число - значение возвращается с типом integer;\n  - Дробное число - значение возвращается с типом number;\n  - Дата - значение возвращается в виде строки с типом string;\n  - Флаг - возвращается в виде строки со значением \"да\"/\"нет\"/null;\n  - Файл - возвращается в виде массива строк со значениями uuid файлов, размещенных в ЕХД;\n  - Справочник - если атрибут множественный, то возвращается массив. Если атрибут не множественный, то возвращается строка или объект.\n    В зависимотсти от параметра `dictKeyMode` в запросе, ответ в виде:\n      - массива строк - содержит или массив значений элементов справочника, или массив идентификаторов элементов справочника\n      - массива объектов - содержит объекты с ключем (идентификатор) и значением элемента справочника.\n    В качестве строковых значений выступает атрибут справочника, выбранный в настройках атрибута каталога (Атрибут справочника для вывода);\n  - Ссылка - возвращается массив объектов с данными выбранных объектов-ссылок.\n    В данных объектов передаются `global_Id` - глобавльный идентификатор объекта из ссылочного каталога и `value` - значение атрибута ссылочного каталога, выбранного для показа в каталоге.\n    В качестве значения выступает главный атрибут ссылочного каталога.\n  - Таблица - возвращается в виде массива объектов, каждый из которых содержит вложенные значния атрибутов объекта, как и атрибут первого уровня.",
                  "oneOf": [
                      {
                          "type": "string",
                          "description": "Значение строкового атрибута"
                      },
                      {
                          "type": "integer",
                          "description": "Значение целочисленного атрибута"
                      },
                      {
                          "type": "number",
                          "description": "Значение атрибута с типом дробное число"
                      },
                      {
                          "type": "string",
                          "description": "Значение атрибута с типом дата в формате dd.MM.YYYY",
                          "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3})$"
                      },
                      {
                          "type": "string",
                          "description": "Значение атрибута с типом даты со временем в формате dd.MM.YYYY hh:mm:ss",
                          "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3}) ([0-1]\\d|2[0-4])(:[0-5]\\d){2}$"
                      },
                      {
                          "type": "string",
                          "description": "Значение атрибута с типом флаг"
                      },
                      {
                          "type": "array",
                          "description": "Значение файлового атрибута",
                          "items": {
                              "type": "string"
                          }
                      },
                      {
                          "type": "string",
                          "description": "Значение справочного атрибута, если в запросе параметр `dictKeyMode` равен `0` или `1`"
                      },
                      {
                          "type": "object",
                          "description": "Значение справочного атрибута, если в запросе параметр `dictKeyMode` равен `2`",
                          "properties": {
                              "key": {
                                  "type": "string"
                              },
                              "value": {
                                  "type": "string"
                              }
                          },
                          "required": [
                              "key",
                              "value"
                          ]
                      },
                      {
                          "type": "array",
                          "description": "Значение множественного справочного атрибута, если в запросе параметр `dictKeyMode` равен `0` или `1`",
                          "items": {
                              "type": "string"
                          }
                      },
                      {
                          "type": "array",
                          "description": "Значение множественного справочного атрибута, если в запросе параметр `dictKeyMode` равен `2`",
                          "items": {
                              "type": "object",
                              "properties": {
                                  "key": {
                                      "type": "string"
                                  },
                                  "value": {
                                      "type": "string"
                                  }
                              },
                              "required": [
                                  "key",
                                  "value"
                              ]
                          }
                      },
                      {
                          "type": "array",
                          "description": "Значение ссылочного атрибута",
                          "items": {
                              "type": "object",
                              "properties": {
                                  "global_id": {
                                      "description": "Глобальный идентификатор ссылочного объекта.",
                                      "type": "integer"
                                  },
                                  "value": {
                                      "description": "Значение атрибута выбранного объекта ссылочного каталога.",
                                      "oneOf": [
                                          {
                                              "type": "string"
                                          },
                                          {
                                              "type": "number"
                                          },
                                          {
                                              "type": "integer"
                                          }
                                      ]
                                  }
                              },
                              "required": [
                                  "global_id",
                                  "value"
                              ]
                          }
                      },
                      {
                          "type": "array",
                          "description": "Значение табличного атрибута",
                          "items": {
                              "$ref": "#/components/schemas/NestedCatalogObject"
                          }
                      }
                  ]
              },
              "required": [
                  "global_id",
                  "signature_date",
                  "system_object_id",
                  "is_deleted"
              ]
          },
          "RootCatalogObject": {
              "description": "Сохраняемый объект корневого каталога.\nВ зависимости от значения `action` определяется обязательность идентификаторов:\n  - `added` - **globalId** или **systemObjectId** необязательны\n  - `modified` - обязательные атрибуты - **globalId** или **systemObjectId**\n  - `deleted` - обязательные атрибуты - **globalId** или **systemObjectId**",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonCatalogObject"
                  }
              ],
              "properties": {
                  "geodata": {
                      "$ref": "geodata.yaml#/components/schemas/ObjectGeodata"
                  }
              }
          },
          "NestedCatalogObject": {
              "description": "Вложенный объект (значение табличного атрибута)",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CatalogObject"
                  }
              ],
              "properties": {
                  "global_object_id": {
                      "description": "Глобальный идентификтаор родительского объекта",
                      "type": "integer",
                      "format": "int64"
                  }
              },
              "required": [
                  "global_object_id"
              ]
          },
          "CatalogObjectDataItem": {
              "description": "Значение атрибута сохраняемого объекта.",
              "type": "object",
              "properties": {
                  "attrId": {
                      "description": "Идентификатор атрибута",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "catalogAttrId": {
                      "description": "Идентификатор атрибута каталога",
                      "type": "integer",
                      "format": "int32"
                  },
                  "isManualInput": {
                      "description": "Заполнен ли атрибут с использованием ручного ввода.\n`true` указывается только для тех атрибутов, которые сопоставляются со справочником в Автозаполнении. Для самих автозаполняемых указывается `false` (если они не используются для сопоставления со справочником в других блоках Автозаполнение).",
                      "type": "boolean"
                  },
                  "value": {
                      "description": "Значение атрибута.\nЗначение формируется по следующим правилам в зависимости от типа:\n  - Строка - передается значение типа string;\n  - Целое число - передается значение типа integer;\n  - Дробное число - передается значение типа number; \n  - Дата - передается значение типа string по маске\n    dd.MM.YYYY или DD.MM.YYYY HH:mm:ss\n    в зависимости от наличия метки времени в атрибуте;\n  - Флаг - передается значение типа boolean; \n  - Файл - передается значение в виде массива, содержащего объекты файла;\n  - Справочник - передается в виде массива, содержащего строки\n    со значениями атрибута справочника для связи,\n    выбранного в настройках справочного атрибута каталога (Атрибут для связи);\n  - Ссылка - передается в виде массива, содержащего строки\n    со значениями атрибута каталога для связи,\n    выбранного в настройках ссылочного атрибута каталога (Атрибут для связи);",
                      "oneOf": [
                          {
                              "type": "string",
                              "description": "Значение атрибута типа строка"
                          },
                          {
                              "type": "integer",
                              "description": "Значение атрибута типа целое число"
                          },
                          {
                              "type": "number",
                              "description": "Значение атрибута типа дробное число"
                          },
                          {
                              "type": "string",
                              "description": "Значение атрибута с типом дата в формате dd.MM.YYYY",
                              "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3})$"
                          },
                          {
                              "type": "string",
                              "description": "Значение атрибута с типом даты со временем в формате dd.MM.YYYY hh:mm:ss",
                              "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3}) ([0-1]\\d|2[0-4])(:[0-5]\\d){2}$"
                          },
                          {
                              "type": "boolean",
                              "description": "Значение атрибута типа флаг"
                          },
                          {
                              "type": "array",
                              "items": {
                                  "type": "string"
                              },
                              "description": "Значение атрибута типа справочник"
                          },
                          {
                              "type": "array",
                              "items": {
                                  "type": "string"
                              },
                              "description": "Значение атрибута типа ссылка"
                          },
                          {
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "description": "Объект файла, загружаемого в значение атрибута",
                                  "properties": {
                                      "name": {
                                          "type": "string",
                                          "description": "Название файла"
                                      },
                                      "extension": {
                                          "type": "string",
                                          "description": "Расширение файла"
                                      },
                                      "content": {
                                          "type": "string",
                                          "description": "Содержимое файла, закодированное в base64"
                                      }
                                  },
                                  "required": [
                                      "name",
                                      "extension",
                                      "content"
                                  ]
                              },
                              "description": "Значение атрибута типа файл"
                          }
                      ]
                  }
              }
          },
          "SignedCatalogObjectData": {
              "description": "Массив объектов каталога с подписью",
              "properties": {
                  "signatureInfo": {
                      "allOf": [
                          {
                              "$ref": "signatures.yaml#/components/schemas/DigitalSignatureInfo"
                          },
                          {
                              "properties": {
                                  "unsignedHash": {
                                      "description": "Хэш массива объектов, полученный по алгоритму ГОСТ 34.11"
                                  }
                              }
                          }
                      ]
                  },
                  "objectsData": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CatalogObject"
                      }
                  }
              }
          },
          "AsyncRequestStatus": {
              "properties": {
                  "status": {
                      "type": "string",
                      "enum": [
                          "new",
                          "inWork",
                          "errorQueue",
                          "errorProcessing",
                          "done"
                      ]
                  },
                  "message": {
                      "type": "string"
                  },
                  "response": {
                      "oneOf": [
                          {
                              "type": "array",
                              "items": {
                                  "anyOf": [
                                      {
                                          "$ref": "#/components/schemas/OkCatalogObjectResponse"
                                      },
                                      {
                                          "$ref": "#/components/schemas/IncorrectDataCatalogObjectResponse"
                                      }
                                  ]
                              }
                          },
                          {
                              "$ref": "_common.yaml#/components/schemas/BadRequestError"
                          }
                      ]
                  }
              },
              "required": [
                  "status",
                  "message"
              ]
          },
          "QueueAddedMessage": {
              "type": "object",
              "description": "Запрос успешно добавлен в очередь",
              "allOf": [
                  {
                      "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                  }
              ]
          },
          "ResponseStatusIdEnum": {
              "description": "Код статуса ответа:\n  - `0` - Успешный ответ;\n  - `1` - Некорректный метод;\n  - `2` - Ошибка синтаксиса;\n  - `3` - Каталог не найден;\n  - `4` - Нет доступа к каталогу\n  - `5` - Ошибка указания системы;\n  - `6` - Указанный каталог на проверке;\n  - `7` - Указанный каталог не опубликован;\n  - `8` - Ошибка ввода данных системы. Данная система неактивна;\n  - `9` - Ошибка введенных данных. Отсутствуют данные для сущности с указанным идентификатором;\n  - `999` - Необработанная ошибка;",
              "oneOf": [
                  {
                      "type": "integer",
                      "enum": [
                          0,
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          999
                      ]
                  }
              ]
          },
          "ResponseStatusNameEnum": {
              "description": "Наименование статуса ответа.",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "Success.",
                          "Invalid method input.",
                          "Query syntax error.",
                          "Catalog not found.",
                          "Unknown user system. У данной системы нет доступа к этому каталогу!",
                          "Access denied.",
                          "Catalog is currently ON CHECK and and not available.",
                          "Catalog is currently NOT PUBLISHED and not available.",
                          "System is not active. Данная система неактивна.",
                          "There is not data for the entity with the specified ID. Отсутствуют данные для сущности с указанным идентификатором.",
                          "An unhandled error occurred while executing the request."
                      ]
                  }
              ]
          },
          "CommonResponseInfo": {
              "description": "Общая часть ответа для методов rest api публикации (параметры status, message, response).",
              "properties": {
                  "status": {
                      "description": "Статус выполнения запроса.",
                      "$ref": "#/components/schemas/ResponseStatusIdEnum"
                  },
                  "message": {
                      "description": "Сообщение при возникновении ошибок.",
                      "$ref": "#/components/schemas/ResponseStatusNameEnum"
                  },
                  "response": {
                      "description": "Основная часть ответа по методу."
                  }
              },
              "required": [
                  "status",
                  "message",
                  "response"
              ]
          },
          "CommonFoundReturnedResponseInfo": {
              "description": "Общая часть ответа для методов rest api публикации (параметры found, returned).",
              "properties": {
                  "found": {
                      "description": "Общее количество найденных элементов соответствующих условиям запроса (без учёта offset и limit).",
                      "type": "integer",
                      "format": "int32"
                  },
                  "returned": {
                      "description": "Количество элементов в ответе с учетом ограничивающих параметров (offset и limit).",
                      "type": "string"
                  }
              },
              "required": [
                  "found",
                  "returned"
              ]
          },
          "CommonFiltersValidDateResponseInfo": {
              "description": "Общая часть ответа для методов rest api публикации (параметры filters, validDate).",
              "properties": {
                  "filters": {
                      "description": "Всегда пустой",
                      "type": "object"
                  },
                  "validDate": {
                      "description": "Всегда пустой",
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  }
              },
              "required": [
                  "filters",
                  "validDate"
              ]
          },
          "CatalogListRequest": {
              "description": "Схема запроса для метода /publrest/catalog/list (запрос спецификации каталогов публикации).",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Массив идентификатаров каталогов публикации",
                      "type": "array",
                      "items": {
                          "type": "integer"
                      }
                  },
                  "epoch": {
                      "description": "Дата, на которую структура данных была актуальна. По умолчанию - текущая дата.\nФормат даты - YYYY-MM-DD",
                      "type": "string"
                  },
                  "timestamp": {
                      "description": "Определяет формат даты в параметре 'epoch'.\n  - `0` - формат YYYY-MM-DD;\n  - `1` - формат YYYY-MM-DD'T'HH:mm:ss.SSSXXX.",
                      "type": "integer",
                      "format": "int32",
                      "enum": [
                          0,
                          1
                      ],
                      "default": 0
                  },
                  "offset": {
                      "description": "Смещение окна выдачи.\nПозиция (индекс), с которой необходимо возвращать элементы из БД (не меньше `0`).\nПо умолчанию `0`.",
                      "type": "integer",
                      "format": "int32",
                      "default": 0,
                      "minimum": 0
                  },
                  "limit": {
                      "description": "Допустимое количество объектов в ответе.",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1
                  },
                  "projection": {
                      "description": "Определяет поля отображаемые в ответе.",
                      "type": "object",
                      "properties": {
                          "root": {
                              "description": "Массив строк с наименованиями полей, относящихся к общей информации каталога публикации.\nЕсли необходимо выводить информацию об атрибутах каталога (массив `fields`), то `fields` необходимо прописать в параметр `root`.",
                              "type": "array",
                              "items": {
                                  "type": "string",
                                  "enum": [
                                      "id",
                                      "name",
                                      "nameEn",
                                      "technicalName",
                                      "shortName",
                                      "shortNameEn",
                                      "accountingObject",
                                      "accountingObjectEn",
                                      "keywords",
                                      "keywordsEn",
                                      "kind",
                                      "type",
                                      "period",
                                      "hasGeo",
                                      "categories",
                                      "categoriesEn",
                                      "layerId",
                                      "OIVs",
                                      "oiv",
                                      "oivEn",
                                      "oivList",
                                      "rn",
                                      "cnt",
                                      "archive",
                                      "hasEnVersion",
                                      "description",
                                      "descriptionEn",
                                      "defaultSort",
                                      "systems",
                                      "fieldsEa",
                                      "nameVariants",
                                      "systemFields",
                                      "version",
                                      "permittedSystems",
                                      "catalog_status_id",
                                      "details_opod",
                                      "responsiblePerson",
                                      "fields"
                                  ]
                              }
                          },
                          "fields": {
                              "description": "Массив строк с наименованиями полей, относящихся к информации об атрибутах каталога публикации.",
                              "type": "array",
                              "items": {
                                  "type": "string",
                                  "enum": [
                                      "id",
                                      "name",
                                      "enName",
                                      "techName",
                                      "columnId",
                                      "type",
                                      "typeName",
                                      "isPk",
                                      "maxLength",
                                      "dictionaryId",
                                      "dictColTehName",
                                      "catalogId",
                                      "isArray",
                                      "groupName",
                                      "rown",
                                      "systemField",
                                      "systems",
                                      "order",
                                      "permittedSystems",
                                      "permittedSystemNames",
                                      "isDefaultSystems",
                                      "hasTranslation",
                                      "isDefaultVision",
                                      "system",
                                      "specification"
                                  ]
                              }
                          }
                      }
                  }
              },
              "required": [
                  "id"
              ]
          },
          "CatalogListResponse": {
              "description": "Схема ответа для метода /publrest/catalog/list (спецификация каталога публикации).",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonResponseInfo"
                  },
                  {
                      "properties": {
                          "response": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/CatalogSpecification"
                              }
                          }
                      }
                  },
                  {
                      "$ref": "#/components/schemas/CommonFoundReturnedResponseInfo"
                  },
                  {
                      "$ref": "#/components/schemas/CommonFiltersValidDateResponseInfo"
                  }
              ]
          },
          "CoordinateXYForGeo": {
              "description": "Координата [x,y]",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                  "type": "number"
              }
          },
          "GeoJsonPoint": {
              "description": "Описание типа объекта \"Point\" (\"Точка\").",
              "type": "object",
              "properties": {
                  "coordinates": {
                      "$ref": "#/components/schemas/CoordinateXYForGeo"
                  },
                  "type": {
                      "description": "Тип геометрии",
                      "type": "string",
                      "enum": [
                          "Point"
                      ]
                  }
              }
          },
          "GeoJsonMultiPoint": {
              "description": "Описание типа объекта \"MulyiPoint\" (\"МультиТочка\").",
              "type": "object",
              "properties": {
                  "coordinates": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CoordinateXYForGeo"
                      }
                  },
                  "type": {
                      "description": "Тип геометрии",
                      "type": "string",
                      "enum": [
                          "MulyiPoint"
                      ]
                  }
              }
          },
          "GeoJsonPolygon": {
              "description": "Описание типа объекта \"Polygon\" (\"Полигон\").",
              "type": "object",
              "properties": {
                  "coordinates": {
                      "type": "array",
                      "items": {
                          "type": "array",
                          "items": {
                              "$ref": "#/components/schemas/CoordinateXYForGeo"
                          }
                      }
                  },
                  "type": {
                      "description": "Тип геометрии",
                      "type": "string",
                      "enum": [
                          "Polygon"
                      ]
                  }
              }
          },
          "GeoJsonMultiPolygon": {
              "description": "Описание типа объекта \"MultiPolygon\" (\"Мультиполигон\").",
              "type": "object",
              "properties": {
                  "coordinates": {
                      "type": "array",
                      "items": {
                          "type": "array",
                          "items": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/CoordinateXYForGeo"
                              }
                          }
                      }
                  },
                  "type": {
                      "description": "Тип геометрии",
                      "type": "string",
                      "enum": [
                          "MultiPolygon"
                      ]
                  }
              }
          },
          "GeoJsonMultiLineString": {
              "description": "Описание типа объекта \"MultiLineString\" (\"Мультилиния\"). Используется также для типа объекта \"Линия\".",
              "type": "object",
              "properties": {
                  "coordinates": {
                      "type": "array",
                      "items": {
                          "type": "array",
                          "items": {
                              "$ref": "#/components/schemas/CoordinateXYForGeo"
                          }
                      }
                  },
                  "type": {
                      "description": "Тип геометрии",
                      "type": "string",
                      "enum": [
                          "MultiLineString"
                      ]
                  }
              }
          },
          "CatalogGetRequest": {
              "description": "Схема запроса для метода /publrest/catalog/get (запрос содержимого каталога публикации).",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор каталога публикации",
                      "type": "integer",
                      "format": "int32"
                  },
                  "criteria": {
                      "description": "Условие для выборка элементов набора данных на языке запросов к ЕХД.\nДля параметра geoData используются функциях near и inside",
                      "type": "string"
                  },
                  "epoch": {
                      "description": "Дата, на которую структура данных была актуальна.\nФормат даты по умолчанию - YYYY-MM-DD.\nПо умолчанию - текущая дата.",
                      "type": "string"
                  },
                  "timestamp": {
                      "description": "Определяет формат даты в параметре 'epoch'.\n  - `0` - формат YYYY-MM-DD;\n  - `1` - формат YYYY-MM-DD'T'HH:mm:ss.SSSXXX.",
                      "type": "integer",
                      "format": "int32",
                      "enum": [
                          0,
                          1
                      ],
                      "default": 0
                  },
                  "offset": {
                      "description": "Смещение окна выдачи.\nПозиция (индекс), с которой необходимо возвращать элементы из БД (не меньше `0`).\nПо умолчанию `0`.",
                      "type": "integer",
                      "format": "int32",
                      "default": 0,
                      "minimum": 0
                  },
                  "limit": {
                      "description": "Допустимое количество объектов в ответе.",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1
                  },
                  "paging": {
                      "description": "Показывать количество элементов в наборе данных в параметрах `found`` и `returned``, удовлетворяющих критерию запроса.",
                      "type": "boolean",
                      "default": false
                  },
                  "sorting": {
                      "description": "Параметры сортировки.",
                      "type": "object",
                      "additionalProperties": {
                          "description": "<*> = \"techName атрибута\"\n\nПередаются в JSON в виде пары ключ - значение, где ключ записывается в формате \"techName атрибута\".\nЗначение это наименование сортировки:\n  asc – по возрастанию;\n  desc – по убыванию.",
                          "oneOf": [
                              {
                                  "type": "string",
                                  "enum": [
                                      "asc",
                                      "desc"
                                  ]
                              }
                          ]
                      }
                  },
                  "translate": {
                      "description": "Управление выдачей переводов полей.\n  - false – выдаются русскоязычные поля\n  - true – выдача англоязычных полей\n  - null – выдаются обе версии",
                      "type": "boolean",
                      "default": null
                  },
                  "includeDeleted": {
                      "description": "Учитывать ли в выборке удаленные объекты.",
                      "type": "boolean",
                      "default": false
                  },
                  "dictKeyMode": {
                      "description": "Формат отображения значений справочников.\n  - `0` - отображение значения;\n  - `1` - отображения ключа;\n  - `2` - отображение ключа и значения",
                      "type": "integer",
                      "format": "int32",
                      "enum": [
                          0,
                          1,
                          2
                      ],
                      "default": 0
                  },
                  "fieldChanged": {
                      "description": "Выбрать только те объекты, атрибут `name` которых менялся в заданном периоде времени",
                      "type": "object",
                      "properties": {
                          "name": {
                              "description": "Название атрибута",
                              "type": "string"
                          },
                          "fromDate": {
                              "description": "Дата начала периода",
                              "type": "string"
                          },
                          "untilDate": {
                              "description": "Дата конца периода",
                              "type": "string"
                          }
                      }
                  },
                  "fetchGeodata": {
                      "description": "Выдавать геолокационную информацию для объекта, если такая имеется.",
                      "type": "boolean",
                      "default": false
                  },
                  "fetchGeodataCenter": {
                      "description": "Получить центральную точку геометрии.",
                      "type": "boolean",
                      "default": false
                  },
                  "geoData": {
                      "description": "Используется для описания переменных и их значений, которые в последствии будут использованы при составлении условий с геоданными.\nКоординаты точки или полигона указываются в формате GeoJSON.",
                      "type": "object",
                      "additionalProperties": {
                          "description": "<*> = \"имя переменной\"",
                          "type": "object",
                          "oneOf": [
                              {
                                  "$ref": "#/components/schemas/GeoJsonPoint"
                              },
                              {
                                  "$ref": "#/components/schemas/GeoJsonMultiPoint"
                              },
                              {
                                  "$ref": "#/components/schemas/GeoJsonPolygon"
                              },
                              {
                                  "$ref": "#/components/schemas/GeoJsonMultiPolygon"
                              },
                              {
                                  "$ref": "#/components/schemas/GeoJsonMultiLineString"
                              }
                          ],
                          "required": [
                              "coordinates",
                              "type"
                          ],
                          "example": "{\n  \"p1\": {\n      \"type\": \"Point\",\n      \"coordinates\": [37.0, 55.0]     \n  },\n  \"p2\": { \"type\": \"Polygon\",\n      \"coordinates\": [[[37.24528231, 55.51001841], [37.85777010, 55.55674992], [37.86875643, 55.90237586], [37.29472079, 55.90546176], [37.24528231, 55.51001841]]]     }\n}"
                      }
                  },
                  "projection": {
                      "description": "Список полей, которые будут выдаваться в составе объектов набора данных.\nПоля вложенных объектов разделяются через \".\".\nЕсли список пуст или параметр не указан в запросе выдаются все поля.",
                      "type": "array",
                      "items": {
                          "type": "string"
                      },
                      "example": [
                          "global_id",
                          "Register.Code",
                          "system_object_id"
                      ]
                  },
                  "useAntiProjection": {
                      "description": "При установке в значение `true`, параметр `projection` будет интерпретироваться как список полей, которые надо исключить из выдачи.",
                      "type": "boolean",
                      "default": false
                  }
              },
              "required": [
                  "id"
              ]
          },
          "CatalogGetResponse": {
              "description": "Схема ответа для метода /publrest/catalog/get (запрос содержимого каталога).",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonResponseInfo"
                  },
                  {
                      "properties": {
                          "response": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/CatalogObject"
                              }
                          }
                      }
                  },
                  {
                      "$ref": "#/components/schemas/CommonFiltersValidDateResponseInfo"
                  }
              ]
          },
          "CatalogGetResponsePaging": {
              "description": "Схема ответа для метода /publrest/catalog/get (запрос содержимого каталога) при наличии параемтра Paging=true.",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CatalogGetResponse"
                  },
                  {
                      "$ref": "#/components/schemas/CommonFoundReturnedResponseInfo"
                  }
              ]
          },
          "CatalogGetFeaturesResponse": {
              "description": "Схема ответа для метода /publrest/catalog/get/features (запрос содержимого каталога публикации в формате GeoJSON).",
              "type": "object",
              "properties": {
                  "features": {
                      "type": "array",
                      "items": {
                          "anyOf": [
                              {
                                  "$ref": "#/components/schemas/GeodataCollectionFeatures"
                              },
                              {
                                  "$ref": "#/components/schemas/SingleGeodataFeatures"
                              }
                          ]
                      }
                  }
              }
          },
          "GeodataCollection": {
              "type": "object",
              "description": "Геометрия объекта каталога публикации в формате GeoJSON,\nесли у объекта несколько геометрий (точка и линия, точка и линия и полигон и т.д.).",
              "properties": {
                  "geometry": {
                      "type": "object",
                      "properties": {
                          "geometries": {
                              "type": "array",
                              "items": {
                                  "anyOf": [
                                      {
                                          "$ref": "#/components/schemas/GeoJsonPoint"
                                      },
                                      {
                                          "$ref": "#/components/schemas/GeoJsonMultiPoint"
                                      },
                                      {
                                          "$ref": "#/components/schemas/GeoJsonPolygon"
                                      },
                                      {
                                          "$ref": "#/components/schemas/GeoJsonMultiPolygon"
                                      },
                                      {
                                          "$ref": "#/components/schemas/GeoJsonMultiLineString"
                                      }
                                  ]
                              }
                          },
                          "type": {
                              "type": "string",
                              "enum": [
                                  "GeometryCollection"
                              ]
                          }
                      }
                  },
                  "type": {
                      "type": "string",
                      "enum": [
                          "Feature"
                      ]
                  }
              }
          },
          "GeodataCollectionFeatures": {
              "type": "object",
              "description": "Объект каталога публикации в формате GeoJSON,\nесли у объекта несколько геометрий (точка и линия, точка и линия и полигон и т.д.).",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/GeodataCollection"
                  }
              ],
              "properties": {
                  "properties": {
                      "description": "Значения атрибутов объекта каталога публикации (без геометрии)",
                      "type": "object",
                      "properties": {
                          "Attributes": {
                              "$ref": "#/components/schemas/CatalogObject"
                          }
                      }
                  }
              }
          },
          "SingleGeodata": {
              "type": "object",
              "description": "Геометрия объекта каталога публикации в формате GeoJSON,\nесли у объекта только одна геометрия (или точка или мультиточка или т.д.).",
              "properties": {
                  "geometry": {
                      "oneOf": [
                          {
                              "$ref": "#/components/schemas/GeoJsonPoint"
                          },
                          {
                              "$ref": "#/components/schemas/GeoJsonMultiPoint"
                          },
                          {
                              "$ref": "#/components/schemas/GeoJsonPolygon"
                          },
                          {
                              "$ref": "#/components/schemas/GeoJsonMultiPolygon"
                          },
                          {
                              "$ref": "#/components/schemas/GeoJsonMultiLineString"
                          }
                      ]
                  },
                  "type": {
                      "type": "string",
                      "enum": [
                          "Feature"
                      ]
                  }
              }
          },
          "SingleGeodataFeatures": {
              "type": "object",
              "description": "Объект каталога публикации в формате GeoJSON,\nесли у объекта только одна геометрия (или точка или мультиточка или полигон или линия).",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/SingleGeodata"
                  }
              ],
              "properties": {
                  "properties": {
                      "description": "Значения атрибутов объекта каталога публикации (без геометрии)",
                      "type": "object",
                      "properties": {
                          "Attributes": {
                              "$ref": "#/components/schemas/CatalogObject"
                          }
                      }
                  }
              }
          },
          "CatalogChangesRequest": {
              "description": "Схема запроса для метода /publrest/catalog/changes (запрос измененных объектов).",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор каталога публикации",
                      "type": "integer",
                      "format": "int32"
                  },
                  "from": {
                      "description": "Дата начала периода изменений. Формат: YYYY-MM-DD или YYYY-MM-DD hh:mm:ss",
                      "oneOf": [
                          {
                              "pattern": "(19|20)\\d\\d-((0[1-9]|1[012])-(0[1-9]|[12]\\d)|(0[13-9]|1[012])-30|(0[13578]|1[02])-31)",
                              "type": "string"
                          },
                          {
                              "pattern": "^([1-2]\\d{3})-(0[1-9]|1[0-2])-(0[1-9]|[1-2]\\d|3[0-1]) ([0-1]\\d|2[0-4])(:[0-5]\\d){2}$",
                              "type": "string"
                          }
                      ]
                  },
                  "until": {
                      "description": "Дата окончания периода изменений (не включается). Формат: YYYY-MM-DD или YYYY-MM-DD hh:mm:ss",
                      "oneOf": [
                          {
                              "pattern": "(19|20)\\d\\d-((0[1-9]|1[012])-(0[1-9]|[12]\\d)|(0[13-9]|1[012])-30|(0[13578]|1[02])-31)",
                              "type": "string"
                          },
                          {
                              "pattern": "^([1-2]\\d{3})-(0[1-9]|1[0-2])-(0[1-9]|[1-2]\\d|3[0-1]) ([0-1]\\d|2[0-4])(:[0-5]\\d){2}$",
                              "type": "string"
                          }
                      ]
                  },
                  "offset": {
                      "description": "Смещение окна выдачи.\nПозиция (индекс), с которой необходимо возвращать элементы из БД (не меньше `0`).\nПо умолчанию `0`.",
                      "type": "integer",
                      "format": "int32",
                      "default": 0,
                      "minimum": 0
                  },
                  "limit": {
                      "description": "Допустимое количество объектов в ответе.",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1,
                      "default": 1000
                  },
                  "state": {
                      "description": "Тип изменения объекта каталога:\n  - `CREATED` - создание (Параметр `includeDeleted` не влияет на выдачу, 1-ая версия объекта и id_deleted=0)\n  - 'UPDATED' - обновление (Параметр `includeDeleted` не влияет на выдачу, версия больше 1 и id_deleted=0)\n  - 'DELETED' - удаление (Параметр `includeDeleted` влияет на выдачу. С параметром `includeDeleted` выводит с id_deleted=1)\n  - 'CHANGED' - изменение (Параметр `includeDeleted` влияет на выдачу. Без параметра выводятся объекты с id_deleted=0, с параметром выводятся все объекты с id_deleted=0 и с id_deleted=1)",
                      "type": "string",
                      "enum": [
                          "CREATED",
                          "UPDATED",
                          "DELETED",
                          "CHANGED"
                      ]
                  },
                  "includeDeleted": {
                      "description": "Учитывать ли в выборке удаленные объекты.",
                      "type": "boolean",
                      "default": false
                  },
                  "criteria": {
                      "description": "Условие для выборка элементов набора данных на языке запросов к ЕХД.\nДля параметра `geoData` используются функциях near и inside",
                      "type": "string"
                  },
                  "translate": {
                      "description": "Управление выдачей переводов полей.\n  - false – выдаются русскоязычные поля\n  - true – выдача англоязычных полей\n  - null – выдаются обе версии",
                      "type": "boolean",
                      "default": null
                  },
                  "sorting": {
                      "description": "Параметры сортировки.",
                      "type": "object",
                      "additionalProperties": {
                          "description": "<*> = \"name_attribute\"\n\nname_attribute - techName атрибута\n\nПередаются в JSON в виде пары ключ - значение, где ключ записывается в формате \"name_attribute\".\nЗначение это наименование сортировки:\n  asc – по возрастанию;\n  desc – по убыванию.",
                          "type": "string",
                          "enum": [
                              "asc",
                              "desc"
                          ]
                      }
                  }
              },
              "required": [
                  "id",
                  "from",
                  "until",
                  "state"
              ]
          },
          "CatalogChangesResponse": {
              "description": "Схема ответа для метода /publrest/catalog/changes (получение измененных объектов в каталоге).",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonResponseInfo"
                  },
                  {
                      "properties": {
                          "response": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/CatalogObject"
                              }
                          }
                      }
                  },
                  {
                      "$ref": "#/components/schemas/CommonFiltersValidDateResponseInfo"
                  }
              ]
          },
          "CatalogObjectChangesRequest": {
              "description": "Схема запроса для метода /publrest/object/changes (запрос изменений объекта).",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "global_id объекта каталога публикации",
                      "type": "integer",
                      "format": "int32"
                  },
                  "catalog": {
                      "description": "Идентификатор каталога публикации",
                      "type": "integer",
                      "format": "int32"
                  },
                  "from": {
                      "description": "Дата начала периода изменений. Формат: YYYY-MM-DD или YYYY-MM-DD hh:mm:ss",
                      "oneOf": [
                          {
                              "pattern": "(19|20)\\d\\d-((0[1-9]|1[012])-(0[1-9]|[12]\\d)|(0[13-9]|1[012])-30|(0[13578]|1[02])-31)",
                              "type": "string"
                          },
                          {
                              "pattern": "^([1-2]\\d{3})-(0[1-9]|1[0-2])-(0[1-9]|[1-2]\\d|3[0-1]) ([0-1]\\d|2[0-4])(:[0-5]\\d){2}$",
                              "type": "string"
                          }
                      ]
                  },
                  "until": {
                      "description": "Дата окончания периода изменений (не включается). Формат: YYYY-MM-DD или YYYY-MM-DD hh:mm:ss",
                      "oneOf": [
                          {
                              "pattern": "(19|20)\\d\\d-((0[1-9]|1[012])-(0[1-9]|[12]\\d)|(0[13-9]|1[012])-30|(0[13578]|1[02])-31)",
                              "type": "string"
                          },
                          {
                              "pattern": "^([1-2]\\d{3})-(0[1-9]|1[0-2])-(0[1-9]|[1-2]\\d|3[0-1]) ([0-1]\\d|2[0-4])(:[0-5]\\d){2}$",
                              "type": "string"
                          }
                      ]
                  },
                  "translate": {
                      "description": "Управление выдачей переводов полей.\n  - false – выдаются русскоязычные поля\n  - true – выдача англоязычных полей\n  - null – выдаются обе версии",
                      "type": "boolean",
                      "default": null
                  }
              },
              "required": [
                  "id",
                  "catalog",
                  "from",
                  "until"
              ]
          },
          "CatalogObjectChangesResponse": {
              "description": "Схема ответа для метода /publrest/object/changes (запрос изменений объекта).",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonResponseInfo"
                  },
                  {
                      "properties": {
                          "response": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/CatalogObject"
                              }
                          }
                      }
                  },
                  {
                      "$ref": "#/components/schemas/CommonFiltersValidDateResponseInfo"
                  }
              ]
          },
          "CatalogCountRequest": {
              "description": "Схема запроса для метода /publrest/catalog/count (запрос количества элементов в каталоге).",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор каталога публикации",
                      "type": "integer",
                      "format": "int32"
                  },
                  "criteria": {
                      "description": "Условие для выборка элементов набора данных на языке запросов к ЕХД.\nДля параметра geoData используются функциях near и inside",
                      "type": "string"
                  },
                  "geoData": {
                      "description": "Используется для описания переменных и их значений, которые в последствии будут использованы при составлении условий с геоданными.\nКоординаты точки или полигона указываются в формате GeoJSON.",
                      "type": "object",
                      "oneOf": [
                          {
                              "$ref": "#/components/schemas/GeodataCollection"
                          },
                          {
                              "$ref": "#/components/schemas/SingleGeodata"
                          }
                      ]
                  },
                  "epoch": {
                      "description": "Дата, на которую структура данных была актуальна.\nФормат даты - YYYY-MM-DD\nПо умолчанию - текущая дата.",
                      "type": "string"
                  },
                  "timestamp": {
                      "description": "Определяет формат даты в параметре `epoch`.\n  - `0` - формат YYYY-MM-DD;\n  - `1` - формат YYYY-MM-DD'T'HH:mm:ss.SSSXXX.",
                      "type": "integer",
                      "format": "int32",
                      "enum": [
                          0,
                          1
                      ],
                      "default": 0
                  },
                  "includeDeleted": {
                      "description": "Учитывать ли в выборке удаленные объекты.",
                      "type": "boolean",
                      "default": false
                  }
              },
              "required": [
                  "id"
              ]
          },
          "CatalogCountResponse": {
              "description": "Схема ответа для метода /publrest/catalog/count (запрос количества элементов в каталоге)",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonResponseInfo"
                  },
                  {
                      "properties": {
                          "response": {
                              "description": "Количество объектов в каталоге публикации, удовлетворяющих заданному условию.",
                              "type": "integer",
                              "format": "int32"
                          }
                      }
                  },
                  {
                      "$ref": "#/components/schemas/CommonFiltersValidDateResponseInfo"
                  }
              ]
          },
          "CatalogChangesResponsePaging": {
              "description": "Схема ответа для метода /publrest/catalog/changes (получение измененных объектов в каталоге) при наличии параемтра Paging=true",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CatalogChangesResponse"
                  },
                  {
                      "$ref": "#/components/schemas/CommonFoundReturnedResponseInfo"
                  }
              ]
          },
          "CatalogAggregateRequest": {
              "description": "Схема запроса для метода /publrest/catalog/aggregate (выполнение агрегирующего запроса).",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор каталога публикации",
                      "type": "integer",
                      "format": "int32"
                  },
                  "aggregation": {
                      "description": "Название агрегирующего запроса:\n  - CadastralCostSum - сумма кадастровой стоимости\n  - AreaSum - суммарная площадь\n  - CadastralCostAndAreaSum -  и сумма кадастровой стоимости и суммарная площадь",
                      "type": "string",
                      "enum": [
                          "CadastralCostSum",
                          "AreaSum",
                          "CadastralCostAndAreaSum"
                      ]
                  },
                  "criteria": {
                      "description": "Условие для выборка элементов набора данных на языке запросов к ЕХД.\nДля параметра geoData используются функциях `near` и `inside`.",
                      "type": "string"
                  },
                  "epoch": {
                      "description": "Дата, на которую структура данных была актуальна. По умолчанию - текущая дата.\nФормат даты - YYYY-MM-DD",
                      "type": "string"
                  },
                  "sorting": {
                      "description": "Параметры сортировки.",
                      "type": "object",
                      "additionalProperties": {
                          "description": "<*> = \"name_attribute\"\nname_attribute - techName атрибута\n\nПередаются в JSON в виде пары ключ - значение, где ключ записывается в формате \"name_attribute\".\nЗначение это наименование сортировки:\n  asc – по возрастанию;\n  desc – по убыванию.",
                          "type": "string",
                          "enum": [
                              "asc",
                              "desc"
                          ]
                      }
                  },
                  "includeDeleted": {
                      "description": "Учитывать ли в выборке удаленные объекты.",
                      "type": "boolean",
                      "default": false
                  }
              },
              "required": [
                  "id",
                  "aggregation"
              ]
          },
          "CatalogAggregateResponse": {
              "description": "Схема ответа для метода /publrest/catalog/aggregate (выполнение агрегирующего запроса).",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonResponseInfo"
                  },
                  {
                      "properties": {
                          "response": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/AggregationGroupItem"
                              }
                          }
                      }
                  },
                  {
                      "$ref": "#/components/schemas/CommonFiltersValidDateResponseInfo"
                  }
              ]
          },
          "DictionaryGetRequest": {
              "description": "Схема запроса для метода /publrest/dictionary/get (запрос содержимого справочников).",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор запрашиваемого справочника.",
                      "type": "integer",
                      "format": "int32"
                  },
                  "offset": {
                      "description": "Смещение окна выдачи.\nПозиция (индекс), с которой необходимо возвращать элементы из БД (не меньше `0`).\nПо умолчанию `0`.",
                      "type": "integer",
                      "format": "int32",
                      "default": 0,
                      "minimum": 0
                  },
                  "limit": {
                      "description": "Количество возвращаемых элементов справочника (число от `1` до `999999`). По умолчанию `999999`.",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 1,
                      "maximum": 999999,
                      "default": 999999
                  }
              },
              "required": [
                  "id"
              ]
          },
          "DictionaryGetResponse": {
              "description": "Схема ответа для метода /publrest/dictionary/get (запрос содержимого справочников).",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonResponseInfo"
                  },
                  {
                      "properties": {
                          "response": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/DictionaryElement"
                              }
                          }
                      }
                  },
                  {
                      "$ref": "#/components/schemas/CommonFiltersValidDateResponseInfo"
                  }
              ]
          },
          "CatalogSpecification": {
              "description": "Спецификация каталога публикации",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор каталога публикации",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "description": "Наименование каталога публикации",
                      "type": "string"
                  },
                  "nameEn": {
                      "description": "Наименование каталога публикации на английском языке",
                      "type": "string"
                  },
                  "technicalName": {
                      "description": "Техническое наименование каталога публикации",
                      "type": "string"
                  },
                  "shortName": {
                      "description": "Краткое наименование каталога публикации",
                      "type": "string"
                  },
                  "shortNameEn": {
                      "description": "Краткое наименование каталога публикации на английском языке",
                      "type": "string"
                  },
                  "accountingObject": {
                      "description": "Категория объектов",
                      "type": "string"
                  },
                  "accountingObjectEn": {
                      "description": "Категория объектов на английском языке",
                      "type": "string"
                  },
                  "keywords": {
                      "description": "Ключевые слова на английском языке",
                      "type": "string"
                  },
                  "keywordsEn": {
                      "description": "Ключевые слова",
                      "type": "string"
                  },
                  "kind": {
                      "description": "Название вида каталога публикации",
                      "oneOf": [
                          {
                              "type": "string"
                          }
                      ]
                  },
                  "type": {
                      "description": "Название типа каталога публикации",
                      "oneOf": [
                          {
                              "type": "string"
                          }
                      ]
                  },
                  "period": {
                      "description": "Периодичность актуализации (на русском языке, как в общих настройках каталога)",
                      "oneOf": [
                          {
                              "type": "string"
                          }
                      ]
                  },
                  "hasGeo": {
                      "description": "Наличие геометрии в каталоге публикации (0 или 1)",
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0,
                      "maximum": 1
                  },
                  "categories": {
                      "description": "Тематические категории, к которым относится каталог публикации",
                      "type": "string"
                  },
                  "categoriesEn": {
                      "description": "Тематические категории, к которым относится каталог публикации, на английском языке",
                      "type": "string"
                  },
                  "layerId": {
                      "description": "Идентификатор слоя геоданных в системе ЕГИП\nВыведено из эксплуатации в ЕХД2",
                      "type": "string"
                  },
                  "OIVs": {
                      "description": "Список ОИВов-поставщиков в виде объектов.",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/OIVsObject"
                      }
                  },
                  "oiv": {
                      "description": "Список наименований ОИВов-поставщиков, разделенных запятыми (в т.ч. ответственные за англ.версию каталога)",
                      "type": "string"
                  },
                  "oivEn": {
                      "description": "Список наименований ОИВов-поставщиков, разделенных запятыми, на английском языке",
                      "type": "string"
                  },
                  "oivList": {
                      "description": "Список наименований ОИВов-поставщиков, разделенных запятыми (в т.ч. ответственные за англ.версию каталога)",
                      "type": "string"
                  },
                  "rn": {
                      "description": "Номер строки rowNumber",
                      "type": "string"
                  },
                  "cnt": {
                      "description": "Количество объектов в каталоге публикации",
                      "type": "string"
                  },
                  "archive": {
                      "description": "Является ли архивным",
                      "type": "boolean"
                  },
                  "hasEnVersion": {
                      "description": "Наличие английской версии каталога",
                      "type": "boolean"
                  },
                  "description": {
                      "description": "Полное описание каталога публикации",
                      "type": "boolean"
                  },
                  "descriptionEn": {
                      "description": "Описание каталога публикации на английском языке (всегда пустой)",
                      "type": "boolean",
                      "default": null
                  },
                  "defaultSort": {
                      "description": "Сортировка объектов в каталоге публикации по умолчанию",
                      "type": "object",
                      "additionalProperties": {
                          "description": "<*> = \"name_attribute\"\nname_attribute - techName атрибута\n\nЗначения атрибутов объекта, возвращаются в JSON в виде пары ключ - значение, где ключ записывается в формате \"name_attribute\".\nВозвращаются только атрибуты для которых настроена сортировка.\nЗначение это наименование сортировки:\n  asc – по возрастанию;\n  desc – по убыванию.",
                          "type": "string",
                          "enum": [
                              "asc",
                              "desc"
                          ]
                      }
                  },
                  "systems": {
                      "description": "Список систем-потребителей, разделенных точкой с запятой",
                      "type": "string"
                  },
                  "fieldsEa": {
                      "description": "Информация об описании слоя электронного атласа.",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/FieldsEaObject"
                      }
                  },
                  "nameVariants": {
                      "description": "Массив наименований каталога для разных систем-потребителей в настройках публикации.",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/NameVariantsObject"
                      }
                  },
                  "systemFields": {
                      "description": "Массив системных полей каталога публикации",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/SystemFieldsObject"
                      }
                  },
                  "version": {
                      "description": "Информация о версии каталога публикации",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/VersionObject"
                          }
                      ]
                  },
                  "permittedSystems": {
                      "description": "Список систем-потребителей (указываются технические наименования систем)",
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "catalog_status_id": {
                      "description": "Статус каталога публикации.",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/PublicationCatalogStatusId"
                          }
                      ]
                  },
                  "details_opod": {
                      "description": "Дополнительная информация для наборов данных, сформированных на основе каталога для ОПОД",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/DetailsOpodObject"
                          }
                      ]
                  },
                  "responsiblePerson": {
                      "description": "Данные ответственного лица",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/ResponsiblePersonObject"
                          }
                      ]
                  },
                  "fields": {
                      "description": "Массив с информацией об атрибутах каталога публикации.",
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/FieldsObject"
                      }
                  }
              },
              "required": [
                  "id",
                  "name",
                  "nameEn",
                  "technicalName",
                  "shortName",
                  "shortNameEn",
                  "accountingObject",
                  "accountingObjectEn",
                  "keywords",
                  "kind",
                  "type",
                  "period",
                  "hasGeo",
                  "categories",
                  "categoriesEn",
                  "layerId",
                  "OIVs",
                  "oiv",
                  "oivEn",
                  "oivList",
                  "rn",
                  "cnt",
                  "archive",
                  "hasEnVersion",
                  "description",
                  "descriptionEn",
                  "defaultSort",
                  "systems",
                  "fieldsEa",
                  "nameVariants",
                  "systemFields",
                  "version",
                  "permittedSystems",
                  "catalog_status_id",
                  "details_opod",
                  "responsiblePerson",
                  "fields"
              ]
          },
          "OIVsObject": {
              "description": "ОИВ-поставщик",
              "type": "object",
              "properties": {
                  "Id": {
                      "description": "Идентификатор ОИВ",
                      "type": "integer",
                      "format": "int32"
                  },
                  "Name": {
                      "description": "Полное наименование ОИВ",
                      "type": "string"
                  },
                  "ShortName": {
                      "description": "Краткое наименование ОИВ",
                      "type": "string"
                  },
                  "NameEn": {
                      "description": "Англоязычное наименование ОИВ",
                      "type": "string"
                  },
                  "INN": {
                      "description": "ИНН ОИВ",
                      "type": "string"
                  }
              },
              "required": [
                  "Id",
                  "Name",
                  "ShortName",
                  "NameEn",
                  "INN"
              ]
          },
          "FieldsEaObject": {
              "description": "Описание слоя электронного атласа",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор описани",
                      "type": "integer",
                      "format": "int32"
                  },
                  "icoName": {
                      "description": "Название иконки",
                      "type": "string"
                  },
                  "signDate": {
                      "description": "Дата подписания слоя",
                      "type": "string"
                  },
                  "isLayerOpen": {
                      "description": "Признак \"Слой отображается в открытой части атласа\" (0 или 1)",
                      "type": "integer",
                      "format": "int32"
                  },
                  "isUpdateDb": {
                      "description": "Признак \"Данные необходимо обновлять в БД\" (0 или 1)",
                      "type": "integer",
                      "format": "int32"
                  },
                  "isUpdateWfs": {
                      "description": "Признак \"Данные необходимо обновлять в WFS сервисе\" (0 или 1)",
                      "type": "integer",
                      "format": "int32"
                  },
                  "signFio": {
                      "description": "ФИО подписавшего слой",
                      "type": "string"
                  },
                  "guLink": {
                      "description": "Ссылка на портал Госуслуг",
                      "type": "string"
                  },
                  "isUpdate": {
                      "description": "Признак \"Слой доступен для обновления\" (0 или 1)",
                      "type": "integer",
                      "format": "int32"
                  },
                  "linkData": {
                      "description": "Ссылка на источник данных",
                      "type": "string"
                  },
                  "typeObject": {
                      "description": "Тип объекта (Точка, Полулиния, Полигон)",
                      "type": "string"
                  },
                  "rubricid": {
                      "description": "Идентификатор рубрикатора",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "icoName",
                  "signDate",
                  "isLayerOpen",
                  "isUpdateDb",
                  "isUpdateWfs",
                  "signFio",
                  "guLink",
                  "isUpdate",
                  "linkData",
                  "typeObject",
                  "rubricid"
              ]
          },
          "NameVariantsObject": {
              "description": "Наименование каталога системы-потребителя в настройках публикации",
              "type": "object",
              "properties": {
                  "systemId": {
                      "description": "Идентификатор системы, для которой определено название каталога",
                      "type": "string"
                  },
                  "systemLogin": {
                      "description": "Техническое наименование системы, для которой определено название каталога",
                      "type": "string"
                  },
                  "fullName": {
                      "description": "Полное наименование каталога",
                      "type": "string"
                  },
                  "fullNameEn": {
                      "description": "Полное наименование каталога на английском языке",
                      "type": "string"
                  },
                  "technicalName": {
                      "description": "Техническое наименование каталога",
                      "type": "string"
                  },
                  "shortName": {
                      "description": "Краткое наименование каталога",
                      "type": "string"
                  },
                  "shortNameEn": {
                      "description": "Краткое наименование каталога на английском языке",
                      "type": "string"
                  }
              },
              "required": [
                  "systemId",
                  "systemLogin",
                  "fullName",
                  "fullNameEn",
                  "technicalName",
                  "shortName",
                  "shortNameEn"
              ]
          },
          "SystemFieldsObject": {
              "description": "Системное поле каталога публикации",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор системного поля",
                      "type": "integer",
                      "format": "int32"
                  },
                  "system": {
                      "description": "Техническое наименование системы",
                      "type": "string"
                  },
                  "sysField": {
                      "description": "Наименование системного поля",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "system",
                  "sysField"
              ]
          },
          "VersionObject": {
              "description": "Информация о версии каталога публикации",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор версии (номер)",
                      "type": "integer",
                      "format": "int32"
                  },
                  "validFrom": {
                      "description": "Дата начала периода актуальности версии",
                      "type": "string"
                  },
                  "validUntil": {
                      "description": "дата окончания периода актуальности версии (для актуальных версий указывается \"Jan 1, 9999 12:00:00 AM\").\nПример даты (для понимания формата): Nov 26, 2021 10:15:37 AM",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "validFrom",
                  "validUntil"
              ]
          },
          "PublicationCatalogStatusId": {
              "description": "Статус публикации каталога публикации:\n  - `1` - Не опубликовано\n  - `2` - Опубликовано\n  - `5` - Архивный",
              "type": "integer",
              "format": "int32"
          },
          "DetailsOpodObject": {
              "description": "Дополнительная информация для наборов данных, сформированных на основе каталога для ОПОД",
              "type": "object",
              "properties": {
                  "idOpenCategory": {
                      "description": "Идентификатор категории, к которой относится набор на ОПОД",
                      "type": "integer",
                      "format": "int32"
                  },
                  "nameOpenCategory": {
                      "description": "Наименование категории, к которой относится набор на ОПОД",
                      "type": "string"
                  },
                  "nameOpenCategoryEn": {
                      "description": "Наименование категории, к которой относится набор на ОПОД, на английском языке",
                      "type": "string"
                  },
                  "publicCatalogStatus": {
                      "description": "Наименование статуса публикации",
                      "type": "string"
                  },
                  "cluster": {
                      "description": "Признак \"Кластеры округ/район\"",
                      "type": "boolean"
                  },
                  "iso": {
                      "description": "Признак \"Показатели ISO37120 и U4SSC\"",
                      "type": "boolean"
                  },
                  "accessibility": {
                      "description": "Признак того, относится ли атрибут к категории \"Доступная среда\"",
                      "type": "boolean"
                  },
                  "idNumber": {
                      "description": "Идентификатор набора",
                      "type": "string"
                  },
                  "keyAccess": {
                      "description": "Ключ предварительного просмотра набора данных (хранится в БД и работает для наборов в статусе \"Новый\")",
                      "type": "string"
                  },
                  "linkForum": {
                      "description": "Ссылка на форум",
                      "type": "string"
                  },
                  "tags": {
                      "description": "Тэги каталога",
                      "type": "string"
                  },
                  "isDict": {
                      "description": "Является ли набор справочником",
                      "type": "boolean"
                  },
                  "typeDict": {
                      "description": "Наименование типа справочника для набора данных.",
                      "oneOf": [
                          {
                              "type": "string"
                          }
                      ]
                  },
                  "seasonId": {
                      "description": "Идентификатор типа сезонности набора данных",
                      "oneOf": [
                          {
                              "type": "integer",
                              "format": "int32",
                              "enum": [
                                  1,
                                  2,
                                  3,
                                  4
                              ]
                          }
                      ]
                  },
                  "season": {
                      "description": "Наименование типа сезонности набора данных",
                      "oneOf": [
                          {
                              "type": "string"
                          }
                      ]
                  },
                  "firstPublication": {
                      "description": "Дата первой публикации",
                      "type": "string"
                  },
                  "sortByPoligon": {
                      "description": "Сортировка полигональных объектов",
                      "type": "string"
                  },
                  "sefUrl": {
                      "description": "Идентификатор набора для SEF URL",
                      "type": "string"
                  }
              },
              "required": [
                  "idOpenCategory",
                  "nameOpenCategory",
                  "nameOpenCategoryEn",
                  "publicCatalogStatus",
                  "cluster",
                  "iso",
                  "accessibility",
                  "idNumber",
                  "keyAccess",
                  "linkForum",
                  "tags",
                  "isDict",
                  "typeDict",
                  "seasonId",
                  "season",
                  "firstPublication",
                  "sortByPoligon",
                  "sefUrl"
              ]
          },
          "ResponsiblePersonObject": {
              "description": "Данные ответственного лица",
              "type": "object",
              "properties": {
                  "fio": {
                      "description": "ФИО ответственного",
                      "type": "string"
                  },
                  "fioEn": {
                      "description": "ФИО ответственного на английском языке",
                      "type": "string"
                  },
                  "phone": {
                      "description": "Телефон ответственного лица",
                      "type": "string"
                  },
                  "email": {
                      "description": "email ответственного лица",
                      "type": "string"
                  }
              },
              "required": [
                  "fio",
                  "fioEn",
                  "phone",
                  "email"
              ]
          },
          "FieldsObject": {
              "description": "Информация об атрибуте каталога публикации",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор атрибута в каталоге",
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "description": "Русскоязычное наименование атрибута",
                      "type": "string"
                  },
                  "enName": {
                      "description": "Англоязычное наименование атрибута",
                      "type": "string"
                  },
                  "techName": {
                      "description": "Техническое наименование атрибута",
                      "type": "string"
                  },
                  "columnId": {
                      "description": "Техническое наименование столбца, в котором хранятся данные (например, col_13312)\nдля атрибутов каталога имеет формат col_{id} и col_{id}_en,\nгде id - идентификатор атрибута в каталоге для атрибутов корневого каталога и идентификатор атрибута в ЕХД для атрибутов вложенных каталогов",
                      "type": "string"
                  },
                  "type": {
                      "description": "Техническое наименование типа атрибута",
                      "$ref": "#/components/schemas/AttributeTypeTagIdEnum"
                  },
                  "typeName": {
                      "description": "Русскоязычное наименование типа атрибута",
                      "$ref": "#/components/schemas/AttributeTypeNameEnum"
                  },
                  "isPk": {
                      "description": "Может ли атрибут использоваться, как первичный ключ (число, возможные значения 0 -нет, 1- да)",
                      "type": "boolean"
                  },
                  "maxLength": {
                      "description": "Максимальная длина строкового атрибута",
                      "type": "integer",
                      "format": "int32"
                  },
                  "dictionaryId": {
                      "description": "Идентификатор справочника (для справочных атрибутов с типом DICTIONARY)",
                      "type": "integer",
                      "format": "int32"
                  },
                  "dictColTehName": {
                      "description": "Техническое наименование справочника (для справочных атрибутов с типом DICTIONARY)",
                      "type": "string"
                  },
                  "catalogId": {
                      "description": "Идентификатор вложенного каталога (для табличных атрибутов с типом CATALOG)",
                      "type": "integer",
                      "format": "int32"
                  },
                  "isArray": {
                      "description": "Признак, что поле может иметь множественное значения (0 - нет; 1 - да)",
                      "type": "integer",
                      "format": "int32"
                  },
                  "groupName": {
                      "description": "Наименование группы атрибутов, с которой сопоставлен атрибут",
                      "type": "string"
                  },
                  "rown": {
                      "description": "Уникальный номер атрибута (формируется рандомно и выводится строкой, для атрибута в рамках каталога уникально и не изменно)",
                      "type": "string"
                  },
                  "systemField": {
                      "description": "Наименование системного атрибута, с которым сопоставлен атрибут",
                      "type": "string"
                  },
                  "systems": {
                      "description": "Список систем-потребителей, которым доступен атрибут, в виде строки (указываются технические наименования систем)",
                      "type": "string"
                  },
                  "order": {
                      "description": "Порядковый номер атрибута в каталоге",
                      "type": "integer",
                      "format": "int32"
                  },
                  "permittedSystems": {
                      "description": "Список систем-потребителей (указываются технические наименования систем)",
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "permittedSystemNames": {
                      "description": "Назначение неизвестно (всегда null)",
                      "type": "string"
                  },
                  "isDefaultSystems": {
                      "description": "Список систем, в которых атрибут отображается по умолчанию",
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "hasTranslation": {
                      "description": "Признак наличия английской версии в каталоге.\n(`true`` проставляется если hasEnVersion=true и только для несистемных атрибутов, у которых id > 0, для остальных `false``)",
                      "type": "boolean"
                  },
                  "isDefaultVision": {
                      "description": "Признак отображения по умолчанию на ОПО Д для атрибутов, отображаемых по умолчанию и видимых для ОПОД.",
                      "type": "boolean"
                  },
                  "system": {
                      "description": "Признак технического атрибута (global_id, is_deleted и пр.)",
                      "type": "boolean"
                  },
                  "specification": {
                      "description": "Объект, содержащий спецификацию для вложенного каталога (при условии type = CATALOG). Имеет ту же структуру, что и корневой каталог.\nДля параметра `specification`` получается рекурсия использования схемы FillingCatalogListItem",
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/CatalogSpecification"
                          }
                      ]
                  }
              },
              "required": [
                  "id",
                  "name",
                  "enName",
                  "techName",
                  "columnId",
                  "type",
                  "typeName",
                  "isPk",
                  "maxLength",
                  "dictionaryId",
                  "dictColTehName",
                  "catalogId",
                  "isArray",
                  "groupName",
                  "rown",
                  "systemField",
                  "systems",
                  "order",
                  "permittedSystems",
                  "permittedSystemNames",
                  "isDefaultSystems",
                  "hasTranslation",
                  "isDefaultVision",
                  "system",
                  "specification"
              ]
          },
          "AggregationGroupItem": {
              "description": "Группа агрегаций.\nВ каждой группе присутствует обязательный атрибут '_id' и 'count'.\nОстальные атрибуты зависят от агрегирующего запроса (или выводятся оба, или один из).",
              "properties": {
                  "_id": {
                      "description": "Идентификатор группы",
                      "type": "string"
                  },
                  "count": {
                      "description": "Количество объектов подходящих под условие",
                      "type": "integer",
                      "format": "int32"
                  },
                  "CadastralCost": {
                      "description": "Сумма кадастровой стоимости",
                      "type": "number"
                  },
                  "Area": {
                      "description": "Суммарная площадь",
                      "type": "number"
                  }
              },
              "required": [
                  "_id",
                  "count"
              ]
          },
          "CatalogExportRequest": {
              "description": "Схема запроса для метода /publrest/catalog/export (запрос на формирование файла экспорта с содержимым каталога).",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор каталога публикации",
                      "type": "integer",
                      "format": "int32"
                  },
                  "format": {
                      "description": "Формат запрашиваемого файла. Если `null`, то возвращаются все форматы.",
                      "type": "string",
                      "enum": [
                          "XLSX",
                          "JSON",
                          "XML",
                          "CSV"
                      ]
                  },
                  "translate": {
                      "description": "Управление выдачей переводов полей.\n  - false – выдаются русскоязычные поля\n  - true – выдача англоязычных полей\n\nЕсли `null`, то возвращается обе версии.",
                      "type": "boolean"
                  },
                  "epoch": {
                      "description": "Дата, на которую структура данных была актуальна. По умолчанию - текущая дата.\nФормат даты - YYYY-MM-DDThh:mm:ss.sTZD\nДля запроса статуса формирования файлов необходимо передать в параметре epoch полученное значение из поля 'createDate'.",
                      "type": "string"
                  }
              },
              "required": [
                  "id"
              ]
          },
          "CatalogExportResponse": {
              "description": "Схема ответа для метода /publrest/catalog/export (запрос на экспорт содержимого каталога)",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/CommonResponseInfo"
                  },
                  {
                      "properties": {
                          "response": {
                              "type": "object",
                              "description": "Объекты XLSX XML JSON CSV выдаются в зависимости от запроса (параметр `format`).",
                              "properties": {
                                  "XLSX": {
                                      "description": "Статус файла для формата XLSX",
                                      "$ref": "#/components/schemas/CatalogExportObjectResponseFormat"
                                  },
                                  "XML": {
                                      "description": "Статус файла для формата XML",
                                      "$ref": "#/components/schemas/CatalogExportObjectResponseFormat"
                                  },
                                  "JSON": {
                                      "description": "Статус файла для формата JSON",
                                      "allOf": [
                                          {
                                              "$ref": "#/components/schemas/CatalogExportObjectResponseFormat"
                                          }
                                      ]
                                  },
                                  "CSV": {
                                      "description": "Статус файла для формата CSV",
                                      "allOf": [
                                          {
                                              "$ref": "#/components/schemas/CatalogExportObjectResponseFormat"
                                          }
                                      ]
                                  },
                                  "structureVersion": {
                                      "description": "Всегда пустая",
                                      "type": "string"
                                  },
                                  "errors": {
                                      "description": "Описание ошибок",
                                      "type": "string"
                                  },
                                  "createDate": {
                                      "description": "Дата запроса на генерацию файлов. Строка в формате ISO YYYY-MM-DDThh:mm:ss.sTZD",
                                      "type": "string"
                                  }
                              },
                              "required": [
                                  "structureVersion",
                                  "errors",
                                  "createDate"
                              ]
                          }
                      }
                  },
                  {
                      "$ref": "#/components/schemas/CommonFiltersValidDateResponseInfo"
                  }
              ]
          },
          "CatalogExportObjectResponseFormat": {
              "description": "Статус файла каждого формата",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор файла",
                      "type": "integer",
                      "format": "int32"
                  },
                  "status": {
                      "description": "Статус формирования файла.\n  - PROCESSING - формируется\n  - ERROR - ошибка\n  - SUCCESS - сформирован",
                      "type": "string",
                      "enum": [
                          "PROCESSING",
                          "ERROR",
                          "SUCCESS"
                      ]
                  },
                  "lastFileGeneration": {
                      "description": "Дата последней генерации файла данного типа. Строка в формате ISO YYYY-MM-DDThh:mm:ss.sTZD",
                      "type": "string"
                  },
                  "size": {
                      "description": "Размер файла в байтах. Файл формируется в  архив (zip).",
                      "type": "number"
                  }
              },
              "required": [
                  "id",
                  "status",
                  "lastFileGeneration",
                  "size"
              ]
          },
          "EhdEnvelope": {
              "description": "Конверт SOAP",
              "type": "object",
              "xml": {
                  "prefix": "soapenv",
                  "name": "Envelope"
              },
              "properties": {
                  "xmlns:soapenv": {
                      "description": "Пространство имен SOAP",
                      "type": "string",
                      "enum": [
                          "http://schemas.xmlsoap.org/soap/envelope/"
                      ],
                      "xml": {
                          "attribute": true
                      }
                  },
                  "xmlns:ehd": {
                      "description": "Пространство имен xsd-схемы SOAP-сервиса ЕХД",
                      "type": "string",
                      "enum": [
                          "http://ehd.mos.com/"
                      ],
                      "xml": {
                          "attribute": true
                      }
                  }
              },
              "required": [
                  "xmlns:soapenv",
                  "xmlns:ehd",
                  "Body"
              ]
          },
          "EhdEnvelopeWithSignNamespace": {
              "description": "Конверт SOAP с пространством имен для подписи",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelope"
                  }
              ],
              "properties": {
                  "xmlns:wsse": {
                      "description": "Пространство имен Web Services Security",
                      "type": "string",
                      "enum": [
                          "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"
                      ],
                      "xml": {
                          "attribute": true
                      }
                  }
              },
              "required": [
                  "xmlns:wsse"
              ]
          },
          "EhdEnvelopeWithHeader": {
              "description": "Конверт SOAP с заголовком",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelope"
                  },
                  {
                      "properties": {
                          "Header": {
                              "description": "Заголовок SOAP-запроса",
                              "type": "object",
                              "xml": {
                                  "prefix": "soapenv",
                                  "name": "Header"
                              }
                          }
                      },
                      "required": [
                          "Header"
                      ]
                  }
              ]
          },
          "getCatalogListRequest": {
              "description": "Схема запроса метода getCatalogList",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "getCatalogList": {
                                      "description": "Объект запроса getCatalogList",
                                      "type": "object",
                                      "xml": {
                                          "prefix": "ehd",
                                          "name": "getCatalogList"
                                      },
                                      "properties": {
                                          "version": {
                                              "description": "Версия метода, по умолчанию 1.\n\nВторая используется для получения поля `objCategories`.",
                                              "type": "integer",
                                              "format": "int32",
                                              "default": 1
                                          }
                                      }
                                  }
                              },
                              "required": [
                                  "getCatalogList"
                              ]
                          }
                      }
                  }
              ]
          },
          "getCatalogSpecRequest": {
              "description": "Схема запроса метода getCatalogSpec",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "getCatalogSpec": {
                                      "type": "object",
                                      "xml": {
                                          "prefix": "ehd",
                                          "name": "getCatalogSpec"
                                      },
                                      "properties": {
                                          "idCatalog": {
                                              "type": "integer",
                                              "format": "int32"
                                          },
                                          "version": {
                                              "type": "integer",
                                              "format": "int32"
                                          }
                                      },
                                      "required": [
                                          "idCatalog"
                                      ]
                                  }
                              },
                              "required": [
                                  "getCatalogSpec"
                              ]
                          }
                      }
                  }
              ]
          },
          "getCatalogStatsRequest": {
              "description": "Схема запроса метода getCatalogStats",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "getCatalogStats": {
                                      "type": "object",
                                      "xml": {
                                          "prefix": "ehd",
                                          "name": "getCatalogStats"
                                      },
                                      "properties": {
                                          "idCatalog": {
                                              "type": "integer",
                                              "format": "int32"
                                          },
                                          "countSubscribe": {
                                              "type": "integer",
                                              "format": "int32"
                                          }
                                      },
                                      "required": [
                                          "idCatalog"
                                      ]
                                  }
                              },
                              "required": [
                                  "getCatalogStats"
                              ]
                          }
                      }
                  }
              ]
          },
          "getCatalogListResponse": {
              "description": "Схема ответа метода getCatalogList",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "ehdCatalogs": {
                                      "type": "array",
                                      "xml": {
                                          "prefix": "ehd"
                                      },
                                      "items": {
                                          "properties": {
                                              "ehdCatalog": {
                                                  "xml": {
                                                      "prefix": "ehd",
                                                      "wrapped": true
                                                  },
                                                  "properties": {
                                                      "id": {
                                                          "type": "integer",
                                                          "format": "int32",
                                                          "xml": {
                                                              "prefix": "ehd"
                                                          }
                                                      },
                                                      "fullName": {
                                                          "type": "string",
                                                          "xml": {
                                                              "prefix": "ehd"
                                                          }
                                                      },
                                                      "technicalName": {
                                                          "type": "string",
                                                          "xml": {
                                                              "prefix": "ehd"
                                                          }
                                                      },
                                                      "shortName": {
                                                          "type": "string",
                                                          "xml": {
                                                              "prefix": "ehd"
                                                          }
                                                      },
                                                      "accountingObject": {
                                                          "type": "string",
                                                          "xml": {
                                                              "prefix": "ehd"
                                                          }
                                                      },
                                                      "keywords": {
                                                          "type": "string",
                                                          "xml": {
                                                              "prefix": "ehd"
                                                          }
                                                      },
                                                      "vid": {
                                                          "type": "string",
                                                          "xml": {
                                                              "prefix": "ehd"
                                                          }
                                                      },
                                                      "type": {
                                                          "type": "string",
                                                          "xml": {
                                                              "prefix": "ehd"
                                                          }
                                                      },
                                                      "period": {
                                                          "type": "string",
                                                          "xml": {
                                                              "prefix": "ehd"
                                                          }
                                                      },
                                                      "hasGeo": {
                                                          "type": "boolean",
                                                          "xml": {
                                                              "prefix": "ehd"
                                                          }
                                                      },
                                                      "categories": {
                                                          "type": "string",
                                                          "xml": {
                                                              "prefix": "ehd"
                                                          }
                                                      },
                                                      "oiv": {
                                                          "type": "string",
                                                          "xml": {
                                                              "prefix": "ehd"
                                                          }
                                                      },
                                                      "objCategories": {
                                                          "type": "string",
                                                          "xml": {
                                                              "prefix": "ehd"
                                                          }
                                                      }
                                                  },
                                                  "required": [
                                                      "id",
                                                      "fullName",
                                                      "technicalName",
                                                      "shortName",
                                                      "accountingObject",
                                                      "keywords",
                                                      "vid",
                                                      "type",
                                                      "period",
                                                      "hasGeo",
                                                      "categories",
                                                      "oiv",
                                                      "objCategories"
                                                  ]
                                              }
                                          },
                                          "required": [
                                              "ehdCatalog"
                                          ]
                                      }
                                  }
                              },
                              "required": [
                                  "ehdCatalogs"
                              ]
                          }
                      }
                  }
              ]
          },
          "getCatalogItemsResponse": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "ehdCatalogItemsset": {
                                      "type": "array",
                                      "xml": {
                                          "prefix": "ehd"
                                      },
                                      "items": {
                                          "properties": {
                                              "ehdCatalogItem": {
                                                  "xml": {
                                                      "prefix": "ehd",
                                                      "wrapped": true
                                                  },
                                                  "properties": {
                                                      "ehdCatalogAttr": {
                                                          "xml": {
                                                              "prefix": "ehd"
                                                          },
                                                          "properties": {
                                                              "id": {
                                                                  "type": "integer",
                                                                  "format": "int32",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "isDeleted": {
                                                                  "type": "boolean",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "isDeletedTMP": {
                                                                  "type": "boolean",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "tehName": {
                                                                  "type": "string",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "type": {
                                                                  "type": "string",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "dictValue": {
                                                                  "type": "string",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "value": {
                                                                  "type": "string",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "groupValue": {
                                                                  "type": "string",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              }
                                                          },
                                                          "required": [
                                                              "id",
                                                              "techName",
                                                              "type",
                                                              "value"
                                                          ]
                                                      }
                                                  },
                                                  "required": [
                                                      "ehdCatalogAttr"
                                                  ]
                                              }
                                          },
                                          "required": [
                                              "ehdCatalogItem"
                                          ]
                                      }
                                  }
                              },
                              "required": [
                                  "ehdCatalogItemsset"
                              ]
                          }
                      }
                  }
              ]
          },
          "getCatalogItemsInconsistencyError": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "getCatalogItemsResponse": {
                                      "type": "array",
                                      "xml": {
                                          "prefix": "ehd"
                                      },
                                      "properties": {
                                          "ehdCatalogItemsset": {
                                              "type": "array",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              ]
          },
          "getDictItemResponse": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "getDictItemResponse": {
                                      "type": "object",
                                      "xml": {
                                          "prefix": "ehd"
                                      },
                                      "properties": {
                                          "ehdDictionaryItems": {
                                              "type": "array",
                                              "xml": {
                                                  "prefix": "ehd"
                                              },
                                              "items": {
                                                  "properties": {
                                                      "ehdDictionary": {
                                                          "xml": {
                                                              "prefix": "ehd",
                                                              "wrapped": true
                                                          },
                                                          "properties": {
                                                              "id": {
                                                                  "type": "string",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "parent_id": {
                                                                  "type": "string",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "name": {
                                                                  "type": "string",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "dictAttrsV2": {
                                                                  "type": "array",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  },
                                                                  "items": {
                                                                      "properties": {
                                                                          "tehName": {
                                                                              "type": "string",
                                                                              "xml": {
                                                                                  "prefix": "ehd"
                                                                              }
                                                                          },
                                                                          "name": {
                                                                              "type": "string",
                                                                              "xml": {
                                                                                  "prefix": "ehd"
                                                                              }
                                                                          },
                                                                          "value": {
                                                                              "type": "string",
                                                                              "xml": {
                                                                                  "prefix": "ehd"
                                                                              }
                                                                          }
                                                                      },
                                                                      "required": [
                                                                          "techName",
                                                                          "name",
                                                                          "value"
                                                                      ]
                                                                  }
                                                              }
                                                          },
                                                          "required": [
                                                              "id",
                                                              "name",
                                                              "dictAttrsV2"
                                                          ]
                                                      }
                                                  },
                                                  "required": [
                                                      "ehdDictionary"
                                                  ]
                                              }
                                          }
                                      },
                                      "required": [
                                          "ehdDictionaryItems"
                                      ]
                                  }
                              },
                              "required": [
                                  "getDictItemResponse"
                              ]
                          }
                      }
                  }
              ]
          },
          "getCatalogSpecResponse": {
              "description": "Атрибут каталога заполнения",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "getCatalogSpecResponse": {
                                      "xml": {
                                          "prefix": "ehd"
                                      },
                                      "properties": {
                                          "ehdAttrSpec": {
                                              "xml": {
                                                  "prefix": "ehd"
                                              },
                                              "type": "array",
                                              "items": {
                                                  "properties": {
                                                      "count": {
                                                          "type": "integer",
                                                          "xml": {
                                                              "prefix": "ehd"
                                                          }
                                                      },
                                                      "ehdCommonAttribute": {
                                                          "type": "object",
                                                          "xml": {
                                                              "prefix": "ehd",
                                                              "wrapped": true
                                                          },
                                                          "properties": {
                                                              "id": {
                                                                  "type": "integer",
                                                                  "format": "int32",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "refCatalog": {
                                                                  "type": "integer",
                                                                  "format": "int32",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "dictId": {
                                                                  "type": "integer",
                                                                  "format": "int32",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "typeId": {
                                                                  "type": "integer",
                                                                  "format": "int32",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "maxLength": {
                                                                  "type": "integer",
                                                                  "format": "int32",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "maxLengthDecimal": {
                                                                  "type": "integer",
                                                                  "format": "int32",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "fieldMask": {
                                                                  "type": "string",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "name": {
                                                                  "type": "string",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "colname": {
                                                                  "type": "string",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "isEdit": {
                                                                  "type": "boolean",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "isReq": {
                                                                  "type": "boolean",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "isPrimaryKey": {
                                                                  "type": "boolean",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "tehName": {
                                                                  "type": "string",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "isMulti": {
                                                                  "type": "boolean",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "type": {
                                                                  "type": "string",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "isDeletedTMP": {
                                                                  "type": "boolean",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "isDeleted": {
                                                                  "type": "boolean",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "isAutocomplete": {
                                                                  "type": "boolean",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "isManualInput": {
                                                                  "type": "boolean",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "isManualInputGeo": {
                                                                  "type": "boolean",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              }
                                                          },
                                                          "required": [
                                                              "id",
                                                              "refCatalog",
                                                              "typeId",
                                                              "dictId",
                                                              "maxLength",
                                                              "maxLengthDecimal",
                                                              "fieldMask",
                                                              "name",
                                                              "isEdit",
                                                              "isReq",
                                                              "isPrimaryKey",
                                                              "tehName",
                                                              "isMulti",
                                                              "type",
                                                              "isDeletedTMP",
                                                              "isDeleted"
                                                          ]
                                                      }
                                                  },
                                                  "required": [
                                                      "ehdCommonAttribute",
                                                      "count"
                                                  ]
                                              }
                                          }
                                      }
                                  }
                              },
                              "required": [
                                  "ehdAttrSpec"
                              ]
                          }
                      }
                  }
              ]
          },
          "getAllDictResponse": {
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "getAllDictResponse": {
                                      "xml": {
                                          "prefix": "ehd"
                                      },
                                      "properties": {
                                          "ehdDictionaries": {
                                              "type": "array",
                                              "xml": {
                                                  "prefix": "ehd"
                                              },
                                              "items": {
                                                  "properties": {
                                                      "ehdDictionary": {
                                                          "xml": {
                                                              "prefix": "ehd",
                                                              "wrapped": true
                                                          },
                                                          "properties": {
                                                              "id": {
                                                                  "type": "integer",
                                                                  "format": "int32",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "name": {
                                                                  "type": "string",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              },
                                                              "total": {
                                                                  "type": "integer",
                                                                  "format": "int32",
                                                                  "xml": {
                                                                      "prefix": "ehd"
                                                                  }
                                                              }
                                                          },
                                                          "required": [
                                                              "id",
                                                              "name",
                                                              "total"
                                                          ]
                                                      }
                                                  },
                                                  "required": [
                                                      "ehdDictionary"
                                                  ]
                                              }
                                          }
                                      },
                                      "required": [
                                          "ehdDictionaries"
                                      ]
                                  }
                              },
                              "required": [
                                  "getAllDictResponse"
                              ]
                          }
                      }
                  }
              ]
          },
          "ApiError": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "Fault": {
                                      "xml": {
                                          "prefix": "soapenv"
                                      },
                                      "properties": {
                                          "faultcode": {
                                              "description": "Текстовый код, который указывает на тип ошибки",
                                              "type": "string",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "faultstring": {
                                              "description": "Текстовое сообщение с объяснением ошибки",
                                              "type": "string",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "detail": {
                                              "xml": {
                                                  "prefix": "ehd"
                                              },
                                              "properties": {
                                                  "faultCode": {
                                                      "description": "Код ошибки, характерный для приложения",
                                                      "type": "integer",
                                                      "format": "int32",
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      }
                                                  },
                                                  "faultString": {
                                                      "description": "Текстовое сообщение, характерное для приложения",
                                                      "type": "string",
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      }
                                                  }
                                              },
                                              "required": [
                                                  "faultCode",
                                                  "faultString"
                                              ]
                                          }
                                      },
                                      "required": [
                                          "faultcode",
                                          "faultstring"
                                      ]
                                  }
                              },
                              "required": [
                                  "Fault"
                              ]
                          }
                      }
                  }
              ]
          },
          "CommonError": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "Fault": {
                                      "xml": {
                                          "prefix": "soap"
                                      },
                                      "properties": {
                                          "faultcode": {
                                              "description": "Текстовый код, который указывает на тип ошибки",
                                              "type": "string",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "faultstring": {
                                              "description": "Текстовое сообщение с объяснением ошибки",
                                              "type": "string",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          }
                                      },
                                      "required": [
                                          "faultcode",
                                          "faultstring"
                                      ]
                                  }
                              },
                              "required": [
                                  "Fault"
                              ]
                          }
                      }
                  }
              ]
          },
          "CommonSubscribeError": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "Fault": {
                                      "xml": {
                                          "prefix": "soap"
                                      },
                                      "properties": {
                                          "faultcode": {
                                              "description": "Текстовый код, который указывает на тип ошибки",
                                              "type": "string",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "faultstring": {
                                              "description": "Текстовое сообщение с объяснением ошибки",
                                              "type": "string",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "detail": {
                                              "properties": {
                                                  "SubscribeFault": {
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      }
                                                  }
                                              },
                                              "required": [
                                                  "SubscribeFault"
                                              ]
                                          }
                                      },
                                      "required": [
                                          "faultcode",
                                          "faultstring"
                                      ]
                                  }
                              },
                              "required": [
                                  "Fault"
                              ]
                          }
                      }
                  }
              ]
          },
          "getCatalogStatsResponse": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "ehdCatalogStats": {
                                      "xml": {
                                          "prefix": "ehd"
                                      },
                                      "properties": {
                                          "catalogId": {
                                              "type": "integer",
                                              "format": "int32",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "fullName": {
                                              "type": "string",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "technicalName": {
                                              "type": "string",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "cntActiveObj": {
                                              "type": "integer",
                                              "format": "int32",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "cntDelObj": {
                                              "type": "integer",
                                              "format": "int32",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "cntNotSubscribe": {
                                              "type": "integer",
                                              "format": "int32",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "cntError": {
                                              "type": "integer",
                                              "format": "int32",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "cntGeoError": {
                                              "type": "integer",
                                              "format": "int32",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          }
                                      },
                                      "required": [
                                          "catalogId",
                                          "fullName",
                                          "technicalName",
                                          "cntActiveObj",
                                          "cntDelObj",
                                          "cntNotSubscribe",
                                          "cntError",
                                          "cntGeoError"
                                      ]
                                  }
                              },
                              "required": [
                                  "ehdCatalogStats"
                              ]
                          }
                      }
                  }
              ]
          },
          "getCatalogSpecForbiddenError": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "type": "object",
                              "properties": {
                                  "getCatalogSpecResponse": {
                                      "properties": {
                                          "ehdAttrSpec": {
                                              "properties": {
                                                  "count": {
                                                      "description": "Количество объектов каталога",
                                                      "type": "integer",
                                                      "format": "int32"
                                                  },
                                                  "ehdException": {
                                                      "schema": null,
                                                      "$ref": "#/components/schemas/ForbiddenError"
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              ]
          },
          "getCatalogItemsForbiddenError": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "type": "object",
                              "xml": {
                                  "prefix": "soapenv"
                              },
                              "properties": {
                                  "getCatalogItemsResponse": {
                                      "xml": {
                                          "prefix": "ehd"
                                      },
                                      "properties": {
                                          "ehdCatalogItemsset": {
                                              "xml": {
                                                  "prefix": "ehd"
                                              },
                                              "properties": {
                                                  "ehdException": {
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      },
                                                      "schema": null,
                                                      "$ref": "#/components/schemas/ForbiddenError"
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              ]
          },
          "getAllDictForbiddenError": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "type": "object",
                              "properties": {
                                  "getAllDictResponse": {
                                      "properties": {
                                          "ehdDictionaries": {
                                              "properties": {
                                                  "ehdException": {
                                                      "schema": null,
                                                      "$ref": "#/components/schemas/ForbiddenError"
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              ]
          },
          "getCatalogStatsForbiddenError": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "type": "object",
                              "properties": {
                                  "getCatalogStatsResponse": {
                                      "properties": {
                                          "ehdCatalogStats": {
                                              "properties": {
                                                  "ehdException": {
                                                      "schema": null,
                                                      "$ref": "#/components/schemas/ForbiddenError"
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              ]
          },
          "getDictItemForbiddenError": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "type": "object",
                              "properties": {
                                  "getDictItemResponse": {
                                      "properties": {
                                          "ehdDictionaryItems": {
                                              "properties": {
                                                  "ehdException": {
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      },
                                                      "schema": null,
                                                      "$ref": "#/components/schemas/ForbiddenError"
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              ]
          },
          "getCatalogSpecNotFoundError": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelope"
                  },
                  {
                      "properties": {
                          "Body": {
                              "type": "object",
                              "properties": {
                                  "ehdCatalogItemsset": {
                                      "type": "string"
                                  }
                              }
                          }
                      }
                  }
              ]
          },
          "setSignatureCatalogResponse": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "type": "object",
                              "properties": {
                                  "setSignatureCatalogResponse": {
                                      "xml": {
                                          "prefix": "ehd"
                                      },
                                      "properties": {
                                          "setSignatureCatalog": {
                                              "xml": {
                                                  "prefix": "ehd"
                                              },
                                              "properties": {
                                                  "status": {
                                                      "type": "integer",
                                                      "format": "int32",
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      }
                                                  },
                                                  "message": {
                                                      "type": "string",
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      }
                                                  },
                                                  "detail_message": {
                                                      "type": "string",
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      }
                                                  },
                                                  "catalog_id": {
                                                      "type": "integer",
                                                      "format": "int32",
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      }
                                                  },
                                                  "action": {
                                                      "type": "string",
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      }
                                                  }
                                              },
                                              "required": [
                                                  "status",
                                                  "message",
                                                  "detail_message",
                                                  "catalog_id",
                                                  "action"
                                              ]
                                          }
                                      },
                                      "required": [
                                          "setSignatureCatalog"
                                      ]
                                  }
                              },
                              "required": [
                                  "setSignatureCatalogResponse"
                              ]
                          }
                      }
                  }
              ]
          },
          "getCatalogItemsRequest": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "getCatalogItems": {
                                      "type": "object",
                                      "xml": {
                                          "prefix": "ehd",
                                          "name": "getCatalogItems"
                                      },
                                      "properties": {
                                          "idCatalog": {
                                              "description": "Id каталога заполнения",
                                              "type": "integer",
                                              "format": "int32"
                                          },
                                          "start": {
                                              "description": "Номер строки, с которой осуществляется выборка",
                                              "type": "integer"
                                          },
                                          "end": {
                                              "description": "Номер строки, которой заканчивается выборка",
                                              "type": "integer"
                                          },
                                          "hideDeleted": {
                                              "description": "Скрывать элементы с меткой удаления",
                                              "type": "boolean"
                                          },
                                          "idParentCatalog": {
                                              "description": "Идентификатор родительского каталога",
                                              "type": "boolean"
                                          },
                                          "idGlobalObject": {
                                              "description": "Идентификатор родительского объекта",
                                              "type": "boolean"
                                          },
                                          "system_object_id": {
                                              "description": "Идентификатор записи во внешней системе",
                                              "type": "integer",
                                              "format": "int32"
                                          },
                                          "filters": {
                                              "description": "Фильтры",
                                              "type": "object",
                                              "properties": {
                                                  "id_attr": {
                                                      "description": "Идентификатор атрибута из спецификации",
                                                      "type": "integer",
                                                      "format": "int32",
                                                      "xml": {
                                                          "attribute": true
                                                      }
                                                  },
                                                  "filt_type": {
                                                      "description": "Метод фильтрации                          \n- '1' - Содержит указанное значение\n- '2' - Начинается на указанное значение\n- '3' - Заканчивается на указанное значение\n- '4' - Совпадает с указанным значением\n- '5' - Только пустые значения\n- '6' - Соответствует регулярному выражению",
                                                      "type": "integer",
                                                      "enum": [
                                                          1,
                                                          2,
                                                          3,
                                                          4,
                                                          5,
                                                          6
                                                      ],
                                                      "xml": {
                                                          "attribute": true
                                                      }
                                                  }
                                              }
                                          },
                                          "status": {
                                              "description": "Фильтр по полю статус\n- 'IS_DELETED' — удаленные записи\n- 'IS_NOT_DELETED' — неудаленные записи\n- 'IS_NOT_SIGN' — неподписанные записи\n- 'HAS_ERROR' — ошибки поставщика данных\n- 'HAS_NO_MY_ERROR' — ошибки прочих ОИВ\n- 'IS_SIGN_RUS' — только записи с подписанной русской версией объекта\n- 'GEOSIGN_IN_PROGRESS' — записи по которым не завершился перенос гео данных\n- 'IS_HAS_GEO_ERROR' — записи с ошибками геометрии ",
                                              "type": "string",
                                              "enum": [
                                                  "IS_DELETED",
                                                  "IS_NOT_DELETED",
                                                  "IS_NOT_SIGN",
                                                  "HAS_ERROR",
                                                  "HAS_NO_MY_ERROR",
                                                  "IS_SIGN_RUS",
                                                  "GEOSIGN_IN_PROGRESS",
                                                  "IS_HAS_GEO_ERROR"
                                              ]
                                          },
                                          "fetchGeodata": {
                                              "description": "Возвращать геоданные объектов в атрибуте geodata",
                                              "type": "boolean"
                                          },
                                          "geoType": {
                                              "description": "Система координат\n- 'wgs' - Система координат WGS 84\n- 'msk' - Система координат MSK 77 ",
                                              "type": "string",
                                              "enum": [
                                                  "wgs",
                                                  "msk"
                                              ]
                                          },
                                          "getSigned": {
                                              "description": "При отсутствии параметра или его значении false логика выдачи не меняется. При значении true в выдачу попадают последние подписанные значения всех записей. Если запись ни разу не подписана, то в выдачу она не попадает.",
                                              "type": "boolean"
                                          }
                                      },
                                      "required": [
                                          "idCatalog",
                                          "start",
                                          "end",
                                          "hideDeleted"
                                      ]
                                  }
                              },
                              "required": [
                                  "getCatalogItems"
                              ]
                          }
                      }
                  }
              ]
          },
          "setSignatureHeadRequest": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelope"
                  },
                  {
                      "properties": {
                          "Header": {
                              "properties": {
                                  "wsse:Security": {
                                      "properties": {
                                          "soapenv:actor": {
                                              "type": "string",
                                              "example": "http://smev.gosuslugi.ru/actors/smev",
                                              "xml": {
                                                  "attribute": true
                                              }
                                          },
                                          "xmlns:wsse": {
                                              "type": "string",
                                              "example": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
                                              "xml": {
                                                  "attribute": true
                                              }
                                          },
                                          "BinarySecurityToken": {
                                              "type": "string",
                                              "example": "CDQyQU5TV0VSMQ4wDAYDVQQDDAVBRE1JTjAeFw0yMjA1MTMwNjAyMTFaFw0yMzA1MTMwNjAyMTFa",
                                              "xml": {
                                                  "prefix": "wsse"
                                              },
                                              "properties": {
                                                  "EncodingType": {
                                                      "type": "string",
                                                      "example": "https://docs.oasis-open.org/wss-m/wss/v1.1.1/wss-SOAPMessageSecurity-v1.1.1.html",
                                                      "xml": {
                                                          "attribute": true
                                                      }
                                                  },
                                                  "ValueType": {
                                                      "type": "string",
                                                      "example": "https://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd",
                                                      "xml": {
                                                          "attribute": true
                                                      }
                                                  },
                                                  "wsu:Id": {
                                                      "type": "string",
                                                      "example": "SenderCertificate",
                                                      "xml": {
                                                          "attribute": true
                                                      },
                                                      "enum": [
                                                          "SenderCertificate"
                                                      ]
                                                  }
                                              },
                                              "required": [
                                                  "EncodingType",
                                                  "ValueType",
                                                  "wsu:Id"
                                              ]
                                          },
                                          "Signature": {
                                              "xml": {
                                                  "prefix": "ds"
                                              },
                                              "properties": {
                                                  "xmlns:ds": {
                                                      "type": "string",
                                                      "example": "http://www.w3.org/2000/09/xmldsig#",
                                                      "xml": {
                                                          "attribute": true
                                                      },
                                                      "enum": [
                                                          "http://www.w3.org/2000/09/xmldsig#"
                                                      ]
                                                  },
                                                  "SignedInfo": {
                                                      "xml": {
                                                          "prefix": "ds"
                                                      },
                                                      "properties": {
                                                          "CanonicalizationMethod": {
                                                              "xml": {
                                                                  "prefix": "ds"
                                                              },
                                                              "properties": {
                                                                  "Algorithm": {
                                                                      "type": "string",
                                                                      "example": "http://www.w3.org/2001/10/xml-exc-c14n#",
                                                                      "xml": {
                                                                          "attribute": true
                                                                      }
                                                                  }
                                                              },
                                                              "required": [
                                                                  "Algorithm"
                                                              ]
                                                          },
                                                          "SignatureMethod": {
                                                              "xml": {
                                                                  "prefix": "ds"
                                                              },
                                                              "properties": {
                                                                  "Algorithm": {
                                                                      "type": "string",
                                                                      "example": "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-256",
                                                                      "xml": {
                                                                          "attribute": true
                                                                      }
                                                                  }
                                                              },
                                                              "required": [
                                                                  "Algorithm"
                                                              ]
                                                          },
                                                          "Reference": {
                                                              "xml": {
                                                                  "prefix": "ds"
                                                              },
                                                              "properties": {
                                                                  "URI": {
                                                                      "example": "#body",
                                                                      "xml": {
                                                                          "attribute": true
                                                                      },
                                                                      "enum": [
                                                                          "#body"
                                                                      ]
                                                                  },
                                                                  "Transforms": {
                                                                      "xml": {
                                                                          "prefix": "ds"
                                                                      },
                                                                      "type": "array",
                                                                      "items": {
                                                                          "properties": {
                                                                              "Transform": {
                                                                                  "xml": {
                                                                                      "prefix": "ds",
                                                                                      "wrapped": true
                                                                                  },
                                                                                  "properties": {
                                                                                      "Algorithm": {
                                                                                          "type": "string",
                                                                                          "example": "http://www.w3.org/2001/10/xml-exc-c14n#",
                                                                                          "xml": {
                                                                                              "attribute": true
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "required": [
                                                                                      "Algorithm"
                                                                                  ]
                                                                              }
                                                                          },
                                                                          "required": [
                                                                              "Transform"
                                                                          ]
                                                                      }
                                                                  },
                                                                  "DigestMethod": {
                                                                      "xml": {
                                                                          "prefix": "ds"
                                                                      },
                                                                      "properties": {
                                                                          "Algorithm": {
                                                                              "type": "string",
                                                                              "example": "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-256",
                                                                              "xml": {
                                                                                  "attribute": true
                                                                              }
                                                                          }
                                                                      },
                                                                      "required": [
                                                                          "Algorithm"
                                                                      ]
                                                                  },
                                                                  "DigestValue": {
                                                                      "type": "string",
                                                                      "example": "JhxNWQ/Lby0lu3rKaHUFO+VQkQvVZemk0yOHvN32zSk=",
                                                                      "xml": {
                                                                          "prefix": "ds"
                                                                      }
                                                                  }
                                                              },
                                                              "required": [
                                                                  "URI",
                                                                  "Transforms",
                                                                  "DigestMethod",
                                                                  "DigestValue"
                                                              ]
                                                          }
                                                      },
                                                      "required": [
                                                          "CanonicalizationMethod",
                                                          "SignatureMethod",
                                                          "Reference"
                                                      ]
                                                  }
                                              },
                                              "required": [
                                                  "xmlns:ds",
                                                  "SignedInfo"
                                              ]
                                          },
                                          "SignatureValue": {
                                              "type": "string",
                                              "example": "2xh5FCnLqUOVuxZnKI6y8eydoQ62769drgrC0b6Ny6TbKr7aWFUmNqxt3CNKMK7+b6wwJLwZYn/z8UAjGtasCg==",
                                              "xml": {
                                                  "prefix": "ds"
                                              }
                                          },
                                          "KeyInfo": {
                                              "xml": {
                                                  "prefix": "ds"
                                              },
                                              "properties": {
                                                  "SecurityTokenReference": {
                                                      "xml": {
                                                          "prefix": "wsse"
                                                      },
                                                      "properties": {
                                                          "Reference": {
                                                              "xml": {
                                                                  "prefix": "wsse"
                                                              },
                                                              "properties": {
                                                                  "URI": {
                                                                      "example": "#SenderCertificate",
                                                                      "xml": {
                                                                          "attribute": true
                                                                      },
                                                                      "enum": [
                                                                          "#SenderCertificate"
                                                                      ]
                                                                  },
                                                                  "ValueType": {
                                                                      "example": "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3",
                                                                      "xml": {
                                                                          "attribute": true
                                                                      },
                                                                      "enum": [
                                                                          "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3"
                                                                      ]
                                                                  }
                                                              },
                                                              "required": [
                                                                  "URI",
                                                                  "ValueType"
                                                              ]
                                                          }
                                                      },
                                                      "required": [
                                                          "Reference"
                                                      ]
                                                  }
                                              },
                                              "required": [
                                                  "SecurityTokenReference"
                                              ]
                                          }
                                      },
                                      "required": [
                                          "soapenv:actor",
                                          "xmlns:wsse",
                                          "BinarySecurityToken",
                                          "Signature",
                                          "SignatureValue",
                                          "KeyInfo"
                                      ]
                                  }
                              },
                              "required": [
                                  "wsse:Security"
                              ]
                          }
                      }
                  }
              ]
          },
          "setSignatureRequest": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelope"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "setSignatureCatalog": {
                                      "type": "object",
                                      "xml": {
                                          "prefix": "ehd",
                                          "name": "setSignatureCatalog"
                                      },
                                      "properties": {
                                          "idCatalog": {
                                              "example": 3456,
                                              "description": "Id каталога заполнения",
                                              "type": "integer",
                                              "format": "int32"
                                          }
                                      },
                                      "required": [
                                          "idCatalog"
                                      ]
                                  }
                              },
                              "required": [
                                  "setSignatureCatalog"
                              ]
                          }
                      }
                  }
              ]
          },
          "getDictItemRequest": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "properties": {
                                  "getDictItem": {
                                      "type": "object",
                                      "xml": {
                                          "prefix": "ehd",
                                          "name": "getDictItem"
                                      },
                                      "properties": {
                                          "dictionaryId": {
                                              "description": "Id справочника",
                                              "type": "integer",
                                              "format": "int32",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "start": {
                                              "description": "Номер строки, с которой осуществляется выборка",
                                              "type": "integer",
                                              "format": "int32",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "end": {
                                              "description": "Номер строки, которой заканчивается выборка",
                                              "type": "integer",
                                              "format": "int32",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "elementId": {
                                              "description": "Идентификатор элемента в справочнике (обязателен для заполнения, если передаётся)",
                                              "type": "string",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "version": {
                                              "description": "Версия запроса, по умолчанию 1. Для 2-ой версии в ответе для каждого элемента справочника будет отображаться дополнительное поле isDeleted",
                                              "type": "integer",
                                              "format": "int32",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          },
                                          "showDeleted": {
                                              "description": "Отображать удаленные записи",
                                              "type": "boolean",
                                              "xml": {
                                                  "prefix": "ehd"
                                              }
                                          }
                                      },
                                      "required": [
                                          "dictionaryId",
                                          "end"
                                      ]
                                  }
                              },
                              "required": [
                                  "getDictItem"
                              ]
                          }
                      }
                  }
              ]
          },
          "setDataInRequest": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "$ref": "#/components/schemas/setDataInBody"
                  }
              ]
          },
          "setDataInBody": {
              "type": "object",
              "properties": {
                  "Body": {
                      "properties": {
                          "setDataIn": {
                              "type": "object",
                              "xml": {
                                  "prefix": "ehd",
                                  "name": "setDataIn"
                              },
                              "properties": {
                                  "xml": {
                                      "properties": {
                                          "message": {
                                              "properties": {
                                                  "id": {
                                                      "description": "GUID пакета",
                                                      "type": "string",
                                                      "example": "daa690b9-0429-461e-b39d-04bb7d8e40b3"
                                                  },
                                                  "catalog": {
                                                      "properties": {
                                                          "parent_catalog_id": {
                                                              "type": "integer",
                                                              "example": 245245,
                                                              "xml": {
                                                                  "attribute": true
                                                              }
                                                          },
                                                          "item": {
                                                              "properties": {
                                                                  "action": {
                                                                      "type": "string",
                                                                      "example": "modified",
                                                                      "xml": {
                                                                          "attribute": true
                                                                      },
                                                                      "enum": [
                                                                          "added",
                                                                          "deleted",
                                                                          "modified"
                                                                      ]
                                                                  },
                                                                  "categories": {
                                                                      "type": "array",
                                                                      "items": {
                                                                          "properties": {
                                                                              "category": {
                                                                                  "type": "integer",
                                                                                  "example": 2401,
                                                                                  "format": "int32",
                                                                                  "xml": {
                                                                                      "wrapped": true
                                                                                  }
                                                                              }
                                                                          }
                                                                      }
                                                                  },
                                                                  "geodata": {
                                                                      "type": "string",
                                                                      "example": "{\"rings\" : [[ [37.12,55.51], [37.21,55.61], [37.38,55.66], [37.12,55.51] ]]}"
                                                                  },
                                                                  "data": {
                                                                      "type": "array",
                                                                      "items": {
                                                                          "properties": {
                                                                              "attribute": {
                                                                                  "xml": {
                                                                                      "wrapped": true
                                                                                  },
                                                                                  "properties": {
                                                                                      "field_id": {
                                                                                          "type": "integer",
                                                                                          "example": 58538,
                                                                                          "xml": {
                                                                                              "attribute": true
                                                                                          }
                                                                                      },
                                                                                      "type": {
                                                                                          "type": "string",
                                                                                          "example": "STRING",
                                                                                          "xml": {
                                                                                              "attribute": true
                                                                                          },
                                                                                          "enum": [
                                                                                              "INTEGER",
                                                                                              "INT",
                                                                                              "STRING",
                                                                                              "DATE",
                                                                                              "DICT",
                                                                                              "TABLE",
                                                                                              "FILE",
                                                                                              "BOOLEAN",
                                                                                              "LINK"
                                                                                          ]
                                                                                      },
                                                                                      "pk": {
                                                                                          "type": "boolean",
                                                                                          "example": false,
                                                                                          "xml": {
                                                                                              "attribute": true
                                                                                          }
                                                                                      },
                                                                                      "isManual": {
                                                                                          "type": "boolean",
                                                                                          "example": false,
                                                                                          "xml": {
                                                                                              "attribute": true
                                                                                          }
                                                                                      },
                                                                                      "values": {
                                                                                          "type": "array",
                                                                                          "items": {
                                                                                              "properties": {
                                                                                                  "value": {
                                                                                                      "xml": {
                                                                                                          "wrapped": true
                                                                                                      },
                                                                                                      "oneOf": [
                                                                                                          {
                                                                                                              "type": "string",
                                                                                                              "example": "проект"
                                                                                                          },
                                                                                                          {
                                                                                                              "properties": {
                                                                                                                  "file": {
                                                                                                                      "type": "array",
                                                                                                                      "items": {
                                                                                                                          "properties": {
                                                                                                                              "name": {
                                                                                                                                  "type": "string",
                                                                                                                                  "example": "example",
                                                                                                                                  "xml": {
                                                                                                                                      "wrapped": true
                                                                                                                                  }
                                                                                                                              },
                                                                                                                              "extension": {
                                                                                                                                  "type": "string",
                                                                                                                                  "example": "txt",
                                                                                                                                  "xml": {
                                                                                                                                      "wrapped": true
                                                                                                                                  }
                                                                                                                              },
                                                                                                                              "content": {
                                                                                                                                  "type": "string",
                                                                                                                                  "example": "ZXhhbXBsZQ==",
                                                                                                                                  "xml": {
                                                                                                                                      "wrapped": true
                                                                                                                                  }
                                                                                                                              }
                                                                                                                          },
                                                                                                                          "required": [
                                                                                                                              "name",
                                                                                                                              "extension",
                                                                                                                              "content"
                                                                                                                          ]
                                                                                                                      }
                                                                                                                  }
                                                                                                              }
                                                                                                          }
                                                                                                      ]
                                                                                                  }
                                                                                              }
                                                                                          }
                                                                                      }
                                                                                  }
                                                                              }
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          }
                                                      }
                                                  }
                                              }
                                          }
                                      },
                                      "required": [
                                          "message"
                                      ]
                                  }
                              },
                              "required": [
                                  "xml"
                              ]
                          }
                      },
                      "required": [
                          "setDataIn"
                      ]
                  }
              }
          },
          "setDataInSignatureRequest": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/setSignatureHeadRequest"
                  },
                  {
                      "$ref": "#/components/schemas/setDataInBody"
                  }
              ]
          },
          "geoDataJson": {
              "description": "Геоданные в формате json",
              "type": "object",
              "properties": {
                  "type": {
                      "enum": [
                          "Point",
                          "MultiPoint",
                          "MultiLineString",
                          "MultiPolygon"
                      ]
                  },
                  "coordinates": {
                      "type": "array",
                      "items": {
                          "oneOf": [
                              {
                                  "$ref": "geodata.yaml#/components/schemas/Point"
                              },
                              {
                                  "$ref": "geodata.yaml#/components/schemas/MultiPoint"
                              },
                              {
                                  "$ref": "geodata.yaml#/components/schemas/MultiLineString"
                              },
                              {
                                  "$ref": "geodata.yaml#/components/schemas/MultiPolygon"
                              }
                          ]
                      }
                  }
              }
          },
          "setDataInResponse": {
              "type": "object",
              "allOf": [
                  {
                      "$ref": "#/components/schemas/EhdEnvelopeWithHeader"
                  },
                  {
                      "properties": {
                          "Body": {
                              "type": "object",
                              "properties": {
                                  "setDataInResponse": {
                                      "xml": {
                                          "prefix": "ehd"
                                      },
                                      "properties": {
                                          "xmlns:ns2": {
                                              "xml": {
                                                  "attribute": true
                                              }
                                          },
                                          "xmlns:ns3": {
                                              "xml": {
                                                  "attribute": true
                                              },
                                              "enum": [
                                                  "http://ehd.mos.com"
                                              ]
                                          },
                                          "setDataResponse": {
                                              "xml": {
                                                  "prefix": "ehd"
                                              },
                                              "properties": {
                                                  "status": {
                                                      "type": "integer",
                                                      "format": "int32",
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      }
                                                  },
                                                  "message": {
                                                      "type": "string",
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      }
                                                  },
                                                  "detail_message": {
                                                      "type": "string",
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      }
                                                  },
                                                  "global_id": {
                                                      "type": "integer",
                                                      "format": "int32",
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      }
                                                  },
                                                  "system_object_id": {
                                                      "type": "integer",
                                                      "format": "int32",
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      }
                                                  },
                                                  "action": {
                                                      "type": "string",
                                                      "xml": {
                                                          "prefix": "ehd"
                                                      }
                                                  }
                                              },
                                              "required": [
                                                  "status",
                                                  "message",
                                                  "detail_message",
                                                  "global_id",
                                                  "system_object_id",
                                                  "action"
                                              ]
                                          }
                                      },
                                      "required": [
                                          "setDataResponse"
                                      ]
                                  }
                              },
                              "required": [
                                  "setDataInResponse"
                              ]
                          }
                      }
                  }
              ]
          },
          "BackgroundCheckInfo": {
              "description": "Данные фоновой проверки",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор фоновой проверки",
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                  },
                  "catalogId": {
                      "description": "Идентификатор каталога для фоновой проверки",
                      "type": "integer",
                      "format": "int32",
                      "writeOnly": true
                  },
                  "email": {
                      "description": "E-mail, на который высылаются результаты фоновой проверки",
                      "type": "string"
                  },
                  "condition": {
                      "description": "Ограничение выборки, описанное пользователем в формате TOML. Передаётся в виде строки с экранированием символов.",
                      "type": "string"
                  },
                  "isFullBackgroundCheck": {
                      "description": "Полная фоновая проверка",
                      "type": "boolean",
                      "default": true
                  },
                  "checkAttributes": {
                      "description": "Проверка свойств атрибутов",
                      "type": "boolean",
                      "default": true
                  },
                  "checkRegexps": {
                      "description": "Проверка регулярных выражений",
                      "type": "boolean",
                      "default": true
                  },
                  "checkSearchIndex": {
                      "description": "Проверка поискового индекса",
                      "type": "boolean",
                      "default": true
                  },
                  "launchMainProcess": {
                      "description": "Запуск главного процесса конструктора проверок",
                      "type": "boolean",
                      "default": true
                  },
                  "constructorPackage": {
                      "description": "Тех. наименование пакета конструктора проверок. Указывается, если выбран запуск отдельного пакета",
                      "type": "string"
                  },
                  "manageChangingObjects": {
                      "description": "Изменения объекта в ходе фоновой проверки",
                      "$ref": "#/components/schemas/ChangeObjectInProcessTag"
                  }
              },
              "required": [
                  "catalogId",
                  "isFullBackgroundCheck",
                  "checkAttributes",
                  "checkRegexps",
                  "checkSearchIndex",
                  "manageChangingObjects"
              ]
          },
          "ChangeObjectInProcessTag": {
              "description": "Тэг для поля \"Изменения объектов в ходе фоновой проверки\":\n  - `logOnly` - Формировать лог фоновой проверки, \n  - `logErrors` - Формировать лог и помечать объекты ошибочными, \n  - `logErrorsChange` - Формировать лог, помечать объекты ошибочными и выполнять изменение через автопроцессы.",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "logOnly",
                          "logErrors",
                          "logErrorsChange"
                      ]
                  }
              ]
          },
          "CatalogBackgroundCheckHistoryItem": {
              "description": "Элемент истории фоновой проверки каталога",
              "type": "object",
              "readOnly": true,
              "properties": {
                  "id": {
                      "description": "Идентификатор фоновой проверки каталога",
                      "type": "integer",
                      "format": "int32"
                  },
                  "userName": {
                      "description": "Имя пользователя, запустившего проверку",
                      "type": "string"
                  },
                  "action": {
                      "description": "Действие, может принимать значения \"Запуск фоновой проверки\", \"Запуск периодической фоновой проверки\", \"Сброс ошибок фоновой проверки\".",
                      "type": "string"
                  },
                  "dateStart": {
                      "description": "Дата старта фоновой проверки каталога",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "dateEnd": {
                      "description": "Дата окончания фоновой проверки каталога",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "countInWorkObj": {
                      "description": "Количество объектов, взятых в работу при запуске фоновой проверки",
                      "type": "integer"
                  },
                  "countCheckedObj": {
                      "description": "Количество проверенных объектов (по окончании процесса фоновой проверки)",
                      "type": "integer"
                  },
                  "countErrorObj": {
                      "description": "Количество ошибочных объектов (по окончании процесса фоновой проверки)",
                      "type": "integer"
                  },
                  "logFileId": {
                      "description": "Идентификатор (uuid) файла лога",
                      "type": "string"
                  },
                  "status": {
                      "$ref": "#/components/schemas/BackgroundCheckHistoryStatus"
                  }
              },
              "required": [
                  "id",
                  "action",
                  "dateStart",
                  "countInWorkObj",
                  "countCheckedObj",
                  "status"
              ]
          },
          "BackgroundCheckHistoryStatus": {
              "description": "Статус в истории фоновых проверок каталога заполнения",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "description": "Идентификатор статуса"
                  },
                  "name": {
                      "$ref": "#/components/schemas/BackgroundCheckHistoryStatusNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/BackgroundCheckHistoryStatusTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ],
              "example": {
                  "id": 1,
                  "name": "В работе",
                  "tagId": "inWork"
              }
          },
          "BackgroundCheckHistoryStatusNameEnum": {
              "description": "Название статуса в истории фоновых проверок каталога заполнения",
              "oneOf": [
                  {
                      "type": "string"
                  }
              ]
          },
          "BackgroundCheckHistoryStatusTagIdEnum": {
              "description": "Технчиеское наименование статуса фоновой проверки в истории фоновых проверок каталога заполнения\n  - `new` - Новый, \n  - `inWork` - В работе, \n  - `canceled` - Проверка отменена пользователем,\n  - `error` - Проверка не завершена: системная ошибка, \n  - `finishedSuccess` - Проверка завершена успешно,\n  - `finishedError` - Проверка завершена с ошибками.",
              "oneOf": [
                  {
                      "type": "string",
                      "enum": [
                          "new",
                          "inWork",
                          "canceled",
                          "error",
                          "finishedSuccess",
                          "finishedError"
                      ]
                  }
              ]
          },
          "AccumulatedCatalogStatusTagIdEnum": {
              "description": "Техническое наименование cтатуса сборного каталога\n  - `inactive` - Неактивный\n  - `active` - Активный",
              "type": "string",
              "enum": [
                  "inactive",
                  "active"
              ]
          },
          "AccumulatedCatalogStatusNameEnum": {
              "description": "Наименование статуса сборного каталога",
              "type": "string"
          },
          "AccumulatedCatalogStatus": {
              "description": "Статус сборного каталога",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "description": "Идентификатор статуса"
                  },
                  "name": {
                      "$ref": "#/components/schemas/AccumulatedCatalogStatusTagIdEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/AccumulatedCatalogStatusNameEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ]
          },
          "AccumulatedCatalogUpdatePeriodicityTagIdEnum": {
              "description": "Техническое наименование периодичности обновления сборного каталога\n  - `daily` - Ежедневно\n  - `weekly` - Еженедельно",
              "type": "string",
              "enum": [
                  "daily",
                  "weekly"
              ]
          },
          "AccumulatedCatalogUpdatePeriodicityNameEnum": {
              "description": "Наименование периодичности обновления сборного каталога",
              "type": "string"
          },
          "AccumulatedCatalogUpdatePeriodicity": {
              "description": "Периодичность обновления сборного каталога",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "description": "Идентификатор статуса"
                  },
                  "name": {
                      "$ref": "#/components/schemas/AccumulatedCatalogUpdatePeriodicityNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/AccumulatedCatalogUpdatePeriodicityTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ]
          },
          "AccumulatedCatalogUpdateStatusTagIdEnum": {
              "description": "Техническое наименование статуса обновления сборного каталога\n  - `waiting` - Подготовка данных\n  - `loading` - Загрузка данных\n  - `processing` - Обработка объектов\n  - `resultUploading` - Подготовка итогового файла\n  - `finished` - Завершено\n  - `error` - Ошибка",
              "type": "string",
              "enum": [
                  "waiting",
                  "loading",
                  "processing",
                  "resultUploading",
                  "finished",
                  "error"
              ]
          },
          "AccumulatedCatalogUpdateStatusNameEnum": {
              "description": "Наименование статуса обновления сборного каталога",
              "type": "string"
          },
          "AccumulatedCatalogUpdateStatus": {
              "description": "Статус обновления сборного каталога",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "description": "Идентификатор статуса"
                  },
                  "name": {
                      "$ref": "#/components/schemas/AccumulatedCatalogUpdateStatusNameEnum"
                  },
                  "tagId": {
                      "$ref": "#/components/schemas/AccumulatedCatalogUpdateStatusTagIdEnum"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "tagId"
              ]
          },
          "AccumulatedCatalogListItem": {
              "description": "Информация о сборном каталоге в списке сборных каталогов",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор сборного каталога",
                      "type": "integer"
                  },
                  "name": {
                      "description": "Наименование сборного каталога",
                      "type": "string"
                  },
                  "sourceCatalogIds": {
                      "description": "Идентификаторы каталогов заполнения, которые являются источниками сборного каталога",
                      "type": "array",
                      "items": {
                          "type": "integer"
                      }
                  },
                  "periodicity": {
                      "$ref": "#/components/schemas/AccumulatedCatalogUpdatePeriodicity"
                  },
                  "status": {
                      "$ref": "#/components/schemas/AccumulatedCatalogStatus"
                  },
                  "lastRun": {
                      "description": "Дата последнего обновления сборного каталога. Если нет, возвращается пустая строка",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "nextRun": {
                      "description": "Дата следующего запуска сборного каталога. Если нет, возвращается пустая строка",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  }
              },
              "required": [
                  "id",
                  "name",
                  "sourceCatalogIds",
                  "periodicity",
                  "status",
                  "lastRun",
                  "nextRun"
              ]
          },
          "AccumulatedCatalogSettings": {
              "description": "Настройки сборного каталога",
              "type": "object",
              "properties": {
                  "settings": {
                      "description": "Настройки сборного каталога в формате TOML",
                      "type": "string"
                  },
                  "customFileIds": {
                      "description": "Информация о кастомных файлах-источниках",
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  }
              },
              "required": [
                  "settings"
              ],
              "example": {
                  "settings": "{TOML}",
                  "customFilesIds": [
                      "0f583f97-9bb7-4b44-b37e-bfae615e4780",
                      "ff531f97-9bb7-4b12-b37e-bfae615e3244"
                  ]
              }
          },
          "ChannelOutput": {
              "description": "Объект с информацией о выходном файле сборного каталога",
              "type": "object",
              "properties": {
                  "channelId": {
                      "description": "Идентификатор выхода сборного каталога",
                      "type": "string"
                  },
                  "filename": {
                      "description": "Название файла с раширением",
                      "type": "string"
                  },
                  "uuid": {
                      "description": "Идентификатор (uuid) сформированного выходного файла",
                      "type": "string"
                  },
                  "sha256sum": {
                      "type": "string",
                      "pattern": "^[a-f0-9]{64}$",
                      "description": "Хэш SHA256 файла"
                  },
                  "totalBytes": {
                      "type": "integer",
                      "description": "Размер файла в байтах"
                  },
                  "objCount": {
                      "type": "integer",
                      "description": "Число объектов в выходном файле"
                  }
              },
              "required": [
                  "channelId",
                  "filename",
                  "uuid",
                  "sha256sum",
                  "totalBytes",
                  "objCount"
              ]
          },
          "AccumulatedCatalogCSVInfo": {
              "description": "Информация о кастомном CSV файле для сборного каталога",
              "type": "object",
              "properties": {
                  "id": {
                      "description": "Идентификатор uuid файла",
                      "type": "string"
                  },
                  "name": {
                      "description": "Имя файла (без расширения)",
                      "type": "string"
                  },
                  "extension": {
                      "description": "Расширение файла, включая точку",
                      "type": "string"
                  },
                  "columnNames": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "encoding": {
                      "description": "Кодировка",
                      "type": "string",
                      "enum": [
                          "UTF-8",
                          "WINDOWS-1251",
                          "MACCYRILLIC",
                          "KOI8-R"
                      ]
                  },
                  "separator": {
                      "description": "Разделитель",
                      "type": "string"
                  },
                  "textLimiter": {
                      "description": "Ограничитель текста",
                      "type": "string"
                  }
              },
              "required": [
                  "id",
                  "name",
                  "extension",
                  "columnNames",
                  "encoding",
                  "separator",
                  "textLimiter"
              ]
          },
          "CustomCSV": {
              "description": "Информация о файле-источнике для сборного каталога формата CSV",
              "type": "object",
              "properties": {
                  "file": {
                      "type": "string",
                      "format": "binary",
                      "description": "Файл с содержимым"
                  },
                  "encoding": {
                      "description": "Кодировка",
                      "type": "string",
                      "enum": [
                          "UTF-8",
                          "WINDOWS-1251",
                          "MACCYRILLIC",
                          "KOI8-R"
                      ]
                  },
                  "separator": {
                      "description": "Разделитель",
                      "type": "string"
                  },
                  "textLimiter": {
                      "description": "Ограничитель текста",
                      "type": "string"
                  }
              },
              "required": [
                  "file",
                  "encoding",
                  "separator",
                  "textLimiter"
              ]
          },
          "CustomCSVProcessedFileInfo": {
              "description": "Информация о колонках загруженного файла csv для сборного каталога",
              "type": "object",
              "properties": {
                  "fileId": {
                      "description": "Идентификатор файла",
                      "type": "string"
                  },
                  "columnNames": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  }
              },
              "required": [
                  "fileId",
                  "columnNames"
              ]
          },
          "AccumulatedCatalogHistoryItem": {
              "description": "Элемент истории обновления сборного каталога",
              "type": "object",
              "properties": {
                  "jobId": {
                      "description": "Идентификатор процесса обновления",
                      "type": "string"
                  },
                  "dateStart": {
                      "description": "Дата и время начала обновления каталога",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "dateEnd": {
                      "description": "Дата и время завершения обновления каталога",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "resultFiles": {
                      "description": "Информация о результирующих выходных файлах в minIO файлового хранилища",
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "id": {
                                  "description": "Идентификатор файла (uuid)",
                                  "type": "string"
                              },
                              "channelId": {
                                  "description": "Идентификатор выхода сборного каталога.\n\nФормируется на основе технического наименования секции, описывающей выход в TOML-спецификации сборного каталога,\nа также на основе типа выхода (snapshot, delta)."
                              }
                          },
                          "required": [
                              "id",
                              "channelId"
                          ]
                      }
                  },
                  "status": {
                      "$ref": "#/components/schemas/AccumulatedCatalogUpdateStatus"
                  }
              },
              "required": [
                  "jobId",
                  "dateStart",
                  "status"
              ]
          },
          "AccumulatedCatalogSourceExportHistoryItem": {
              "description": "Элемент истории выгрузок источников сборного каталога",
              "type": "object",
              "allOf": [
                  {
                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                  }
              ],
              "properties": {
                  "exportId": {
                      "description": "Идентификатор процесса выгрузки",
                      "type": "integer"
                  },
                  "dateStart": {
                      "description": "Дата и время начала выгрузки каталога заполнения",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "dateEnd": {
                      "description": "Дата и время завершения выгрузки каталога заполнения",
                      "allOf": [
                          {
                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                          }
                      ]
                  },
                  "resultFileId": {
                      "description": "Идентификатор результирующего файла в minIO файлового хранилища",
                      "type": "string"
                  },
                  "userName": {
                      "description": "ФИО пользователя, изменившего статус сборного каталога на активный и запустившего выгрузку",
                      "type": "string"
                  },
                  "status": {
                      "$ref": "exports.yaml#/components/schemas/ExportStatus"
                  },
                  "countAllObj": {
                      "type": "integer",
                      "description": "Общее количество объектов в экспорте"
                  }
              },
              "required": [
                  "exportId",
                  "dateStart",
                  "status"
              ]
          }
      },
      "parameters": {
          "offsetQueryParam": {
              "name": "offset",
              "in": "query",
              "description": "Позиция (индекс), с которой необходимо возвращать элементы из БД (не меньше `0`).\n\nПо умолчанию `0`.",
              "required": false,
              "schema": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "minimum": 0
              }
          },
          "orderByAscQueryParam": {
              "name": "orderBy",
              "in": "query",
              "description": "Порядок сортировки. Допустимые значения:\n  - `asc` - по возрастанию;\n  - `desc` - по убыванию.\n\nПо умолчанию: `asc`.",
              "required": false,
              "schema": {
                  "default": "asc",
                  "allOf": [
                      {
                          "$ref": "#/components/schemas/SortingOrderTagIdEnum"
                      }
                  ]
              }
          },
          "orderByDescQueryParam": {
              "name": "orderBy",
              "in": "query",
              "description": "Порядок сортировки. Допустимые значения:\n  - `asc` - по возрастанию;\n  - `desc` - по убыванию.\n\nПо умолчанию: `desc`.",
              "required": false,
              "schema": {
                  "default": "desc",
                  "allOf": [
                      {
                          "$ref": "#/components/schemas/SortingOrderTagIdEnum"
                      }
                  ]
              }
          },
          "filterOutIdsQueryParam": {
              "name": "filterOutIds",
              "in": "query",
              "description": "Массив идентификаторов сущностей, которые необходимо исключить из общего списка.\n\nПример: окно со списком атрибутов ЕХД, доступных для добавления в каталог.\nНеобходимо исключить атрибуты, которые уже добавлены в каталог.\n\nЧисло элементов в списке от `1` до `100`.",
              "required": false,
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              }
          },
          "catalogIdPathParam": {
              "name": "catalogId",
              "required": true,
              "in": "path",
              "description": "Идентификатор сборного каталога.",
              "schema": {
                  "type": "integer"
              },
              "example": 194700
          },
          "catalogIdQueryParam": {
              "name": "catalogId",
              "in": "query",
              "description": "Идентификатор каталога.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int64"
              },
              "example": 1243761423
          },
          "fillingCatalogIdQueryParam": {
              "name": "fillingCatalogId",
              "in": "query",
              "description": "Идентификатор каталога заполнения.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 6404
          },
          "fillingCatalogIdOptQueryParam": {
              "name": "fillingCatalogId",
              "in": "query",
              "description": "Идентификатор каталога заполнения.",
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 6404
          },
          "catalogIdsQueryParam": {
              "name": "catalogIds",
              "required": true,
              "in": "query",
              "description": "Массив идентификаторов каталогов.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  194700,
                  186532,
                  11033
              ]
          },
          "catalogIdsOptQueryParam": {
              "name": "catalogIds",
              "required": false,
              "in": "query",
              "description": "Список идентификаторов каталогов.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  194700,
                  186532,
                  11033
              ]
          },
          "parentCatalogIdQueryParam": {
              "name": "parentCatalogId",
              "in": "query",
              "description": "Идентификатор родительского каталога.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 194698
          },
          "rootCatalogIdQueryParam": {
              "name": "rootCatalogId",
              "in": "query",
              "description": "Идентификатор корневого каталога.",
              "schema": {
                  "type": "integer",
                  "format": "int64"
              },
              "example": 1243761423
          },
          "catalogStatusesFilterQueryParam": {
              "name": "catalogStatuses",
              "in": "query",
              "description": "Технические статусы возвращаемых каталогов.\n\nИспользуется для фильтрации.\nВ параметре передается массив строк, строка представляет собой ключевое слово.\nНе может передаваться пустой массив.\n\nДопустимые значения:\n  - `active` - активный;\n  - `deleted` - удаленный.",
              "required": false,
              "schema": {
                  "type": "array",
                  "items": {
                      "$ref": "#/components/schemas/CatalogTechStatusTagIdEnum"
                  },
                  "minItems": 1,
                  "maxItems": 2
              }
          },
          "dataModesFilterQueryParam": {
              "name": "dataModes",
              "in": "query",
              "description": "Технические наименования режимов работы с данными возвращаемых каталогов.\n\nИспользуется для фильтрации.\nВ параметре передается строка. Не может передаваться пустая строка.\n\nДопустимые значения:\n  - `filling` - заполнение;\n  - `publication` - публикация.\n\nПо умолчанию `filling`.",
              "required": false,
              "schema": {
                  "type": "string",
                  "items": {
                      "$ref": "#/components/schemas/DataModeTagIdEnum"
                  }
              }
          },
          "forLinksCatalogQueryParam": {
              "name": "forLinks",
              "description": "Указывает, что необходимо получить каталоги, которые можно указать в качестве ссылочных.\nДанные каталоги имеют атрибут с отмеченным свойством \"Главный\".",
              "in": "query",
              "required": false,
              "schema": {
                  "type": "boolean",
                  "default": false
              }
          },
          "forLinksCatalogAttributeQueryParam": {
              "name": "forLinks",
              "description": "Указывает, что необходимо получить атрибуты каталога, которые можно использовать в качестве атрибута для связи.\n\nАтрибуты должны иметь тип: строка, дробное число, дата, справочник, ссылка на объект, целое число.\n\nИсключаются типы: файл, флаг, таблица.",
              "in": "query",
              "required": false,
              "schema": {
                  "type": "boolean",
                  "default": false
              }
          },
          "catalogGroupIdQueryParam": {
              "name": "catalogGroupId",
              "in": "query",
              "description": "Идентификатор группы каталогов. Необязательный параметр. Если указан, следует исключать из выборки все каталоги, имеющие связи с группой каталогов",
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "required": false,
              "example": 12
          },
          "userIdQueryParam": {
              "name": "userId",
              "in": "query",
              "description": "Идентификатор пользователя. Необязательный параметр. Если указан, следует исключать из выборки все группы каталогов, имеющие связи с пользователем",
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "required": false,
              "example": 189776
          },
          "subscriptionIdQueryParam": {
              "name": "subscriptionId",
              "in": "query",
              "description": "Идентификатор подписки на push-уведомления. Необязательный параметр. Если указан, следует исключать из выборки все каталоги, имеющие связи с подпиской.",
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "required": false,
              "example": 243
          },
          "oivIdQueryParam": {
              "name": "oivId",
              "in": "query",
              "description": "Идентификатор ОИВ. Необязательный параметр. Если передается oivId, то в ответе возвращаются пользователи, связанные с указанным ОИВ.",
              "required": false,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 25
          },
          "isAdminQueryParam": {
              "name": "isAdmin",
              "in": "query",
              "description": "Признак администратора",
              "required": false,
              "schema": {
                  "type": "boolean",
                  "default": false
              },
              "example": false
          },
          "userIdPathParam": {
              "name": "userId",
              "in": "path",
              "description": "Идентификатор пользователя.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 188945
          },
          "specPrivilegeIdsQueryParam": {
              "name": "specPrivilegeIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов спецпривилегий.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  2345123
              ]
          },
          "specRolesIdsQueryParam": {
              "name": "specRolesIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов спецролей.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  2345123
              ]
          },
          "userIdsQueryParam": {
              "name": "userIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов пользователей.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  7
              ]
          },
          "dataModeFilterQueryParam": {
              "name": "dataMode",
              "in": "query",
              "description": "Технические наименования режимов работы с данными возвращаемых каталогов и групп каталогов.\n\nИспользуется для фильтрации.\nВ параметре передается строка. Не может передаваться пустая строка.\n\nДопустимые значения:\n  - `fillingCatalog` - Каталоги заполнения\n  - `publicationCatalog` - Каталоги публикации\n  - `catalogGroup` - Группы каталогов\n  - `all` - Все\n\nПо умолчанию `all`.",
              "required": false,
              "schema": {
                  "type": "string",
                  "items": {
                      "$ref": "#/components/schemas/DataModeTagIdEnum"
                  }
              }
          },
          "systemIdPathParam": {
              "name": "systemId",
              "in": "path",
              "description": "Идентификатор информационной системы.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 29
          },
          "systemIdQueryParam": {
              "name": "systemId",
              "in": "query",
              "description": "Идентификатор информационной системы.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 10570
          },
          "systemIdsQueryParam": {
              "name": "systemIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов систем.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  7
              ]
          },
          "systemConsumerIdFilterQueryParam": {
              "name": "systemConsumerId",
              "in": "query",
              "required": false,
              "description": "Идентификатор системы-потребителя. Используется для фильтрации по системе-потребителю.",
              "schema": {
                  "type": "integer"
              }
          },
          "typeIntegrationQueryParam": {
              "name": "typeIntegration",
              "in": "query",
              "required": false,
              "description": "Указывает с каким типом интеграции необходимо получить системы:\n  - `consumer` - потребитель\n  - `supplier` - поставщик\n\nВ параметре передается массив тэгов. Если массив не передан, возвращаются любые типы интеграций",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "string",
                      "enum": [
                          "consumer",
                          "supplier"
                      ]
                  }
              }
          },
          "thematicCategoryIdsQueryParam": {
              "name": "categoryIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов тематических категорий.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  7
              ]
          },
          "thematicCategoryIdFilterQueryParam": {
              "name": "thematicCategoryId",
              "in": "query",
              "required": false,
              "description": "Идентификатор тематической категории. Используется для фильтрации по тематической категории.",
              "schema": {
                  "type": "integer"
              }
          },
          "thematicCategoryIdPathParam": {
              "name": "thematicCategoryId",
              "in": "path",
              "description": "Идентификатор тематической категории.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 6
          },
          "attributeIdPathParam": {
              "name": "attributeId",
              "in": "path",
              "description": "Идентификатор атрибута.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 1
          },
          "groupIdPathParam": {
              "name": "groupId",
              "in": "path",
              "description": "Идентификатор группы атрибутов.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 1
          },
          "attributeIdsQueryParam": {
              "name": "attributeIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов атрибутов.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  1,
                  3,
                  4
              ]
          },
          "attributeIdsOptQueryParam": {
              "name": "attributeIds",
              "required": false,
              "in": "query",
              "description": "Список идентификаторов атрибутов.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  1,
                  3,
                  4
              ]
          },
          "attributeTypesQueryParam": {
              "name": "attributeTypes",
              "in": "query",
              "description": "Типы атрибутов, которые необходимо вернуть.\nВ параметре передается массив технических наименований типов атрибутов.\n\nЕсли массив не передан, возвращаются атрибуты всех типов.",
              "required": false,
              "schema": {
                  "type": "array",
                  "items": {
                      "$ref": "#/components/schemas/AttributeTypeTagIdEnum"
                  },
                  "minItems": 1
              }
          },
          "searchIndexIdPathParam": {
              "name": "indexId",
              "in": "path",
              "description": "Идентификатор индекса.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 6
          },
          "queryQueryParam": {
              "name": "query",
              "in": "query",
              "description": "Значение поискового запроса",
              "required": true,
              "schema": {
                  "type": "string"
              },
              "example": "проспект Ленина 16"
          },
          "searchIndexIdsQueryParam": {
              "name": "indexIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов поисковых индексов.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  7,
                  12
              ]
          },
          "searchIndexStatusesQueryParam": {
              "name": "objectStatuses",
              "in": "query",
              "description": "Статусы возвращаемых поисковых индексов, используется для фильтрации по статусу индекса.\n\nВ массиве передаются технические названия статусов. Массив не может быть пустым.",
              "schema": {
                  "type": "array",
                  "items": {
                      "$ref": "#/components/schemas/SearchIndexStatusTagIdEnum"
                  },
                  "minItems": 1
              }
          },
          "objectCategoryIdPathParam": {
              "name": "categoryId",
              "in": "path",
              "description": "Идентификатор категории объектов.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 7
          },
          "objectCategoryIdsQueryParam": {
              "name": "categoryIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов категорий объектов.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  7
              ]
          },
          "dictionaryIdPathParam": {
              "name": "dictionaryId",
              "in": "path",
              "description": "Идентификатор справочника.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 6
          },
          "dictionaryIdQueryParam": {
              "name": "dictionaryId",
              "in": "query",
              "description": "Идентификатор справочника.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 84
          },
          "dictionaryIdsQueryParam": {
              "name": "dictionaryIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов справочников.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  194700,
                  186532,
                  11033
              ]
          },
          "auxDictTagIdPathParam": {
              "name": "auxDictTagId",
              "in": "path",
              "description": "Строковый идентификатор вспомогательного справочника",
              "required": true,
              "schema": {
                  "type": "string",
                  "enum": [
                      "kindCatalog",
                      "typeCatalog",
                      "periodUpdate",
                      "publicationStatus",
                      "filterOperator",
                      "objectStatus",
                      "publObjectStatus",
                      "attributeType",
                      "signStatus",
                      "subCatalogHistory",
                      "subCatalogHistoryType",
                      "subObjectLog",
                      "importHistoryStatus",
                      "datasetSeasonality",
                      "datasetDictType",
                      "sysColumns",
                      "generalInfoSyncedProperty",
                      "metadataSyncedProperty",
                      "mapSyncedProperty",
                      "rubric",
                      "searchIndexStatus",
                      "userGroup",
                      "userPrivilege",
                      "mailingStatus",
                      "menu",
                      "userStatus",
                      "securityEvent",
                      "lastChangeType",
                      "pushsubStatus",
                      "geoType"
                  ]
              },
              "example": "kindCatalog"
          },
          "dictionaryElementIdPathParam": {
              "name": "dictionaryElementId",
              "in": "path",
              "description": "Идентификатор элемента справочника.",
              "required": true,
              "schema": {
                  "type": "string"
              },
              "example": 6
          },
          "dictionaryElementIdsQueryParam": {
              "name": "dictionaryElementIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов элементов справочника.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "string"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  "43",
                  "343",
                  "64"
              ]
          },
          "dictionaryElementStatusesFilterQueryParam": {
              "name": "dictionaryElementStatuses",
              "in": "query",
              "description": "Статусы элементов справочника.\n\nИспользуется для фильтрации.\nВ параметре передается массив строк, строка представляет собой ключевое слово.\nНе может передаваться пустой массив.\n\nДопустимые значения:\n  - `active` - активный;\n  - `deleted` - удаленный.",
              "required": false,
              "schema": {
                  "type": "array",
                  "items": {
                      "$ref": "#/components/schemas/DictionaryElementStatusTagIdEnum"
                  },
                  "minItems": 1,
                  "maxItems": 2
              }
          },
          "userConfirmedDeletionQueryParam": {
              "name": "userConfirmedDeletion",
              "in": "query",
              "description": "Пользователь подтвердил удаление элементов справочника.\n\nПередается `false` при первом запросе на удаление, `true` - после подтверждения пользователем. \n\nЕсли `true`, то не проверять элементы на использование в системе и удалять их без предупреждения.",
              "required": false,
              "schema": {
                  "type": "boolean",
                  "default": false
              },
              "example": true
          },
          "dictElemSearchParam": {
              "name": "search",
              "in": "query",
              "description": "Текстовый поисковый запрос по списку элементов справочника. Поиск производится по идентификатору и наименованию.\n\nЗапрос со значением `123` вернет все элементы справочника, идентификатор или наименование которых содержит подстроку `123`.",
              "required": false,
              "schema": {
                  "type": "string"
              }
          },
          "exportIdPathParam": {
              "name": "exportId",
              "in": "path",
              "description": "Идентификатор экспорта.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 642
          },
          "oivIdPathParam": {
              "name": "oivId",
              "in": "path",
              "description": "Идентификатор ОИВ.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 25
          },
          "oivIdsQueryParam": {
              "name": "oivIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов ОИВов.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  7
              ]
          },
          "oivIdFilterQueryParam": {
              "name": "catalogGroupId",
              "in": "query",
              "required": false,
              "description": "Идентификатор поставщика данных (ОИВ). Используется для фильтрации по ОИВ.",
              "schema": {
                  "type": "integer"
              }
          },
          "regexIdPathParam": {
              "name": "regexId",
              "in": "path",
              "description": "Идентификатор регулярного выражения.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 18
          },
          "regexIdQueryParam": {
              "name": "regexId",
              "in": "query",
              "description": "Идентификатор регулярного выражения.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 84
          },
          "regexIdsQueryParam": {
              "name": "regexIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов регулярных выражений.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  786,
                  32,
                  43
              ]
          },
          "FetchGeodataQueryParam": {
              "name": "fetchGeodata",
              "in": "query",
              "description": "Признак, указывающий на включение в ответ геоданных объекта в заданной системе координат.\nДоступны следующие варианты:\n  - `признак не передаётся` - объект возвращается без геоданных,\n  - `EPSG:4326` - геоданные объекта возвращаются в системе координат WGS84,\n  - `MSK:77` - геоданные объекта возвращаются в системе координат MSK77,\n  - `default` - геоданные объекта возвращаются в системе координт, заданной настройками каталога.",
              "schema": {
                  "type": "string",
                  "enum": [
                      "EPSG:4326",
                      "MSK:77",
                      "default"
                  ]
              },
              "required": false
          },
          "FetchGeodataPublQueryParam": {
              "name": "fetchGeodata",
              "in": "query",
              "description": "Признак, указывающий на включение в ответ геоданных объекта публикации. \nВ публикации геоданные объекта хранятся в системе координат WGS84. ",
              "schema": {
                  "type": "boolean",
                  "default": true
              },
              "required": false
          },
          "FetchGeodataExportQueryParam": {
              "name": "fetchGeodata",
              "in": "query",
              "description": "Признак, указывающий на включение в экспорт каталога заполнения геоданных объектов в заданной системе координат.\nДоступны следующие варианты:\n  - `признак не передаётся` - объекты возвращаются без геоданных,\n  - `EPSG:4326` - геоданные объекта возвращаются в системе координат WGS84,\n  - `default` - геоданные объекта возвращаются в системе координт, заданной настройками каталога.",
              "schema": {
                  "type": "string",
                  "enum": [
                      "EPSG:4326",
                      "default"
                  ]
              },
              "required": false
          },
          "FetchGeodataExportPublQueryParam": {
              "name": "fetchGeodata",
              "in": "query",
              "description": "Признак, указывающий на включение в экспорт каталога публикации геоданных объектов.\nВ каталоге публикации геоданные возвращаются в системе координат WGS84.",
              "schema": {
                  "type": "boolean",
                  "default": false
              },
              "required": false
          },
          "publicationCatalogIdQueryParam": {
              "name": "publicationCatalogId",
              "in": "query",
              "description": "Идентификатор каталога публикации",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 197400
          },
          "versionQueryParam": {
              "name": "version",
              "in": "query",
              "description": "Номер версии каталога публикаци.\n\nПо умолчанию возвращается последняя версия.",
              "required": false,
              "schema": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
              }
          },
          "newPublicationCatalogStatusQueryParam": {
              "name": "status",
              "in": "query",
              "description": "Новый статус каталога публикации.",
              "required": true,
              "schema": {
                  "$ref": "#/components/schemas/PublicationCatalogStatusTagIdEnum"
              }
          },
          "grantedQueryParam": {
              "name": "granted",
              "in": "query",
              "description": "Список идентификаторов систем, для которых доступен каталог публикации.\nОт `1` до `100`.\n\nЕсли параметр `granted` не указан, то каталог не доступен для всех систем.",
              "required": false,
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "minItems": 1,
                  "maxItems": 100
              }
          },
          "forDatasetQueryParam": {
              "name": "forDataset",
              "in": "query",
              "description": "Признак, который указывает, что в ответе должны быть каталоги публикации доступные для связи с набором данных.\nДанные каталоги:\n  - не имеют связей с версиями наборов данных,\n  - в поле \"Системы-потребители\" КП указан Портал открытых данных.\nС другими параметрами, которые так же влияют на выборку сочетается через оператор \"И\".",
              "required": true,
              "schema": {
                  "type": "boolean"
              }
          },
          "catalogGroupIdPathParam": {
              "name": "catalogGroupId",
              "in": "path",
              "description": "Идентификатор группы каталогов.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 25
          },
          "catalogGroupIdsQueryParam": {
              "name": "catalogGroupIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов групп каталогов.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  7
              ]
          },
          "datasetIdPathParam": {
              "name": "datasetId",
              "in": "path",
              "description": "Идентификатор набора данных",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 64033
          },
          "datasetVersionNumPathParam": {
              "name": "versionNum",
              "in": "path",
              "description": "Номер версии набора данных",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 1
          },
          "datasetReleaseNumPathParam": {
              "name": "releaseNum",
              "in": "path",
              "description": "Номер релиза набора данных в рамках конкретной версии",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 15
          },
          "datasetIdsQueryParam": {
              "name": "datasetIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов наборов данных.\n\nЧисло элементов в списке от `1` до `500`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 500
              },
              "example": [
                  64033,
                  64011,
                  1133
              ]
          },
          "isDictQueryParam": {
              "name": "isDict",
              "required": false,
              "in": "query",
              "description": "Признак, что нужно получить список наборов данных - справочников.",
              "schema": {
                  "type": "boolean"
              }
          },
          "globalIdPathParam": {
              "name": "globalId",
              "in": "path",
              "description": "Глобальный идентификатор объекта.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int64"
              },
              "example": 124376127
          },
          "parentGlobalIdQueryParam": {
              "name": "parentGlobalId",
              "in": "query",
              "description": "Глобальный идентификатор родительского объекта.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int64"
              },
              "example": 1243761423
          },
          "rootGlobalIdQueryParam": {
              "name": "rootGlobalId",
              "in": "query",
              "description": "Глобальный идентификатор корневого объекта (объекта в корневом каталоге, которому принадлежат вложенные объекты).",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int64"
              },
              "example": 3249874123
          },
          "globalIdQueryParam": {
              "name": "globalId",
              "in": "query",
              "description": "Глобальный идентификатор объекта.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int64"
              },
              "example": 124376127
          },
          "globalIdsQueryParam": {
              "name": "globalIds",
              "in": "query",
              "required": false,
              "description": "Глобальные идентификаторы объектов каталога, которые нужно вернуть.\n\nМожет использоваться для дополнительной фильтрации при работе со списком объектов ссылочного атрибута. Массив не может быть пустым.",
              "schema": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                      "type": "integer",
                      "format": "int64"
                  }
              }
          },
          "globalIdsRequiredQueryParam": {
              "name": "globalIds",
              "in": "query",
              "required": true,
              "description": "Глобальные идентификаторы объектов каталога.\n\nМассив не может быть пустым.",
              "schema": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                      "type": "integer",
                      "format": "int64"
                  }
              }
          },
          "objectStatusesQueryParam": {
              "name": "objectStatuses",
              "in": "query",
              "description": "Статусы возвращаемых объектов, используется для фильтрации по статусу объекта.\n\nВ массиве передаются технические названия статусов. Массив не может быть пустым.",
              "schema": {
                  "type": "array",
                  "items": {
                      "$ref": "#/components/schemas/ObjectStatusTagIdEnum"
                  },
                  "minItems": 1
              }
          },
          "objectIdsQueryParam": {
              "name": "objectIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов объектов каталога.\n\nЧисло элементов в списке от `1` до `500`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "minItems": 1,
                  "maxItems": 500
              },
              "example": [
                  454,
                  323,
                  783
              ]
          },
          "signedVersionQueryParam": {
              "name": "signedVersion",
              "description": "Указывает, что необходимо получить последние подписанные версии объектов.\nТакие версии есть у объектов во всех статусах, кроме new. ",
              "in": "query",
              "required": false,
              "schema": {
                  "type": "boolean",
                  "default": false
              }
          },
          "isErrorQueryParam": {
              "name": "isError",
              "description": "Указывает, что необходимо получить объекты, имеющие статус \"Ошибка\". \nЕсли параметр не передан или имеет значение null, тогда возвращаются все объекты каталога.",
              "in": "query",
              "required": false,
              "schema": {
                  "type": "boolean"
              }
          },
          "publicationStatusesQueryParam": {
              "name": "objectStatuses",
              "in": "query",
              "description": "Статусы возвращаемых объектов каталога публикации, используется для фильтрации по статусу объекта.\n\nВ массиве передаются технические названия статусов. Массив не может быть пустым.",
              "required": false,
              "schema": {
                  "type": "array",
                  "items": {
                      "$ref": "#/components/schemas/PublicationObjectStatusTagIdEnum"
                  },
                  "minItems": 1
              }
          },
          "importIdPathParam": {
              "name": "importId",
              "in": "path",
              "description": "Идентификатор импорта.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 5392
          },
          "importIdQueryParam": {
              "name": "importId",
              "in": "query",
              "description": "Идентификатор импорта.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 5392
          },
          "importIdsQueryParam": {
              "name": "importIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов импортов.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  356,
                  923,
                  76
              ]
          },
          "subscriptionIdPathParam": {
              "name": "subscriptionId",
              "in": "path",
              "description": "Идентификатор подписки.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 25
          },
          "subscriptionIdsQueryParam": {
              "name": "subscriptionIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов подписок.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  7
              ]
          },
          "RedirectUrlQueryParam": {
              "name": "redirectUrl",
              "required": true,
              "in": "query",
              "description": "Возвратный url (раздел, из которого пользователь запросил аутентификацию)",
              "schema": {
                  "type": "string"
              },
              "example": "https://ehd-tools-test.mos.ru/keycloak/admin/master/console/#/master/authentication/policies"
          },
          "AuthCodeQueryParam": {
              "name": "authCode",
              "required": true,
              "in": "query",
              "description": "Код авторизации KeyCloack",
              "schema": {
                  "type": "string"
              },
              "example": "sjdfshkshkshkshf&Jfufjr4"
          },
          "accessJwtIdsQueryParam": {
              "name": "accessJwtIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов пользователей.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "string"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  "sfsfsfercrqefasef"
              ]
          },
          "tokenHeaderParam": {
              "description": "Токен доступа пользователя.",
              "name": "Authorization",
              "in": "header",
              "schema": {
                  "type": "string"
              },
              "required": true,
              "example": "Bearer kjsfjsfkjslfkjslkfjslkfjlksikvvd"
          },
          "signatureIdPathParam": {
              "name": "signatureId",
              "in": "path",
              "description": "Идентификатор подписания каталога.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 45342
          },
          "signatureIdQueryParam": {
              "name": "signatureId",
              "in": "query",
              "description": "Идентификатор подписания каталога, полученный на этапе формирования хэша.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              }
          },
          "checkCatalogFilterQueryParam": {
              "name": "checkCatalog",
              "in": "query",
              "description": "Список проверок, которые будут запускаться для каталога.\nВ параметре передается массив строк, строка представляет собой ключевое слово.\n\nДопустимые значения: \n- `isSigning` - находится ли каталог в процессе подписания, \n- `userRights` - проверка, что у пользователя есть права на подписание данных каталога, \n- `FLKErrors` - проверка, есть ли объекты с ошибками ФЛК,\n- `responsiblePerson` - проверка, указано ли у каталога ответственное лицо.\n- `description` - проверка, заполнено ли описание каталога,\n- `isImport` - находится ли каталог в процессе импорта.",
              "required": false,
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "string",
                      "enum": [
                          "isSigning",
                          "userRights",
                          "FLKErrors",
                          "responsiblePerson",
                          "description",
                          "isImport"
                      ]
                  },
                  "minItems": 1
              }
          },
          "fileIdPathParam": {
              "name": "fileId",
              "in": "path",
              "description": "Идентификатор uuid файла.",
              "required": true,
              "schema": {
                  "type": "string"
              },
              "example": "ace20e83-1076-4729-9087-f88a9e7fc716"
          },
          "fileIdQueryParam": {
              "name": "fileId",
              "in": "query",
              "description": "Идентификатор uuid файла.",
              "required": true,
              "schema": {
                  "type": "string"
              },
              "example": "cc8eb1d3-8b42-403a-bbd9-918220a8321f"
          },
          "fileSizeModeQueryParam": {
              "name": "fileSizeMode",
              "required": true,
              "in": "query",
              "description": "Размер изображения для отображения. \n\nДоступные значения:\n - `original` - оригинал изображения\n - `thumbnail` - миниатюра изображения",
              "schema": {
                  "type": "string",
                  "default": "original",
                  "enum": [
                      "original",
                      "thumbnail"
                  ]
              },
              "example": "original"
          },
          "reasonQueryParam": {
              "name": "reason",
              "in": "query",
              "description": "Причина публикации объектов каталога публикации",
              "required": true,
              "schema": {
                  "$ref": "#/components/schemas/PublicationReasonTagIdEnum"
              },
              "example": "isSign"
          },
          "lockIdsQueryParam": {
              "name": "lockIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов блокировок.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  7
              ]
          },
          "lockIdPathParam": {
              "name": "lockId",
              "in": "path",
              "description": "Идентификатор блокировки.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 6
          },
          "exportSignedQueryParam": {
              "name": "exportSigned",
              "in": "query",
              "description": "Признак, что необходимо экспортировать только подписанные объекты, то есть со статусами signed, deleted.",
              "schema": {
                  "type": "boolean",
                  "default": false
              },
              "required": false,
              "example": false
          },
          "exportDeletedQueryParam": {
              "name": "exportDeleted",
              "in": "query",
              "description": "Признак, что необходимо включить в экспорт удаленные объекты, то есть со статусами toDeletion, deleted, toRecovery.",
              "schema": {
                  "type": "boolean",
                  "default": false
              },
              "required": false,
              "example": false
          },
          "exportTypeQueryParam": {
              "name": "type",
              "in": "query",
              "description": "Тип экспорта. По умолчанию используется тип 'csv', который инициирует добавление в очередь экспорта в формате csv.",
              "schema": {
                  "$ref": "#/components/schemas/PublicExportTypeTagIdEnum",
                  "default": "csv"
              },
              "required": false,
              "example": "csv"
          },
          "exportOnlyRootCatalogQueryParam": {
              "name": "onlyRootCatalog",
              "in": "query",
              "description": "Признак, указывающий, что необходимо произвести экспорт только основного каталога, без вложенных.",
              "schema": {
                  "type": "boolean",
                  "default": false
              },
              "required": false,
              "example": false
          },
          "exportIdsPathParam": {
              "name": "exportIds",
              "in": "path",
              "description": "Список идентификаторов экспорта.",
              "required": true,
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "example": [
                  642,
                  643
              ]
          },
          "fileUuidPathParam": {
              "name": "id",
              "in": "path",
              "description": "Uuid вложения, размещенного в ЕХД.",
              "required": true,
              "schema": {
                  "type": "string"
              },
              "example": "65e254c7-c21d-4ba6-9e5e-3efdfa9864c3"
          },
          "fileUuidQueryParam": {
              "name": "id",
              "in": "query",
              "description": "Uuid вложения, размещенного в ЕХД.",
              "required": true,
              "schema": {
                  "type": "string"
              },
              "example": "65e254c7-c21d-4ba6-9e5e-3efdfa9864c3"
          },
          "FileIdPathParam": {
              "name": "id",
              "in": "path",
              "description": "Идентификатор файла экспорта, который получен методом POST /publrest/catalog/export",
              "required": true,
              "schema": {
                  "type": "string"
              },
              "example": 1858
          },
          "FileIdQueryParam": {
              "name": "id",
              "in": "query",
              "description": "Идентификатор файла экспорта, который получен методом POST /publrest/catalog/export",
              "required": true,
              "schema": {
                  "type": "string"
              },
              "example": 1858
          },
          "ehdSystemHeaderParam": {
              "description": "Логин информационной системы.",
              "name": "ehd-system",
              "in": "header",
              "schema": {
                  "type": "string"
              },
              "required": true
          },
          "backgroundCheckIdPathParam": {
              "name": "backgroundCheckId",
              "in": "path",
              "description": "Идентификатор фоновой проверки.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 5392
          },
          "backgroundCheckIdQueryParam": {
              "name": "backgroundCheckId",
              "in": "query",
              "description": "Идентификатор фоновой проверки.",
              "required": true,
              "schema": {
                  "type": "integer",
                  "format": "int32"
              },
              "example": 5392
          },
          "backgroundCheckIdsQueryParam": {
              "name": "backgroundCheckIds",
              "required": true,
              "in": "query",
              "description": "Список идентификаторов фоновых проверок.\n\nЧисло элементов в списке от `1` до `100`.",
              "schema": {
                  "type": "array",
                  "items": {
                      "type": "integer"
                  },
                  "minItems": 1,
                  "maxItems": 100
              },
              "example": [
                  356,
                  923,
                  76
              ]
          }
      }
  },
  "paths": {
      "/Общие ошибки API": {
          "get": {
              "tags": [
                  "Общие ошибки API"
              ],
              "summary": "Описание общих ошибок методов API",
              "description": "Представленные ошибки являются общими и могут возникать во всех методах API.\n\nВ остальных методах описываются только ошибки бизнес-логики!",
              "responses": {
                  "400": {
                      "$ref": "#/components/responses/DefaultBadRequestResponse"
                  },
                  "405": {
                      "$ref": "#/components/responses/MethodNotAllowedResponse"
                  },
                  "408": {
                      "$ref": "#/components/responses/TimeoutResponse"
                  },
                  "500": {
                      "$ref": "#/components/responses/InternalServerErrorResponse"
                  }
              }
          }
      },
      "/catalogs/search": {
          "post": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Поиск по списку каталогов заполнения",
              "description": "Возвращает список неудалённых каталогов, где по каждому каталогу содержится информация необходимая для отображения в разделах `Данные по ...`\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации используется тело запроса.",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых каталогов (от `1` до `1000`).",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке каталогов.\nПоиск производится по атрибутам идентификатору и полному наименованию каталога.\n\nЗапрос со значением `12` вернет все каталоги, идентификатор или наименование которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "responsiblePerson",
                              "countActiveObjects",
                              "countUnsignedObjects",
                              "countObjects",
                              "dateLastSign",
                              "dateNextUpdate",
                              "statusSignObjects",
                              "statusSignMetadata"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  },
                  {
                      "name": "statusSigning",
                      "in": "query",
                      "required": false,
                      "description": "Статус подписания каталога. Может принимать следующие значения:\n  - `signed` - подписанный, изменения отсутствуют. Каталог имеет этот статус при выполнении условия:\n    statusSignObjects = signed И statusSignMetadata = signed\n  - `neverSigned` - ни разу не подписан. Каталог имеет этот статус при выполнении условия:\n    dateLastSign=null И statusSignObjects != archive\n  - `hasChange` - подписанный, имеются изменения. Каталог имеет этот статус при выполнении условия:\n    dateLastSign = {value} И (statusSignObjects = unsigned ИЛИ statusSignMetadata = unsigned)\n  - `archive` - в архиве. Каталог имеет этот статус при выполнении условия:\n    statusSignObjects = archive И statusSignMetadata = archive",
                      "schema": {
                          "type": "array",
                          "items": {
                              "type": "string",
                              "enum": [
                                  "signed",
                                  "neverSigned",
                                  "hasChange",
                                  "archive"
                              ]
                          }
                      }
                  },
                  {
                      "name": "planSigning",
                      "in": "query",
                      "required": false,
                      "description": "Статус просрочки подписания каталога. Может принимать следующие значения:\n  - `ok` - срок планового подписания не нарушен. Включает каталоги, для которых dateNextUpdate строго больше текущей даты ИЛИ является null.\n  - `less3Day` - до планового подписания менее 3-х дней. Вклячает каталоги, у которых dateNextUpdate меньше или равна текущей даты + 3 дня.\n  - `expired` - плановое подписание просрочено. Включает каталоги, для которых dateNextUpdate строго меньше текущей даты.",
                      "schema": {
                          "type": "array",
                          "items": {
                              "type": "string",
                              "enum": [
                                  "ok",
                                  "less3Day",
                                  "expired"
                              ]
                          }
                      }
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/catalogListRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив.\nЕсли переданы несуществующие идентификаторы категории, ОИВ, системы-потребителя, то также возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/FillingCatalogListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FillingCatalogListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/catalogs/lite/search": {
          "get": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Поиск по списку каталогов заполнения с минимальным набором свойств",
              "description": "Возвращает список неудалённых каталогов заполнения с минимальным набором свойств (идентификатор и наименование)",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых каталогов (от `1` до `1000`).",
                      "schema": {
                          "type": "integer",
                          "default": 1000,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке каталогов.\nПоиск производится по полному наименованию каталога и является регистронезависимым.\nЗапрос со значением `тест` вернет все каталоги, полное наименование которых содержит подстроку `тест` независимо от регистра.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "$ref": "#/components/parameters/forLinksCatalogQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/catalogGroupIdQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/userIdQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/subscriptionIdQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/RefCatalogInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/RefCatalogInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/catalogs": {
          "post": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Первичное сохранение каталога",
              "description": "Метод используется при создании каталога заполнения.\nПри создании каталога необходимо обязательно заполнить общую информацию и атрибутивный состав.\n\nЕсли при сохранении передаются настройки конструктора, условной или групповой уникальности,\nто код проверок проходит валидацию.\n\nВ случае наличия ошибок в настройках каталога возвращается одна.\n\nВ результате сохранения каталога создаются соответствующие структуры для объектов каталога в БД заполнения.",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/FillingCatalogSettings"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/FillingCatalogSettingsRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/FillingCatalogBadRequestErrors"
                  },
                  "404": {
                      "$ref": "#/components/responses/FillingCatalogEntitiesNotFoundError"
                  }
              }
          },
          "delete": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Отметка каталога удалённым",
              "description": "Метод используется для отметки удалёнными одного или нескольких каталогов.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибка построения запроса или целостности переданных данных.\nОшибка может быть в параметре, заголовке или полях тела запроса.\nВ зависимости от этого текст ошибки может отличаться.\n\n### Возможные ошибки бизнес-логики:\n  - Каталог находится в процессе импорта;\n  - Один или несколько из переданных каталогов используются в конструкторе проверок других каталогов заполнения;\n  - Один или несколько из переданных каталогов используются в настройках уникальности других каталогов заполнения;\n  - Один или несколько из переданных каталогов используются в ссылочных атрибутах других каталогов заполнения;\n  - Один или несколько из переданных каталогов используются в настройках ограничения выборки каталогов публикации;\n  - На основе одиного или нескольких из переданных каталогов созданы справочники.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Каталог находится в процессе импорта": {
                                      "$ref": "#/components/examples/CatalogInImportCantBeDeletedError"
                                  },
                                  "Каталог используется в конструкторе проверок другого каталога заполнения": {
                                      "$ref": "#/components/examples/CatalogInCatalogPackagesCantBeDeletedError"
                                  },
                                  "Каталог используется в настройках уникальностей другого каталога заполнения": {
                                      "$ref": "#/components/examples/CatalogInCatalogUniqCantBeDeletedError"
                                  },
                                  "Каталог используется в ссылочном атрибуте другого каталога заполнения": {
                                      "$ref": "#/components/examples/CatalogInCatalogAttributesCantBeDeletedError"
                                  },
                                  "Каталог используется в настройках ограничения выборки каталога публикации": {
                                      "$ref": "#/components/examples/CatalogInPublCatalogConditionsCantBeDeletedError"
                                  },
                                  "На основе каталога создан справочник": {
                                      "$ref": "#/components/examples/CatalogInDictionaryCantBeDeletedError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует каталога с переданным идентификатором. Если передаётся массив каталогов, то ошибка выдаётся, если найден хотя бы 1 несуществующий каталог;",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Каталога не существует": {
                                      "$ref": "#/components/examples/FillingCatalogNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/catalogs/{catalogId}": {
          "put": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Изменение настроек каталога заполнения",
              "description": "Изменяет настройки каталога заполения.\n\nНастройки вкладок \"Общая информация\" и \"Атрибуты\" передаются всегда.\nОстальные - только при изменении настроек.\n\nЕсли при сохранении передаются настройки конструктора, условной или групповой уникальности,\nто код проверок проходит валидацию.\n\nВ случае наличия ошибок в настройках каталога возвращается одна.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/FillingCatalogSettings"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/FillingCatalogSettingsRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogEditedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/FillingCatalogBadRequestErrors"
                  },
                  "404": {
                      "$ref": "#/components/responses/FillingCatalogEntitiesNotFoundError"
                  }
              }
          }
      },
      "/catalogs/{catalogId}/generalInfo": {
          "get": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение общей информации каталога заполнения",
              "description": "Возвращает общую информацию каталога заполнения для соответствующей вкладки в настройках каталога публикации.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/FillingCatalogGeneralInfo"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FillingCatalogGeneralInfoResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/catalogs/{catalogId}/attributes": {
          "get": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение атрибутов каталога заполнения",
              "description": "Возвращает атрибутивный состава каталога публикации для отображения в соответствующей вкладке в настройках каталога публикации.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/FillingCatalogAttribute"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FillingCatalogAttributesResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/FillingCatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/{catalogId}/meta": {
          "get": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение метаданных каталога заполнения",
              "description": "Возвращает метаданные каталога заполнения для соответствующей вкладки в настройках каталога заполнения.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/FillingCatalogMetadata"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FillingCatalogMetadataResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/FillingCatalogNotFoundResponse"
                  }
              }
          },
          "put": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Изменение метаданных каталога заполнения",
              "description": "Изменяет метаданные каталога заполнения.\n\nИспользуется для редактирования каталога пользователем, не являющимся суперпользователем.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/FillingCatalogMetadata"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/FillingCatalogMetadataRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "value": {
                                          "code": 200,
                                          "messageType": "Ok",
                                          "message": "Метаданные каталога изменены"
                                      }
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Email ответственного не прошел проверку на соответствие регулярному выражению;\n  - Каталог находится в процессе подписания;\n  - Каталог находится в процессе импорта.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Email ответственного не прошел проверку на соответствие регулярному выражению": {
                                      "$ref": "#/components/examples/InvalidRespPersonEmail"
                                  },
                                  "Каталог находится в процессе подписания": {
                                      "$ref": "#/components/examples/SignedCatalogCannotBeEditedError"
                                  },
                                  "Каталог находится в процессе импорта": {
                                      "$ref": "#/components/examples/CatalogInImportCantBeEditedError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/FillingCatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/lite/{catalogId}/attributes": {
          "get": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение списка атрибутов каталога заполенения с минимальным набором свойств",
              "description": "Возвращает список атрибутов заданного каталога заполнения с минимальным набором свойств (ответ включает только id и название).",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/forLinksCatalogAttributeQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ. Если атрибуты не найдены, например удовлетворяющие параметру forLinks, то отдаётся пустой список.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/RefCatalogAttributeInfoWithAttrId"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/RefCatalogAttributeInfoWithAttrIdArrayResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/FillingCatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/{catalogId}/userPrivileges": {
          "get": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение списка привилегий пользователя, доступных для данного каталога заполнения",
              "description": "Возвращает список технических наименований привилегий.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ. Если у пользователя нет доступа к каталогу, возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "users.yaml#/components/schemas/UserPrivilegeFill"
                              },
                              "examples": {
                                  "Пример": {
                                      "value": {
                                          "canView": true,
                                          "canExport": true,
                                          "canEdit": true,
                                          "canSign": true,
                                          "canImport": true,
                                          "canEditMeta": true
                                      }
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/FillingCatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/{catalogId}/constructor": {
          "get": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение настроек конструктора процессов каталога заполнения",
              "description": "Возвращает настройки конструктора процессов в виде массива пакетов в форматах TOML и JSON.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ConstructorPackageData"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/FillingCatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/{catalogId}/constructorPackages": {
          "get": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение пакетов конструктора процессов каталога заполнения",
              "description": "Метод возвращает список пакетов конструктора каталога заполнения, включая главный пакет.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ConstructorPackageCommonInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ConstructorPackageCommonInfoArrayResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/FillingCatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/constructor/validate": {
          "post": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Валидация настроек конструктора процессов",
              "description": "Производит валидацию настроек конструктора процессов, описанных в формате TOML",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "constructor": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "#/components/schemas/ConstructorPackageData"
                                      }
                                  },
                                  "attributes": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "#/components/schemas/FillingCatalogAttributeForValidation"
                                      }
                                  }
                              },
                              "required": [
                                  "constructor",
                                  "attributes"
                              ]
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/ConstructorValidationRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nВозвращаются настройки в формате json для работы с ними в веб-интерфейсе.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ConstructorPackageData"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибки валидации. В результате проверки должны быть найдены все ошибки, допущенные в описании настроек конструктора.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ConstructorValidationError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/catalogs/{catalogId}/conditionalUniq": {
          "get": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение настроек условной уникальности каталога заполнения",
              "description": "Возвращает настройки условной уникальности в виде строки с условием, составленным по правилам условий в конструкторе процессов  представленном в форматах TOML.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ. Если условие уникальности не настроено, то возвращается пустая строка",
                      "content": {
                          "text/plain": {
                              "schema": {
                                  "description": "Настройки условной уникальности в виде строки с условием, составленным по правилам условий в конструкторе процессов.",
                                  "type": "string"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FillingCatalogConditionalUniqResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/FillingCatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/conditionalUniq/validate": {
          "post": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Валидация настройки условной уникальности",
              "description": "Производит валидацию условия описанного в настройках условной уникальности каталога.",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "conditionalUniq": {
                                      "description": "Настройки условной уникальности. Передаётся строка с условием, которое описано в формате условий, используемом в конструкторе процессов.",
                                      "type": "string"
                                  },
                                  "attributes": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "#/components/schemas/FillingCatalogAttributeForValidation"
                                      }
                                  }
                              },
                              "required": [
                                  "conditionalUniq",
                                  "attributes"
                              ]
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OkFillingCatalogUniqValidateResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибки, обнаруженные при валидации настроек. В результате проверки должны быть найдены все ошибки, допущенные в описании настроек условной уникальности.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ConditionalUniqValidationError"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/catalogs/{catalogId}/groupUniq": {
          "get": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение настроек групповой уникальности каталога заполнения",
              "description": "Возвращает настройки условной уникальности в виде строки с условием, составленным по правилам условий в конструкторе процессов  представленном в форматах TOML.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ. Если настройка отсутствует, то возвращается пустой объект.",
                      "content": {
                          "text/plain": {
                              "schema": {
                                  "description": "Настройка групповой уникальности, описанная пользователем в формате TOML. Передаётся в качестве строки с экранированием символов.",
                                  "type": "string"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FillingCatalogGroupUniqTomlResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/FillingCatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/groupUniq/validate": {
          "post": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Валидация настройки групповой уникальности",
              "description": "Производит валидацию настроек групповой уникальности каталога, описанных в формате toml.",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "groupUniq": {
                                      "description": "Настройка групповой уникальности, описанная пользователем в формате TOML. Передаётся в качестве строки с экранированием символов.",
                                      "type": "string"
                                  },
                                  "attributes": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "#/components/schemas/FillingCatalogAttributeForValidation"
                                      }
                                  }
                              },
                              "required": [
                                  "groupUniq",
                                  "attributes"
                              ]
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OkFillingCatalogUniqValidateResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибки, обнаруженные при валидации настроек. В результате проверки должны быть найдены все ошибки, допущенные в описании настроек групповой уникальности.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/GroupUniqValidationError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/catalogs/{catalogId}/map": {
          "get": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение настроек карты каталога заполнения",
              "description": "Возвращает настройки карты.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/FillingCatalogMap"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FillingCatalogMapResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/FillingCatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/{catalogId}/status": {
          "put": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Изменение статуса каталога заполнения",
              "description": "Позволяет перевести каталог заполнения в архив или вывести из архива.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "name": "archive",
                      "description": "Указывает на необходимость изменения статуса \"Архивный\" у каталога заполнения.\n  - `true` - присвоить каталогу статус \"Архивный\",\n  - `false` - убрать статус \"Архивный\" с каталога. Если в каталоге есть изменения в объектах или метаданных, то каталог переходит в статус \"Не подписано\". Если текущие данные каталога не имеют отличий от последних подписанных версий, то каталог переходит в статус \"Подписано\".",
                      "in": "query",
                      "required": true,
                      "schema": {
                          "type": "boolean"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Перевод в архив": {
                                      "$ref": "#/components/examples/FillingCatalogArchivedResponse"
                                  },
                                  "Вывод из архива": {
                                      "$ref": "#/components/examples/FillingCatalogUnarchivedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Попытка перевести архивный каталог заполнения повторно в архив.\n  - Попытка вывести из архива неархивынй каталог.\n  - Попытка перевести в архив во время подписания каталога.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Перевод архивного каталога повторно в архив": {
                                      "$ref": "#/components/examples/FillingCatalogAlreadyArchivedError"
                                  },
                                  "Вывод неархивного каталога из архива": {
                                      "$ref": "#/components/examples/FillingCatalogAlreadyUnarchivedError"
                                  },
                                  "Каталог находится в процессе подписания": {
                                      "$ref": "#/components/examples/SignedFillingCatalogCannotBeArchivedError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/catalogs/{catalogId}/refs": {
          "post": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Создание связи с каталогом публикации",
              "description": "Создает связную запись каталога заполнения с каталогом публикации.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "publicationCatalogs.yaml#/components/parameters/publicationCatalogIdQueryParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CatalogRef"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogRefRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "value": {
                                          "code": 200,
                                          "messageType": "Ok",
                                          "message": "Связь с каталогами создана"
                                      }
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/{catalogId}/catalogAttributes/search": {
          "post": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение информации о каталогах и атрибутах, в которых используется каталог",
              "description": "Возвращает информацию о неудаленных каталогах заполнения и атрибутах (ссылочных), в которых указан каталог заполнения.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `fullName`, `attributeRusName` и `attributeEnName` используется тело запроса.\n\nЕсли атрибут используется в табличном атрибуте каталога, то выводится идентификатор и наименование основного каталога.\nОстальные данные остаются неизменными (`attributeRusName`, `attributeEnName`).",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых атрибутов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку атрибутов.\nПоиск производится по полям `id`, `fullName`, `attributeRusName` и `attributeEnName`.\nВ ответе будут представлены только те каталоги и атрибуты, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги с атрибутами, идентификатор каталога или наименование каталога или атрибута которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `fullName`, `attributeRusName` и `attributeEnName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "attributeRusName",
                              "attributeEnName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов, в которых используется каталог заполнения",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName",
                                                              "attributeRusName",
                                                              "attributeEnName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/FillingCatalogCatalogsSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "attributes.yaml#/components/schemas/CatalogAttributeInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FillingCatalogCatalogsAttributesInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/{catalogId}/catalogPackages/search": {
          "post": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение информации о каталогах и конструкторах процессов, в которых используется каталог",
              "description": "Возвращает информацию о неудаленных каталогах заполнения и конструкторах процессов, в которых используется каталог заполнения.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `fullName`, `packName`, `packTechName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id`, `fullName`, `packName`, `packTechName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги и пакеты, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `fullName`, `packName`, `packTechName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "packName",
                              "packTechName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов, в которых используется каталог",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName",
                                                              "packName",
                                                              "packTechName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/FillingCatalogCatalogsSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CatalogPackageInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FillingCatalogCatalogPackageInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/{catalogId}/catalogUniqs/search": {
          "post": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение информации о каталогах и настройках уникальностей, в которых используется каталог",
              "description": "Возвращает информацию о неудаленных каталогах заполнения и настройках уникальностей, в которых используется каталог заполнения.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `fullName`, `uniqTypeTag`, `packTechName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id`, `fullName`, `uniqTypeTag`, `packTechName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги и пакеты, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `fullName`, `uniqTypeTag`, `packTechName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "uniqTypeTag",
                              "packTechName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов, в которых справочник используется в конструкторе проверок",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName",
                                                              "uniqTypeTag",
                                                              "packTechName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/FillingCatalogCatalogsSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CatalogUniqInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FillingCatalogCatalogUniqInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/{catalogId}/catalogGroups/search": {
          "post": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение информации о группах каталогов, в которые входит каталог",
              "description": "Возвращает информацию о неудаленных группах каталогов, в которые входит каталог заполнения.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id` и `name` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых групп каталогов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос по списку групп каталогов.\nПоиск производится по полям `id` и `name`.\nВ ответе будут представлены только те группы каталогов, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все группы каталогов, идентификатор или наименование которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку групп каталогов, в которые входит каталог заполнения",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "name"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/FillingCatalogCatalogGroupsSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogGroups.yaml#/components/schemas/CommonCatalogGroupInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FillingCatalogCatalogGroupsInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/{catalogId}/publCatalogConditions/search": {
          "post": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение информации о каталогах публикации, в которых используется каталог",
              "description": "Возвращает информацию о неудаленных каталогах публикации, в которых используется каталог в настройках ограничения выборки.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id` и `fullName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id` и `fullName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id` и `fullName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов публикации, в которых используется каталог",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/FillingCatalogCatalogsSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CommonCatalogInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FillingCatalogPublCatalogConditionsInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/{catalogId}/dictionaries/search": {
          "post": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение информации о справочниках созданных на основе каталога",
              "description": "Возвращает информацию о неудаленных справочниках, которые были созданы из выбранного каталога заполнения.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id` и `name` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых справочников (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку справочников.\nПоиск производится по полям `id` и `name`.\nВ ответе будут представлены только те справочники, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все справочники, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id` и `name`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку справочников, созданных на основе каталога",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "name"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/FillingCatalogDictionariesSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "dictionaries.yaml#/components/schemas/CommonDictionaryInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FillingCatalogDictionariesInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogs/sequence": {
          "get": {
              "tags": [
                  "catalogs"
              ],
              "summary": "Получение нового идентификатора каталога",
              "description": "Возвращает незадействованных идентификатор каталога, метод необходим для работы сборных каталогов на стороне ПХОДД",
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "integer"
                              },
                              "example": 241764
                          }
                      }
                  }
              }
          }
      },
      "/publicationCatalogs/search": {
          "post": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Поиск по списку каталогов публикации",
              "description": "Возвращает список неудалённых каталогов публикации. Используется для отображения информации в разделах `Данные по ...`\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\nДля фильтрации по столбцам списка используется тело запроса.\n\nМетод позволяет фильтровать каталоги публикации по связанному каталогу заполнения (параметр `fillingCatalogId`).\n\nДополнительно метод позволяет возвращать информации о всех каталогах публикации, связанных с каталогом заполнения.",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых каталогов (от `1` до `1000`).",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке каталогов.\nПоиск производится по атрибутам `id` и `fullName`.\nЗапрос со значением `12` вернет все каталоги, идентификатор или наименование которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "countActiveObjects",
                              "countObjects",
                              "responsiblePerson",
                              "sourceCatalogId",
                              "dateNextUpdate"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  },
                  {
                      "name": "publicationStatus",
                      "in": "query",
                      "required": false,
                      "description": "Статус каталога публикации. Может принимать следующие значения:\n  - `unpublished` - не опубликован\n  - `manualPublication` - публикуется вручную\n  - `autoPublication` - публикуется автоматически\n  - `archive` - архивный",
                      "schema": {
                          "type": "array",
                          "items": {
                              "type": "string"
                          },
                          "allOf": [
                              {
                                  "$ref": "#/components/schemas/PublicationCatalogStatusTagIdEnum"
                              }
                          ]
                      }
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/fillingCatalogIdOptQueryParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/publicationCatalogListRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив.\n\nЕсли переданы несуществующие идентификаторы категории, ОИВ, системы-потребителя, то также возвращается пустой массив вместо 404 ошибки.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/PublicationCatalogListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/publicationCatalogs/lite/search": {
          "get": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Поиск по списку каталогов публикации с минимальным набором свойств",
              "description": "Возвращает список неудалённых каталогов публикации с минимальным набором свойств (`id`, `name`)\n",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых каталогов (от `1` до `1000`).",
                      "schema": {
                          "type": "integer",
                          "default": 1000,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке каталогов.\nПоиск производится по полному наименованию каталога и является регистронезависимым.\nЗапрос со значением `тест` вернет все каталоги, полное наименование которых содержит подстроку `тест` независимо от регистра.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/fillingCatalogIdOptQueryParam"
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/forLinksCatalogQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/forDatasetQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/userIdQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogs.yaml#/components/schemas/RefCatalogInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "catalogs.yaml#/components/examples/RefCatalogInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/publicationCatalogs": {
          "post": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Cохранение каталога публикации",
              "description": "Метод используется при создании каталога публикации.\nПри создании каталога необходимо обязательно заполнить общую информацию, атрибутивный состав, указать наличие геопривязки,\nа также указать идентификатор каталога заполения, с которым связан каталог публикации.\n\nЕсли при сохранении передается условие ограничения выборки, оно валидируется.\n\nВ случае наличия ошибок в настройках каталога возвращается одна.\n\nАтрибут с типом ссылка и таблица не может быть использован в условии огранчиения выборки.\n\nЕсли каталог имеет английскую версию, то поля `fullNameEn`, `shortNameEn`, `accountingObjectEn` и `keywordsEn` являются обязательными.\n\nЕсли следующие поля не являются синхронизируемыми, то они являются обязательными:\n  - `accountingObject`\n  - `thematicCategoryId`\n  - `typeCatalogId`\n  - `oivsIds`\n  - `keywords`\n  - `periodUpdate`\n  - `hasGeo`\n\nВ настройках публикации помимо атрибутов каталога передаются системные атрибуты:\n  - `global_id` (attrId=-1),\n  - `system_object_id` (attrId=-2),\n  - `is_deleted` (attrId=-7),\n  - `signature_date` (attrId=-12, только для корневого каталога),\n  - `global_object_id` (attrId=-3, только для табличных атрибутов).\n\nДанные атрибуты можно получить вызовом системного справочника\n(через метод `/dictionaries/aux/sysColumns`) и фильтрацией полученных атрибутов\nпо `forPublSettings` (1 или 2).\nУровень, на котором используется атрибут, определяется полем `forNested`.\n\nВ идентификационном номере, а также SEF URL настроек публикации для системы Портал открытых данных разрешается использование латинских букв, цифр и дефиса.\n\nВ результате сохранения каталога также создаются соответствующие структуры для объектов каталога в БД публикации.",
              "requestBody": {
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/PublicationCatalogSettings"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/PublicationCatalogSettingsRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "catalogs.yaml#/components/examples/CatalogCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/PublicationCatalogBadRequestPostResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogNotFoundResponse"
                  }
              }
          },
          "delete": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Отметка каталога публикации удалённым",
              "description": "Метод используется для отметки удалёнными одного или нескольких каталогов.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "catalogs.yaml#/components/examples/CatalogDeletedResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/checkConditionsChange": {
          "post": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Проверка изменения условий ограничения выборки",
              "description": "Проверяет изменение условий ограничения выборки перед сохранением настроек каталога публикации.\n\nНа вход передается строка с условием.\nМетод возвращает результат проверки в виде `true`,\nесли переданное условие отличается от того, которое сохранено в каталоге публикации,\nи каталог находится в статусе \"Публикуется автоматически\".\n\nИспользуется для запроса подтверждения перепубликации объектов каталога публикации,\nесли он публикуется автоматически.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "requestBody": {
                  "required": true,
                  "content": {
                      "text/plain": {
                          "schema": {
                              "type": "string"
                          },
                          "examples": {
                              "Пример": {
                                  "value": "containsInList(attr.OrgTypeName, (895132643)) and equals(attr.OKFSCode, 13))"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "boolean"
                              },
                              "examples": {
                                  "Пример": {
                                      "value": true
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogIdNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}": {
          "put": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Изменение настроек каталога публикации",
              "description": "Изменяет настройки каталога публикации.\n\nНастройки вкладок \"Общая информация\" и \"Атрибуты\" передаются всегда.\nОстальные - только при изменении настроек на этих вкладках.\n\nЕсли при изменении передается условие ограничения выборки, оно валидируется.\n\nВ случае наличия ошибок в настройках каталога возвращается одна.\n\nЕсли каталог имеет английскую версию, то поля `fullNameEn`, `shortNameEn`, `accountingObjectEn` и `keywordsEn` являются обязательными.\n\nЕсли следующие поля не являются синхронизируемыми, то они являются обязательными:\n  - `accountingObject`\n  - `thematicCategoryId`\n  - `typeCatalogId`\n  - `oivsIds`\n  - `keywords`\n  - `periodUpdate`\n\nВ настройках публикации помимо атрибутов каталога передаются системные атрибуты:\n  - `global_id` (attrId=-1),\n  - `system_object_id` (attrId=-2),\n  - `is_deleted` (attrId=-7),\n  - `signature_date` (attrId=-12, только для корневого каталога),\n  - `global_object_id` (attrId=-3, только для табличных атрибутов).\n\nДанные атрибуты можно получить вызовом системного справочника\n(через метод `/dictionaries/aux/sysColumns`) и фильтрацией полученных атрибутов\nпо `forPublSettings` (1 или 2).\nУровень, на котором используется атрибут, определяется полем `forNested`.\n\nВ идентификационном номере, а также SEF URL настроек публикации для системы Портал открытых данных разрешается использование латинских букв, цифр и дефиса.\n\nАтрибут с типом ссылка и таблица не может быть использован в условии огранчиения выборки",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "requestBody": {
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/PublicationCatalogSettings"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/PublicationCatalogSettingsRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "catalogs.yaml#/components/examples/CatalogEditedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/PublicationCatalogBadRequestPutResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/generalInfo": {
          "get": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Получение общей информации каталога публикации",
              "description": "Возвращает общую информацию каталога публикации для соответствующей вкладки в настройках каталога публикации.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/versionQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/PublicationCatalogGeneralInfo"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogGeneralInfoResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogOrVersionNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/attributes": {
          "get": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Получение атрибутов каталога публикации",
              "description": "Возвращает атрибутивный состава каталога для отображения в соответствующей вкладке в настройках каталога публикации.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/versionQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/PublicationCatalogAttribute"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogAttributesResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogOrVersionNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/lite/{catalogId}/attributes": {
          "get": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Получение списка атрибутов каталога публикации с минимальным набором свойств",
              "description": "Возвращает список атрибутов заданного каталога публикации с минимальным набором свойств (ответ включает только id и название).",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/versionQueryParam"
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/forLinksCatalogAttributeQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogs.yaml#/components/schemas/RefCatalogAttributeInfoWithAttrId"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "catalogs.yaml#/components/examples/RefCatalogAttributeInfoWithAttrIdArrayResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogOrVersionNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/userPrivileges": {
          "get": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Получение списка привилегий пользователя, доступных для данного каталога публикации",
              "description": "Возвращает список технических наименований привилегий.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ. Если у пользователя нет доступа к каталогу, возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "users.yaml#/components/schemas/UserPrivilegePubl"
                              },
                              "examples": {
                                  "Пример": {
                                      "value": {
                                          "canView": true,
                                          "canExport": true,
                                          "canEditMeta": true,
                                          "canPubl": true
                                      }
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/meta": {
          "get": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Получение метаданных каталога публикации",
              "description": "Возвращает метаданные каталога для отображения в соответствующей вкладке в настройках каталога публикации.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/versionQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/PublicationCatalogMetadata"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogMetadataResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogOrVersionNotFoundResponse"
                  }
              }
          },
          "put": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Изменение метаданных каталога публикации",
              "description": "Изменяет метаданные каталога публикации.\n\nИспользуется для редактирования каталога пользователем, не являющимся суперпользователем.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/versionQueryParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "catalogs.yaml#/components/schemas/CommonCatalogMetadata"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/PublicationCatalogMetadataRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "value": {
                                          "code": 200,
                                          "messageType": "Ok",
                                          "message": "Метаданные каталога изменены"
                                      }
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Email ответственного не прошел проверку на соответствие регулярному выражению.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Email ответственного не прошел проверку на соответствие регулярному выражению": {
                                      "$ref": "catalogs.yaml#/components/examples/InvalidRespPersonEmail"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogOrVersionNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/systemPublicationSettings": {
          "get": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Получение настроек публикации каталога публикации",
              "description": "Возвращает настройки публикации каталога для отображения в соответствующей вкладке в настройках каталога публикации.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/versionQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "anyOf": [
                                          {
                                              "$ref": "#/components/schemas/SystemPublicationSettings"
                                          },
                                          {
                                              "$ref": "#/components/schemas/OpodSystemPublicationSettings"
                                          },
                                          {
                                              "$ref": "#/components/schemas/YandexSystemPublicationSettings"
                                          }
                                      ]
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogSystemPublicationSettingsResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogOrVersionNotFoundResponse"
                  }
              }
          },
          "put": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Изменение настроек публикации для систем-потребителей в исторических версиях КП.",
              "description": "Позволяет внести изменения в настройки публикации для систем-потребителей в исторических версиях КП, при необходимости дать системе доступ к историческим данным каталога.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/versionQueryParam"
                  }
              ],
              "requestBody": {
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/SystemPublicationSettingsInHistVersion"
                          },
                          "examples": {
                              "Пример тела запроса": {
                                  "$ref": "#/components/examples/SystemPublicationSettingsInHistVersionRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SystemPublicationSettingsInHistVersionChangedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/SystemPublicationSettingsInHistVersionBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/SystemPublicationSettingsInHistVersionNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/sortings": {
          "get": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Получение настроек сортировки атрибутов каталога публикации",
              "description": "Возвращает настройки сортировки атрибутов каталога для отображения в соответствующей вкладке в настройках каталога публикации.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/versionQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/PublicationSorting"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogSortingsResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogOrVersionNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/publicationConditions": {
          "get": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Получение условий ограничения выборки каталога публикации",
              "description": "Возвращает условия ограничения выборки каталога для отображения в соответствующей вкладке в настройках каталога публикации.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/versionQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "text/plain": {
                              "schema": {
                                  "type": "string"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogConditionsResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogOrVersionNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/publicationConditions/validate": {
          "post": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Валидация настройки ограничения выборки",
              "description": "Производит валидацию настроек ограничения выборки каталога, описанных в формате TOML.",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "publicationConditions": {
                                      "description": "Настройка ограничения выборки, описанная пользователем в формате TOML. Передаётся в качестве строки с экранированием символов.",
                                      "type": "string"
                                  },
                                  "attributes": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "#/components/schemas/PublicationCatalogAttributeForValidation"
                                      }
                                  }
                              },
                              "required": [
                                  "publicationConditions",
                                  "attributes"
                              ]
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OkPublicationConditionsValidateResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибки, обнаруженные при валидации настроек. В результате проверки должны быть найдены все ошибки, допущенные в описании настроек ограничения выборки.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/PublicationConditionsValidationError"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/map": {
          "get": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Получение настроек карты каталога публикации",
              "description": "Возвращает настройки карты каталога публикации для отображения в соответствующей вкладке в настройках каталога публикации.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/versionQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/PublicationCatalogMap"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogMapResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogOrVersionNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/status": {
          "put": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Изменение статуса каталога публикации",
              "description": "Позволяет изменить статус каталога публикации.\n\nПри изменении статуса на \"Публикуется автоматически\" или \"Публикуется вручную\", запускается процесс публикации,\nесли в связанном каталоге заполнения есть объекты, требующие публикации.\n\nПри изменении статуса на \"Не опубликован\" или \"Архивный\",\nпроцесс публикации может быть остановлен, если он запущен в текущий момент.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/newPublicationCatalogStatusQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Статус изменен, текущий процесс публикации остановлен": {
                                      "$ref": "#/components/examples/PublicationCatalogStatusChangedWithPublicationCancelledResponse"
                                  },
                                  "Статус изменен, процесс публикации объектов запущен": {
                                      "$ref": "#/components/examples/PublicationCatalogStatusChangedWithPublicationStartResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogIdNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/access": {
          "get": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Получение систем-потребителей, которым доступен каталог публикации",
              "description": "Возвращает перечень систем-потребителей каталога публикации с указанием их доступа к каталогу.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/PublicationCatalogSystemAccess"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogSystemAccessResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogOrVersionNotFoundResponse"
                  }
              }
          },
          "put": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Изменение доступа систем-потребителей к каталогу публикации",
              "description": "Позволяет изменить доступ систем-потребителей к каталогу публикации.\n\nВ параметрах запроса передается список идентификаторов систем-потребителей каталога, для которых будет виден.\nОстальным системам, добавленным в настройках каталога, но которые не входят в этот список, каталог будет не доступен.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/grantedQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogAccessChangedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogAccessNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/publish": {
          "get": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Запуск публикации каталога",
              "description": "Запускает публикацию каталога публикации.\nПри вызове метода происходит наполнение внутреннего лога публикации, который обрабатывается в фоновом режиме.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogStartResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Попытка публикации каталога, который не находится в статусе \"Публикуется вручную\";\n  - Каталог уже находится в процессе публикации.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Каталог не находится в статусе \"Публикуется вручную\"": {
                                      "$ref": "#/components/examples/PublicationCannotBeStartedResponse"
                                  },
                                  "Публикация уже выполняется": {
                                      "$ref": "#/components/examples/CatalogIsAlreadyBeingPublishedResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/publicationCatalogs/versions": {
          "post": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Создание новой версии каталога публикации",
              "description": "Внутренний метод сервиса каталогов публикации. Создает новые версии для каталогов публикации при изменении атрибутов через классификатор атрибутов, которые в них используются.\n\nНа вход принимается объект с изменениями атрибута.\n\nЕсли передан несуществующий идентификатор каталога,\nили в каталоге нет переданного атрибута,\nили передан несуществующий атрибут,\nили передано несуществующий идентификатор альтернативного наименования атрибута,\nто изменение к каталогу не применяется (ошибка не возвращается).\n\nЕсли измененные наименования атрибута (основное или альтернативные), не используются в каталоге,\nто для него новая версия каталога не создается.\nИдентификаторы каталогов, для которых новая версия была создана, перечисляются в сообщении ответа.\n\nЕсли версии каталогов не были созданы ни для одного из каталогов, возвращается ответ 200 с соответствующим сообщением.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdsQueryParam"
                  }
              ],
              "requestBody": {
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/PublicationAttributeChange"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/PublicationAttributeChangeRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ, версии не созданы",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogVersionNotCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "201": {
                      "description": "Успешный ответ, версии созданы",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogVersionCreatedResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/publicationCatalogs/syncProperties": {
          "put": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Изменение синхронизируемых свойств каталогов публикации",
              "description": "Меняет настройки каталогов публикации в зависимости от изменений, сохраненных в связанный каталог заполнения.\nСинхронизируемые настройки хранятся в массиве `synced_properties` в настройках каталога публикации.\n\nМетод также позволяет обновить параметр `maxLength` для атрибутов каталога публикации, что используется для версионирования.\n\nНа вход принимается объект с изменениями настроек каталога заполнения.\n\nЕсли передан несуществующий идентификатор каталога или в каталоге нет переданного атрибута,\nто изменение к данному каталогу не применяется (ошибка не возвращается).\n\nЕсли измененные настройки не входят в список синхронизируемых для каталога, то для него такие настройки не изменяются.\nИдентификаторы каталогов, для которых настройки были изменены, перечисляются в сообщении ответа.\n\nЕсли настройки не были изменены ни для одного из переданных каталогов, возвращается ответ 200 с соответствующим сообщением.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdsQueryParam"
                  }
              ],
              "requestBody": {
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/PublicationCatalogSyncChange"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/PublicationCatalogSyncChangeRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\n\n### Возвращается в двух случаях:\n  - Настройки каталогов не были изменены;\n  - Настройки каталогов были изменены (в ответе перечисляются идентификаторы измененных каталогов).",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Настройки каталогов изменены": {
                                      "$ref": "#/components/examples/PublicationCatalogSettingsSyncedResponse"
                                  },
                                  "Настройки каталогов не изменены": {
                                      "$ref": "#/components/examples/PublicationCatalogSettingsNotSyncedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - У переданного атрибута нет свойства `maxLength`.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "У переданного атрибута нет свойства `maxLength`": {
                                      "$ref": "#/components/examples/NoMaxLentghFieldErrorResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/publicationCatalogs/identNumber": {
          "get": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Получение идентификационного номера для каталога публикации",
              "description": "Генерирует значение идентификационного номера для связанного каталога публикации\nс учетом транслитерации названия в формате \"<ИНН ОИВ КЗ>-<Транслитированное краткое наименование КЗ>\".\n\nНа вход передается идентификатор каталога заполнения.\n\nЕсли у КЗ несколько ОИВ, то ИНН берется для первого из них.\nЕсли ИНН не найден, то числовая часть заполняется нулями.\nВ случае ошибки возвращается пустая строка.\n\nПри транслитерации из названия КЗ удаляются все спецсимволы и пробелы кроме дефисов.\nИтого, разрешается использование латинских букв, цифр и дефиса.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ.",
                      "content": {
                          "text/plain": {
                              "schema": {
                                  "type": "string"
                              },
                              "example": "7719261558-Adresnyyreestr"
                          }
                      }
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/releases/search": {
          "post": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Получение релизов каталога публикации",
              "description": "Возвращает список релизов каталога публикации.\n\nМетод позволяет выполнять сортировку, фильтрацию и пагинацию. Подробнее см. параметры запроса.\nДля фильтрации по столбцам списка используется тело запроса.\n\nСортировка списка по умолчанию - по убыванию даты создания релиза.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых релизов (от `1` до `1000`).",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/publicationCatalogReleasesRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ. Если для каталога публикации не найдено релизов, то возвращается пустой список.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/PublicationCatalogRelease"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogIdNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/releases": {
          "post": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Ручное создание релиза каталога публикации",
              "description": "Запуск формирования релиза каталога публикации.\nВыполняется пользователем, если необходимо выпустить релиз, не дожидаясь выполнения фонового процесса по генерации релизов.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ, о создании релиза.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogReleaseCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogReleaseNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/releases/checkObjects": {
          "get": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Получение статистики по опубликованным объектам, которые доступны для формирования релиза.",
              "description": "Возвращает статистику по опубликованным объектам каталога публикации, которые не были обработаны фоновым процессом генерации релизов.\n\nДанная статистика помогает пользователю перед запуском ручного формирования релиза.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПоля id и createDate не имеют значений, так как эти поля относятся только к сформированным релизам.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/PublicationCatalogRelease"
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogReleaseNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalogs/{catalogId}/checkSettingsChange": {
          "post": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Проверка изменения настроек каталога публикации (атрибутов, ограничение выборки, геометрии)",
              "description": "Проверяет изменение настроек каталога публикации перед сохранением каталога публикации.\n\nНа вход передаются настройки каталога:\n- вкладка \"Атрибуты\"\n- вкладка \"Ограничение выборки\"\n- вкладка \"Карта\"\n\nМетод возвращает результат проверки в виде `true`, если\nкаталог находится в статусе \"Публикуется автоматически\" и\nвыполнено одно или более из условий:\n- в настройках атрибутов были добавлены атрибуты,\n- изменилось условие ограничение выборки,\n- в настройках карты была включена геометрия или добавлены типы геометрии.\n\nИспользуется для запроса подтверждения перепубликации объектов каталога публикации,\nесли он публикуется автоматически.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "requestBody": {
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/PublicationCatalogSettingsChange"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/PublicationCatalogSettingsChangeRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "boolean"
                              },
                              "examples": {
                                  "Пример": {
                                      "value": true
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogIdNotFoundResponse"
                  }
              }
          }
      },
      "/catalogObjects/columns": {
          "get": {
              "tags": [
                  "catalogObjects"
              ],
              "summary": "Получение столбцов для открытия списка объектов каталога",
              "description": "Возвращает информацию о столбцах списка объектов каталога.\nОтвет включает технические столбцы, например: статус объекта, дата создания объекта, информация о последнем изменении объекта и т.п.,\nа также атрибуты каталога.\n\nКаждый столбец в ответе содержит информацию о типе столбца, его названии, отображаемом в интерфейсе,\nа также названиях полей, которые используются в JSON объекта в методе `POST /catalogObjects/search`.\n\nТехническое наименование столбца для атрибута каталога возвращается в формате `field_{attrId}`,\nгде `attrId` - идентификатор атрибута в ЕХД.\n\nПри наличии ручного ввода в каталоге возвращаются столбцы вида `field_{attrId}_manual`,\nобозначающие признак введения пользователем значение атрибута в поле `field_{attrId}` вручную.\nТакие столбцы возвращаются typeTag=boolean, columnType=manualInput и тем же attrId, что и для самого атрибута.\n\nСтолбцы возвращаются в порядке следования в таблице.\n\nДля табличных атрибутов (вложенных каталогов) возвращаются только столбцы с идентификаторами\n(global_id, system_object_id) и атрибуты каталога.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CatalogObjectListColumn"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogObjectListColumnArrayResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogObjects/search": {
          "post": {
              "tags": [
                  "catalogObjects"
              ],
              "summary": "Поиск по списку объектов корневого каталога",
              "description": "Возвращает информацию об объектах корневого каталога, удовлетворяющих условиям поиска.\nКаждый объект содержит значения по атрибутам, которые возвращаются в методе `GET /catalogObjects/columns`.\n\nВ теле запроса передаются объекты фильтров и сортировки\nМетод позволяет выполнять многоуровневую сортировку.\n\nПорядок сортировки определяется порядком следования объектов сортировки в теле запроса.\n\nПо умолчанию объекты сортируются в порядке возрастания глобального идентификатора.\n\nМетод позволяет выполнять фильтрацию по вложенным каталогам первого уровня.\nДля таких фильтров передается поле `childCatalogId`.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых объектов (число от `1` до `500`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 500
                      }
                  },
                  {
                      "$ref": "#/components/parameters/objectStatusesQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/globalIdsQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/signedVersionQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/isErrorQueryParam"
                  },
                  {
                      "$ref": "geodata.yaml#/components/parameters/FetchGeodataQueryParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/CatalogObjectsSearchFilters"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CatalogObjectListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogObjectListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/CatalogObjectSearchNotFoundResponse"
                  }
              }
          }
      },
      "/catalogObjects/child/search": {
          "post": {
              "tags": [
                  "catalogObjects"
              ],
              "summary": "Поиск по списку объектов вложенного каталога",
              "description": "Возвращает информацию об объектах вложенного каталога в привязке к родительскому объекту (передается в пути запроса).\nКаждый объект содержит значения по атрибутам, которые возвращаются в методе `GET /catalogObjects/columns`.\n\nВ теле запроса передаются объекты фильтров и сортировки. Метод позволяет выполнять многоуровневую сортировку.\n\nПорядок сортировки определяется порядком следования объектов сортировки в теле запроса.\n\nПо умолчанию объекты сортируются в порядке возрастания глобального идентификатора.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/parentGlobalIdQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/rootGlobalIdQueryParam"
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/parentCatalogIdQueryParam"
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/rootCatalogIdQueryParam"
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых объектов (число от `1` до `500`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 500
                      }
                  },
                  {
                      "$ref": "#/components/parameters/signedVersionQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами и сортировками по списку объектов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "#/components/schemas/ChildCatalogObjectListFilter"
                                      }
                                  },
                                  "sortings": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "_common.yaml#/components/schemas/Sorting"
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogObjectChildSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ChildCatalogObjectListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ChildCatalogObjectListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/ChildCatalogObjectSearchNotFoundResponse"
                  }
              }
          }
      },
      "/catalogObjects": {
          "post": {
              "tags": [
                  "catalogObjects"
              ],
              "summary": "Сохранение объекта",
              "description": "Метод используется для сохранения объекта, его изменений, удаления в каталоге заполнения.\n\nОбъект передается полностью, если значение атрибута не передано, оно считается пустым.\n\nВ метод можно передавать объекты, относящиеся только к одному каталогу заполнения.",
              "requestBody": {
                  "description": "Тело запроса для сохранения объекта в каталоге",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/FillingCatalogObject"
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogObjectRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Ответ при успешной обработке запроса.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/OkCatalogObjectResponse"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OkCatalogObjectResponse"
                                  }
                              }
                          }
                      }
                  },
                  "207": {
                      "description": "Ответ при успешной обработке запроса, при наличии ошибок для некоторых объектов.\nОшибки могут как относиться к бизнес-логике, так и быть техническими.\nДля каждого объекта возвращается отдельный код ответа.\n\n### Возможные ошибки бизнес-логики (ошибки возвращаются отдельно для каждого сохраняемого объекта в массиве):\n  - Значение атрибутов объекта не удовлетворяет свойствам атрибутов или объект не прошёл проверку, настроенную в конструкторе процессов (ошибка ФЛК).\n    Текст ошибки выводится из настроенного в конструкторе уведомления;\n  - Корневой каталог не найден (если передан объект вложенного каталога, то он игнорируется);\n  - Корневой или вложенный объект не найден в соответствующем каталоге.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "anyOf": [
                                          {
                                              "$ref": "#/components/schemas/OkCatalogObjectResponse"
                                          },
                                          {
                                              "$ref": "#/components/schemas/IncorrectDataCatalogObjectResponse"
                                          }
                                      ]
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/MultiStatusCatalogObjectResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ответ, возвращаемый, если для всех объектов в запросе получена ошибка бизнес-логики при сохранении\nили данные не могут сохранены, так как каталог находится в процессе подписания.\n\n### Возможные ошибки бизнес-логики (ошибки возвращаются отдельно для каждого сохраняемого объекта в массиве):\n  - Значение атрибутов объекта не удовлетворяет свойствам атрибутов или объект не прошёл проверку, настроенную в конструкторе процессов (ошибка ФЛК). Текст ошибки выводится из настроенного в конструкторе уведомления;\n  - Корневой каталог не найден (если передан объект вложенного каталога, то он игнорируется);\n  - Корневой или вложенный объект не найден в соответствующем каталоге;\n  - Каталог находится в процессе подписания;\n  - Для объектов передан разный корневой каталог.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "anyOf": [
                                          {
                                              "$ref": "#/components/schemas/IncorrectDataCatalogObjectResponse"
                                          },
                                          {
                                              "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                          }
                                      ]
                                  }
                              },
                              "examples": {
                                  "Объекты не прошли проверку форматно-логического контроля или не найдены": {
                                      "$ref": "#/components/examples/IncorrectDataCatalogObjectResponse"
                                  },
                                  "Каталог находится в процессе подписания": {
                                      "$ref": "#/components/examples/CatalogObjectCatalogIsSigningResponse"
                                  },
                                  "Попытка записи в разные каталоги": {
                                      "$ref": "#/components/examples/WriteToDifferentCatalogsResponse"
                                  },
                                  "Геоданные объекта не прошли первичную валидацию": {
                                      "$ref": "#/components/examples/IncorrectGeodataCatalogObjectResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "get": {
              "tags": [
                  "catalogObjects"
              ],
              "summary": "Получение данных объекта",
              "description": "Возвращает полную информацию об объектах по идентификаторам.\n\nДля поиска могут быть использованы глобальные идентификаторы или идентификаторы в системе-поставщике.\nРезультат поиска будет слит в общий массив, в котором объект будет повторяться один раз.\n\nЕсли оба массива не будут переданы или объекты по переданным идентификаторам не будут найдены, то вернется пустой массив.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "name": "globalIds",
                      "in": "query",
                      "required": false,
                      "description": "Глобальные идентификаторы объектов каталога, которые нужно вернуть.\n\nЧисло элементов в массиве: до `100`.",
                      "schema": {
                          "type": "array",
                          "maxItems": 100,
                          "items": {
                              "type": "integer",
                              "format": "int64"
                          }
                      }
                  },
                  {
                      "$ref": "#/components/parameters/objectStatusesQueryParam"
                  },
                  {
                      "name": "systemObjectIds",
                      "in": "query",
                      "required": false,
                      "description": "Идентификаторы объектов каталога в системе-поставищике, которые нужно вернуть.\n\nЧисло элементов в массиве: до `100`.",
                      "schema": {
                          "type": "array",
                          "maxItems": 100,
                          "items": {
                              "type": "string"
                          }
                      }
                  },
                  {
                      "name": "returnStatus",
                      "description": "Возвращать ли поля статуса объекта.\nЕсли передан true, то в ответ включаются следующие поля:\n  - статус объекта (поле `objectStatus`);\n  - наличие ошибок фоновой проверки в объекте (поле `isError`).\n\nЭти поля также возвращаются в методе `POST  /catalogObjects/search`.",
                      "in": "query",
                      "required": false,
                      "schema": {
                          "type": "boolean",
                          "default": true
                      }
                  },
                  {
                      "name": "verbose",
                      "description": "Возвращать ли подробный ответ для ссылочных и справочных объектов.\n\nПри передаче `true` в значениях ссылочных и справочных атрибутов возвращается объект,\nсодержащий идентификатор объекта ссылочного каталога `globalId` или элемента справочника `dictElementId`,\nа также строковое значение `value` того атрибута, которое выбрано для отображения в каталоге.",
                      "in": "query",
                      "required": false,
                      "schema": {
                          "type": "boolean",
                          "default": true
                      }
                  },
                  {
                      "name": "returnSystem",
                      "description": "Возвращать ли системные атрибуты в ответе.\n\nСистемные атрибуты включают:\n  - дату создания (attrId = -16);\n  - дату подписания (attrId = -4);\n  - информацию о подписи объекта (attrId = -12);\n  - дату последнего изменения (attrId = -11);\n  - тип последнего изменения (attrId = -10);\n  - актора, совершившего последнее изменение, пользователя или систему (attrId = -13);\n  - наличие геоданных (attrId = -22).",
                      "in": "query",
                      "required": false,
                      "schema": {
                          "type": "boolean",
                          "default": true
                      }
                  },
                  {
                      "$ref": "geodata.yaml#/components/parameters/FetchGeodataQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "oneOf": [
                                          {
                                              "$ref": "#/components/schemas/FillingCatalogObject"
                                          },
                                          {
                                              "$ref": "#/components/schemas/FillingCatalogObjectVerbose"
                                          }
                                      ]
                                  }
                              },
                              "examples": {
                                  "verbose = false, returnStatus=false, returnSystem = false, fetchGeodata = EPSG:4326": {
                                      "$ref": "#/components/examples/CatalogObjectResponse"
                                  },
                                  "verbose = true, returnStatus=true, returnSystem = true, fetchGeodata = EPSG:4326": {
                                      "$ref": "#/components/examples/CatalogObjectVerboseReturnSystemResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogObjects/errors": {
          "get": {
              "tags": [
                  "catalogObjects"
              ],
              "summary": "Получение ошибок объекта каталога, обнаруженных при фоновой проверке",
              "description": "Возвращает информацию об ошибках объекта каталога. Ответ включает ошибки конструктора проверок, свойтв атрибутов, а также условной и групповой уникальности.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/globalIdsRequiredQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CatalogObjectErrors"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogObjectsErrorsArrayResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogObjects/editProperties": {
          "get": {
              "tags": [
                  "catalogObjects"
              ],
              "summary": "Получение свойств редактирования каталога для карточки объекта",
              "description": "Метод возвращает свойства каталога и атрибутов, которые влияют на отображение карточки объекта при её открытиИ.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Ответ при успешной обработке запроса.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/EditProperties"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/EditPropertiesResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogObjects/rollback": {
          "post": {
              "tags": [
                  "catalogObjects"
              ],
              "summary": "Отмена изменений объекта",
              "description": "Метод используется для отмены неподписанных изменений в объектах и приведения их к последнему подписанному состоянию.\n\nПереход по статусам осуществляется в соответствии с правилами:\n  - toModification -> signed, \n  - toDeletion -> signed, \n  - toRecovery -> deleted,\n  - new, deleted, signed -> игнорируются.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Тело запроса с массивом идентификаторов объектов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "array",
                              "description": "Глобальные идентификаторы объектов",
                              "items": {
                                  "type": "integer"
                              },
                              "minItems": 1,
                              "maxItems": 500
                          },
                          "example": [
                              843645422,
                              645340803,
                              656542982,
                              322456767
                          ]
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ObjectRollbackResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Каталог находится в процессе подписания;",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Каталог находится в процессе подписания": {
                                      "$ref": "#/components/examples/CatalogObjectCatalogIsSigningResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogObjects/recover": {
          "post": {
              "tags": [
                  "catalogObjects"
              ],
              "summary": "Восстановление объекта",
              "description": "Метод используется для восстановления объектов из статуса `Удаленный`.\n\nПереход по статусам осуществляется в соответствии с правилами:\n  - deleted -> toRecovery\n\nЕсли переданы объекты в статусах, отличных от `deleted`, они будут проигнорированы.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Тело запроса с массивом идентификаторов объектов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "array",
                              "description": "Глобальные идентификаторы объектов",
                              "items": {
                                  "type": "integer"
                              },
                              "minItems": 1,
                              "maxItems": 500
                          },
                          "example": [
                              843645422,
                              645340803,
                              656542982,
                              322456767
                          ]
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ObjectRecoveredResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Каталог находится в процессе подписания;",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Каталог находится в процессе подписания": {
                                      "$ref": "#/components/examples/CatalogObjectCatalogIsSigningResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogObjects/delete": {
          "post": {
              "tags": [
                  "catalogObjects"
              ],
              "summary": "Удаление объекта",
              "description": "Метод используется для удаления выбранных объектов.\n\nПереход по статусам осуществляется в соответствии с правилами:\n  - new -> удаляется целиком,\n  - signed -> toDeletion, \n  - toModification -> toDeletion,\n  - toRecovery, toDeletion, deleted -> игнорируются.\n\nВ теле запроса передаются данные атрибутов, заполняемых при удалении объекта.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Тело запроса с данными объектов для удаления",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ObjectsDataForDeletion"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/ObjectsDataForDeletionRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Ответ при успешной обработке запроса.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/OkCatalogObjectResponse"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OkCatalogObjectDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "207": {
                      "description": "Ответ при успешной обработке запроса, при наличии ошибок для некоторых объектов.\nОшибки могут как относиться к бизнес-логике, так и быть техническими.\nДля каждого объекта возвращается отдельный код ответа.\n\n### Возможные ошибки бизнес-логики (ошибки возвращаются отдельно для каждого сохраняемого объекта в массиве):\n  - Значение атрибутов объекта не удовлетворяет свойствам атрибутов или объект не прошёл проверку, настроенную в конструкторе процессов (ошибка ФЛК).\n    Текст ошибки выводится из настроенного в конструкторе уведомления;\n  - Корневой каталог не найден (если передан объект вложенного каталога, то он игнорируется);\n  - Корневой или вложенный объект не найден в соответствующем каталоге.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "anyOf": [
                                          {
                                              "$ref": "#/components/schemas/OkCatalogObjectResponse"
                                          },
                                          {
                                              "$ref": "#/components/schemas/IncorrectDataCatalogObjectResponse"
                                          }
                                      ]
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/MultiStatusCatalogObjectDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ответ, возвращаемый, если для всех объектов в запросе получена ошибка бизнес-логики при сохранении\nили данные не могут сохранены, так как каталог находится в процессе подписания.\n\n### Возможные ошибки бизнес-логики (ошибки возвращаются отдельно для каждого сохраняемого объекта в массиве):\n  - Значение атрибутов объекта не удовлетворяет свойствам атрибутов или объект не прошёл проверку, настроенную в конструкторе процессов (ошибка ФЛК). Текст ошибки выводится из настроенного в конструкторе уведомления;\n  - Корневой каталог не найден (если передан объект вложенного каталога, то он игнорируется);\n  - Корневой или вложенный объект не найден в соответствующем каталоге;\n  - Каталог находится в процессе подписания;\n  - Для объектов передан разный корневой каталог.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "anyOf": [
                                          {
                                              "$ref": "#/components/schemas/IncorrectDataCatalogObjectResponse"
                                          },
                                          {
                                              "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                          }
                                      ]
                                  }
                              },
                              "examples": {
                                  "Объекты не прошли проверку форматно-логического контроля или не найдены": {
                                      "$ref": "#/components/examples/IncorrectDataCatalogObjectDeletedResponse"
                                  },
                                  "Каталог находится в процессе подписания": {
                                      "$ref": "#/components/examples/CatalogObjectCatalogIsSigningResponse"
                                  },
                                  "Попытка записи в разные каталоги": {
                                      "$ref": "#/components/examples/WriteToDifferentCatalogsResponse"
                                  },
                                  "Геоданные объекта не прошли первичную валидацию": {
                                      "$ref": "#/components/examples/IncorrectGeodataCatalogObjectDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/catalogObjects/clear": {
          "post": {
              "tags": [
                  "catalogObjects"
              ],
              "summary": "Удаление всех объектов каталога",
              "description": "Метод используется для удаления всех объектов выбранного каталога.\n\nПереход по статусам осуществляется в соответствии с правилами:\n  - new -> удаляется целиком,\n  - signed -> toDeletion, \n  - toModification -> toDeletion,\n  - toRecovery, toDeletion, deleted -> игнорируются.\n\nВ теле запроса передаются данные атрибутов, заполняемых при удалении объекта.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Тело запроса с данными атрибутов объектов для удаления",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "data": {
                                      "description": "Массив атрибутов и их значений в рамках удаляемых объектов",
                                      "type": "array",
                                      "items": {
                                          "type": "object",
                                          "properties": {
                                              "attrId": {
                                                  "description": "Идентификатор атрибута",
                                                  "type": "integer",
                                                  "format": "int32"
                                              },
                                              "value": {
                                                  "description": "Значение атрибута, передаваемое при удалении.\nДля типов данных справочник, ссылка на объект, файл значение **всегда** передаётся в массиве, независимо от установленного свойства isMultiple на атрибуте.",
                                                  "oneOf": [
                                                      {
                                                          "description": "Значение атрибута типа строка",
                                                          "type": "string"
                                                      },
                                                      {
                                                          "description": "Значение атрибута типа целое число",
                                                          "type": "integer"
                                                      },
                                                      {
                                                          "description": "Значение атрибута типа дробное число",
                                                          "type": "number"
                                                      },
                                                      {
                                                          "description": "Значение атрибута типа флаг",
                                                          "type": "boolean"
                                                      },
                                                      {
                                                          "description": "Значение атрибута типа дата (без времени) в формате dd.MM.YYYY",
                                                          "type": "string",
                                                          "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3})$"
                                                      },
                                                      {
                                                          "description": "Значение атрибута типа дата (со временем) в формате dd.MM.YYYY hh:mm:ss",
                                                          "type": "string",
                                                          "pattern": "^(0[1-9]|[1-2]\\d|3[0-1])\\.(0[1-9]|1[0-2])\\.([1-2]\\d{3}) ([0-1]\\d|2[0-4])(:[0-5]\\d){2}$"
                                                      },
                                                      {
                                                          "description": "Значение атрибута типа файл, в массиве передается id (uuid) файла, загруженного на файловый сервер",
                                                          "type": "array",
                                                          "items": {
                                                              "type": "string"
                                                          }
                                                      },
                                                      {
                                                          "description": "Значение атрибута типа справочник, в массиве передается id элемента справочника",
                                                          "type": "array",
                                                          "items": {
                                                              "type": "string"
                                                          }
                                                      },
                                                      {
                                                          "description": "Значение атрибута типа ссылка, в массиве передается gloabl_id объекта, на который ссылается объект",
                                                          "type": "array",
                                                          "items": {
                                                              "type": "integer"
                                                          }
                                                      }
                                                  ]
                                              }
                                          }
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/ObjectsDataForClearingRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ObjectDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Значение атрибутов объекта не удовлетворяет свойствам атрибутов или объект не прошёл проверку, \n    настроенную в конструкторе процессов (ошибка ФЛК). Текст ошибки выводится из настроенного в конструкторе уведомления;\n  - Каталог находится в процессе подписания;\n  - Для каталога НЕ выставлен флаг \"Возможно одновременное удаление всех объектов\".",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "anyOf": [
                                          {
                                              "$ref": "#/components/schemas/IncorrectDataCatalogObjectResponse"
                                          },
                                          {
                                              "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                          }
                                      ]
                                  }
                              },
                              "examples": {
                                  "Объекты не прошли проверку форматно-логического контроля или не найдены": {
                                      "$ref": "#/components/examples/IncorrectDataCatalogObjectResponse"
                                  },
                                  "Каталог находится в процессе подписания": {
                                      "$ref": "#/components/examples/CatalogObjectCatalogIsSigningResponse"
                                  },
                                  "Для каталога НЕ выставлен флаг \"Возможно одновременное удаление всех объектов\"": {
                                      "$ref": "#/components/examples/AllObjectsDeletionNotAllowedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/publicationObjects/columns": {
          "get": {
              "tags": [
                  "publicationObjects"
              ],
              "summary": "Получение столбцов для открытия списка объектов каталога публикации",
              "description": "Возвращает информацию о столбцах списка объектов каталога.\nОтвет включает технические столбцы, например: статус объекта, дата публикации и т.п.,\nа также атрибуты каталога.\n\nКаждый столбец в ответе содержит информацию о типе столбца, его названии, отображаемом в интерфейсе,\nа также названиях полей, которые используются в JSON объекта в методе `POST /publicationObjects/search`.\n\nТехническое наименование столбца возвращается в формате `field_{catalogAttrId}`,\nгде `catalogAttrId` - идентификатор атрибута в каталоге.\n\nСтолбцы возвращаются в порядке следования в таблице.\n\nДля табличных атрибутов (вложенных каталогов) возвращаются только столбцы с идентификаторами\n(global_id, system_object_id) и атрибуты каталога.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/rootCatalogIdQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogObjects.yaml#/components/schemas/CatalogObjectListColumn"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "catalogObjects.yaml#/components/examples/CatalogObjectListColumnArrayResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/publicationObjects/search": {
          "post": {
              "tags": [
                  "publicationObjects"
              ],
              "summary": "Поиск по списку объектов корневого каталога публикации",
              "description": "Возвращает информацию об объектах корневого каталога, удовлетворяющих условиям поиска.\n\nВ теле запроса передаются объекты фильтров и сортировки. Метод позволяет выполнять многоуровневую сортировку.\n\nПорядок сортировки определяется порядком следования объектов сортировки в теле запроса.\n\nПо умолчанию объекты сортируются в порядке возрастания глобального идентификатора.\n\nМетод позволяет выполнять фильтрацию по вложенным каталогам первого уровня. Для таких фильтров передается поле `childCatalogId`.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых объектов (число от `1` до `500`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 500
                      }
                  },
                  {
                      "$ref": "catalogObjects.yaml#/components/parameters/globalIdsQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/publicationStatusesQueryParam"
                  },
                  {
                      "$ref": "geodata.yaml#/components/parameters/FetchGeodataPublQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами и сортировками по списку объектов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "catalogObjects.yaml#/components/schemas/RootCatalogObjectListFilter"
                                      }
                                  },
                                  "sortings": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "_common.yaml#/components/schemas/Sorting"
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "catalogObjects.yaml#/components/examples/CatalogObjectSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/PublicationObjectListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationObjectListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationObjectSearchNotFoundResponse"
                  }
              }
          }
      },
      "/publicationObjects/child/search": {
          "post": {
              "tags": [
                  "publicationObjects"
              ],
              "summary": "Поиск по списку объектов вложенного каталога публикации",
              "description": "Возвращает информацию об объектах вложенного каталога в привязке к родительскому объекту (передается в параметрах запроса).\n\nВ теле запроса передаются объекты фильтров и сортировки. Метод позволяет выполнять многоуровневую сортировку.\n\nПорядок сортировки определяется порядком следования объектов сортировки в теле запроса.\n\nПо умолчанию объекты сортируются в порядке возрастания глобального идентификатора.",
              "parameters": [
                  {
                      "$ref": "catalogObjects.yaml#/components/parameters/parentGlobalIdQueryParam"
                  },
                  {
                      "$ref": "catalogObjects.yaml#/components/parameters/rootGlobalIdQueryParam"
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/parentCatalogIdQueryParam"
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/rootCatalogIdQueryParam"
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых объектов (число от `1` до `500`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 500
                      }
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами и сортировками по списку объектов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "catalogObjects.yaml#/components/schemas/ChildCatalogObjectListFilter"
                                      }
                                  },
                                  "sortings": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "_common.yaml#/components/schemas/Sorting"
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "catalogObjects.yaml#/components/examples/CatalogObjectSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ChildPublicationObjectListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "catalogObjects.yaml#/components/examples/ChildCatalogObjectListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/ChildPublicationObjectSearchNotFoundResponse"
                  }
              }
          }
      },
      "/publicationObjects": {
          "get": {
              "tags": [
                  "publicationObjects"
              ],
              "summary": "Получение данных объекта каталога публикации",
              "description": "Возвращает полную информацию об объектах по идентификаторам.\n\nДля поиска могут быть использованы глобальные идентификаторы или идентификаторы в системе-поставщике.\nРезультат поиска будет слит в общий массив, в котором объект будет повторяться один раз.\n\nЕсли оба массива не будут переданы или объекты по переданным идентификаторам не будут найдены, то вернется пустой массив.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "name": "globalIds",
                      "in": "query",
                      "required": false,
                      "description": "Глобальные идентификаторы объектов каталога, которые нужно вернуть.\n\nЧисло элементов в массиве: до `100`.",
                      "schema": {
                          "type": "array",
                          "maxItems": 100,
                          "items": {
                              "type": "integer",
                              "format": "int64"
                          }
                      }
                  },
                  {
                      "name": "systemObjectIds",
                      "in": "query",
                      "required": false,
                      "description": "Идентификаторы объектов каталога в системе-поставищике, которые нужно вернуть.\n\nЧисло элементов в массиве: до `100`.",
                      "schema": {
                          "type": "array",
                          "maxItems": 100,
                          "items": {
                              "type": "string"
                          }
                      }
                  },
                  {
                      "name": "verbose",
                      "description": "Возвращать ли подробный ответ для ссылочных и справочных объектов.\n\nПри передаче `true` в значениях ссылочных и справочных атрибутов возвращается объект,\nсодержащий идентификатор объекта ссылочного каталога `globalId` или элемента справочника `dictElementId`,\nа также строковое значение `value` того атрибута, которое выбрано для отображения в каталоге.",
                      "in": "query",
                      "required": false,
                      "schema": {
                          "type": "boolean",
                          "default": true
                      }
                  },
                  {
                      "name": "returnSystem",
                      "description": "Возвращать ли системные атрибуты в ответе.\n\nСистемные атрибуты включают:\n  - дату публикации (attrId = -8)\n  - наличие геоданных (attrId = -22).",
                      "in": "query",
                      "required": false,
                      "schema": {
                          "type": "boolean",
                          "default": true
                      }
                  },
                  {
                      "$ref": "geodata.yaml#/components/parameters/FetchGeodataPublQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "oneOf": [
                                          {
                                              "$ref": "#/components/schemas/PublicationCatalogObject"
                                          },
                                          {
                                              "$ref": "#/components/schemas/PublicationCatalogObjectVerbose"
                                          }
                                      ]
                                  }
                              },
                              "examples": {
                                  "verbose = false, returnSystem = false, fetchGeodata = true": {
                                      "$ref": "#/components/examples/PublicationCatalogObjectResponse"
                                  },
                                  "verbose = true, returnSystem = true, fetchGeodata = true": {
                                      "$ref": "#/components/examples/PublicationCatalogObjectVerboseReturnSystemResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/catalogGroups/search": {
          "post": {
              "tags": [
                  "catalogGroups"
              ],
              "summary": "Получение списка групп каталогов",
              "description": "Возвращает список групп каталогов",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых групп каталогов (число от `1` до `100`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке групп каталогов. Поиск производится по атрибутам `id` и `name`. Запрос со значением `12` вернет все Группы каталогов, идентификатор или наименование которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `id`, `name`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/userIdQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса для поиска по списку групп каталогов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "type": "string",
                                                          "enum": [
                                                              "id",
                                                              "name"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogGroupListRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CatalogGroupListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogGroupListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/catalogGroups": {
          "get": {
              "tags": [
                  "catalogGroups"
              ],
              "summary": "Получение групп каталогов по идентификаторам",
              "description": "Возвращает полную информацию о группах каталогов по идентификаторам.\n\nЕсли группа каталогов с указанными идентификатором не найден, он не включаются в массив тела ответа.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogGroupIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CatalogGroup"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogGroupArrayResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "catalogGroups"
              ],
              "summary": "Создание группы каталогов",
              "description": "Создает новую группу каталогов",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CatalogGroup"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogGroupCreateRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogGroupCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Наименование неуникально.\n  - Одновременно выбрано \"Добавлять все новые каталоги\" и \"Добавлять каталоги выбранных ОИВ\".\n  - Не выбраны \"ОИВ\" при выбранном значении \"Добавлять каталоги выбранных ОИВ\".",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Наименование неуникально": {
                                      "$ref": "#/components/examples/CatalogGroupNotUniqueNameError"
                                  },
                                  "Одновременно выбрано \"Добавлять все новые каталоги\" и \"Добавлять каталоги выбранных ОИВ\"": {
                                      "$ref": "#/components/examples/CatalogGroupAtrributeError"
                                  },
                                  "Не выбраны \"ОИВ\" при выбранном значении \"Добавлять каталоги выбранных ОИВ\"": {
                                      "$ref": "#/components/examples/CatalogGroupOivEmptyError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "catalogGroups"
              ],
              "summary": "Удаление группы каталогов",
              "description": "Метод используется для удаления групп каталогов, не имеющих связи с пользователями.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogGroupIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogGroupDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибка построения запроса или целостности переданных данных.\nОшибка может быть в параметре, заголовке или полях тела запроса.\nВ зависимости от этого текст ошибки может отличаться.\n\n### Возможные ошибки бизнес-логики:\n  - Одна или несколько из переданных группа каталогов используются в настройках пользователей (спецроли и рассылки).",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/ResourceCannotBeDeletedError"
                              },
                              "examples": {
                                  "Группа каталогов используется в настройках пользователя (спецроли и рассылки)": {
                                      "$ref": "#/components/examples/CatalogGroupConnectedUserError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/catalogGroups/{catalogGroupId}": {
          "put": {
              "tags": [
                  "catalogGroups"
              ],
              "summary": "Изменение данных группы каталогов",
              "description": "Изменение данных группы каталогов",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogGroupIdPathParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CatalogGroup"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogGroupModifyRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogGroupOkResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Наименование неуникально.\n  - Одновременно выбрано \"Добавлять все новые каталоги\" и \"Добавлять каталоги выбранных ОИВ\".\n  - Не выбраны \"ОИВ\" при выбранном значении \"Добавлять каталоги выбранных ОИВ\".",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Наименование неуникально": {
                                      "$ref": "#/components/examples/CatalogGroupNotUniqueNameError"
                                  },
                                  "Одновременно выбрано \"Добавлять все новые каталоги\" и \"Добавлять каталоги выбранных ОИВ\"": {
                                      "$ref": "#/components/examples/CatalogGroupAtrributeError"
                                  },
                                  "Не выбраны \"ОИВ\" при выбранном значении \"Добавлять каталоги выбранных ОИВ\"": {
                                      "$ref": "#/components/examples/CatalogGroupOivEmptyError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/CatalogGroupNotFoundResponse"
                  }
              }
          }
      },
      "/catalogGroups/{catalogGroupId}/catalogs/search": {
          "post": {
              "tags": [
                  "catalogGroups"
              ],
              "summary": "Поиск неудалённых каталогов, связанных с группой каталогов",
              "description": "Возвращает информацию о неудаленных каталогах заполнения, которые входят в группу.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id` и `fullName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogGroupIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id` и `fullName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `id` и `fullName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса для поиска по списку каталогов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "type": "string",
                                                          "enum": [
                                                              "id",
                                                              "fullName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogListRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ. При отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogGroupFillingCatalogListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует группы каталогов с указанным идентификатором.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не существует группы каталогов с указанным идентификатором": {
                                      "$ref": "#/components/examples/CatalogGroupNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/catalogGroups/{catalogGroupId}/catalogs": {
          "post": {
              "tags": [
                  "catalogGroups"
              ],
              "summary": "Добавление каталогов в группу каталогов",
              "description": "Создает связь между группой каталогов и каталогами заполнения",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogGroupIdPathParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CatalogGroupCatalogRequest"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogGroupCatalogRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogGroupCatalogResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует группы каталогов с указанным идентификатором.\n  - Не существует каталога с указанным идентификатором.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не существует группы каталогов с указанным идентификатором": {
                                      "$ref": "#/components/examples/CatalogGroupNotFoundError"
                                  },
                                  "Не существует каталога с указанным идентификатором": {
                                      "$ref": "#/components/examples/CatalogNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "catalogGroups"
              ],
              "summary": "Удаление каталогов из группы каталогов",
              "description": "Метод используется для удаления каталогов из групп каталогов.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogGroupIdPathParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CatalogGroupCatalogRequest"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogGroupCatalogRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogCatalogGroupDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/CatalogGroupNotFoundResponse"
                  }
              }
          }
      },
      "/catalogGroups/{catalogGroupId}/userSpecPrivileges/search": {
          "post": {
              "tags": [
                  "catalogGroups"
              ],
              "summary": "Поиск неудалённых пользователей, связанных с группой каталогов через специальные привилегии",
              "description": "Возвращает информацию о пользователях, в специальных привилегиях которых используется группа каталога.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `login` и `userFio` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogGroupIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых пользователей (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку пользователей.\nПоиск производится по полям `id`, `login` и `userFio`.\nВ ответе будут представлены только те пользователи, в указанных полях которых содержится поисковое значение.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `id`, `login` и `userFio`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "login",
                              "userFio"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса для поиска по списку пользователей и спецролей",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "type": "string",
                                                          "enum": [
                                                              "id",
                                                              "login",
                                                              "userFio"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogGroupUserSpecPrivilegesRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/UserSpecPrivilegeCatalogGroup"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogGroupUserSpecPrivilegesListInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/CatalogGroupNotFoundResponse"
                  }
              }
          }
      },
      "/attributes/search": {
          "post": {
              "tags": [
                  "attributes"
              ],
              "summary": "Поиск по списку атрибутов ЕХД",
              "description": "Возвращает базовую информацию об атрибутах для отображения списка атрибутов в табличном виде в разделе `Управление > Атрибуты`.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `techName`, `rusName`, `enName` и `description` используется тело запроса (поле `filters`).\nДля фильтрации по типу атрибута используется поле `attributeTypes` тела запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/attributeIdsOptQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых атрибутов (число от `1` до `1000`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку атрибутов.\nПоиск производится по полям `id`, `techName`, `rusName`, `enName` и `description`.\nВ ответе будут представлены только те атрибуты, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все атрибуты, идентификатор, наименования или описание которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `id`, `techName`, `rusName`, `enName` и `description`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "techName",
                              "rusName",
                              "enName",
                              "description"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/filterOutIdsQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку атрибутов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "rusName",
                                                              "enName",
                                                              "techName",
                                                              "description"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  "attributeTypes": {
                                      "description": "Типы атрибутов, которые необходимо вернуть.\nВ поле передается массив технических наименований типов атрибутов.\n\nЕсли массив не передан, возвращаются атрибуты всех типов.",
                                      "type": "array",
                                      "items": {
                                          "$ref": "#/components/schemas/AttributeTypeTagIdEnum"
                                      },
                                      "minItems": 1
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/AttributeSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/AttributeListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AttributeListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Тип атрибута с указанным идентификатором, переданный в параметре `attributeTypes`, не найден.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id типа атрибута": {
                                      "$ref": "#/components/examples/AttributeTypeNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/attributes": {
          "get": {
              "tags": [
                  "attributes"
              ],
              "summary": "Получение информации об атрибутах",
              "description": "Возвращает полную информацию об атрибутах по идентификаторам.\n\nЕсли атрибут с указанными идентификатором не найден, он не включаются в массив тела ответа.\n\nВ зависимости от типа атрибута вид ответа может отличаться.\nДля каждого атрибута возвращаются идентификатор `id`, техническое название `techName`, русскоязычное название `rusName`, англоязычное название `enName` и тип атрибута `type`.\nДополнительно может включать описание `description` и список альтернативных названий `alterNames`.\n\nДля справочных атрибутов дополнительно возвращается словарь в поле `dictionary`.\n\nДля строковых атрибутов возвращается максимальная длина `defaultMaxLength`. Дополнительно может возвращаться маска поля `defaultFieldMask` и регулярное выражение `defaultFieldRegex`.\n\nДля атрибутов с типом дробное число дополнительно возвращается максимальная длина дробной части `defaultMaxLength`.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/attributeIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/Attribute"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AttributeArrayResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "attributes"
              ],
              "summary": "Создание нового атрибута в ЕХД",
              "description": "Создает новый атрибут в ЕХД.\nВ тело запроса передается объект атрибута без указания `id`.\nДля любых атрибутов обязательно передаются техническое название `techName`, русскоязычное название `rusName` и англоязычное название `enName`, техническое наименование типа атрибута `typeTag`, а также альтернативные названия атрибутов `alterNames` в виде массива. Если альтернативные названия не используются, то передается пустой массив. \nТипы атрибутов см. в `GET /attributes/types`.\n\nДля справочных атрибутов в поле `dictionaryId` обязательно передается идентификатор справочника.\n\nДля строковых атрибутов и атрибутов с типом дробное число обязательно указываются максимальная длина `defaultMaxLength`.\n\nПри успешном создании атрибута в ответе в поле `id` передается идентификатор созданного атрибута.\n\nДля названий атрибута (в т.ч. альтернативных) должны выполняться следующие правила:\n  - Для всех названий атрибута (в т.ч. альтернативных) при передаче производится удаление пробельных симоволов в начале и конце.\n  - Техническое наименование может включать буквы английского алфавита, цифры, символ нижнего подчеркивания _, а также дефис -.\n  - Название не может начинаться и заканчиваться символами нижнего подчеркивания _ и  дефис -.\n  - Русскоязычное наименование (в т.ч. альтернативное) может включать все символы кроме < и >.\n  - Англоязычное наименование (в т.ч. альтернативное) может включать все символы кроме букв русского алфавита и символов < и >.",
              "requestBody": {
                  "$ref": "#/components/requestBodies/attributeRequestBody"
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AttributeCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - У атрибута передана комбинация `rusName`, `techName` и `typeTag`, которая уже используется другим атрибутом;\n  - У атрибута переданы одинаковые русскоязычные альтернативные названия `rusAlterName`;\n  - Передано зарезервированное техническое наименование \"id\";\n  - В техническом названии атрибута присутствуют запрещенные символы;\n  - В русскоязычном названии атрибута присутствуют запрещенные символы;\n  - В альтернативном русскоязычном названии атрибута присутствуют запрещенные символы;\n  - В англоязычном названии атрибута присутствуют запрещенные символы;\n  - В альтернативном англоязычном названии атрибута присутствуют запрещенные символы.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/OutOfScopeError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Неуникальная комбинация рус. названия, тех. навзания и типа атриубта": {
                                      "$ref": "#/components/examples/AttributeNameCombinationNotUniqueError"
                                  },
                                  "Неуникальное альтернативное название атрибута": {
                                      "$ref": "#/components/examples/AttributeAlterNameNotUniqueError"
                                  },
                                  "Зарезерированное техническое наименование": {
                                      "$ref": "#/components/examples/AttributeForbiddenTechNameError"
                                  },
                                  "В техническом названии атрибута присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/AttributeBadTechNameError"
                                  },
                                  "В русскоязычном названии атрибута присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/AttributeBadRusNameError"
                                  },
                                  "В альтер. русскоязычном названии атрибута присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/AttributeBadRusAlterNameError"
                                  },
                                  "В англоязычном названии атрибута присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/AttributeBadEnNameError"
                                  },
                                  "В альтер. англоязычном названии атрибута присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/AttributeBadEnAlterNameError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Тип атрибута с указанным техническим наименованием `typeTag` не найден;\n  - Справочник `dictionaryId` с указанным идентификатором не найден.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id типа атрибута": {
                                      "$ref": "#/components/examples/AttributeTypeNotFoundError"
                                  },
                                  "Несуществующий id справочника": {
                                      "$ref": "dictionaries.yaml#/components/examples/DictionaryNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "attributes"
              ],
              "summary": "Удаление атрибутов из ЕХД",
              "description": "Удаляет атрибуты из ЕХД по переданным идентификаторам.\n\nЕсли атрибут используется в каталоге, то возвращается соответсвующая ошибка и удаление всех переданных атрибутов не выполняется.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/attributeIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AttributeDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Один из переданных атрибутов используется в каталоге;\n  - Один из переданных атрибутов используется в каталоге публикации.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/ResourceCannotBeDeletedError"
                              },
                              "examples": {
                                  "Атрибут используется в каталоге": {
                                      "$ref": "#/components/examples/AttributeIsUsedInCatalogsError"
                                  },
                                  "Атрибут используется в каталоге публикации": {
                                      "$ref": "#/components/examples/AttributeIsUsedInPublicationCatalogsError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/attributes/{attributeId}": {
          "put": {
              "tags": [
                  "attributes"
              ],
              "summary": "Изменение информации об атрибуте",
              "description": "Изменяет информацию об атрибуте.\nВ тело запроса передается новый объект атрибута.\nПодробнее см. `POST /attributes`.\n\nТип атрибута изменить нельзя.\n\nДля названий атрибута (в т.ч. альтернативных) должны выполняться следующие правила:\n  - Для всех названий атрибута (в т.ч. альтернативных) при передаче производится удаление пробельных симоволов в начале и конце.\n  - Техническое наименование может включать буквы английского алфавита, цифры, символ нижнего подчеркивания _, а также дефис -.\n    Название не может начинаться и заканчиваться символами нижнего подчеркивания _ и  дефис -.\n  - Русскоязычное наименование (в т.ч. альтернативное) может включать все символы кроме < и >.\n  - Англоязычное наименование (в т.ч. альтернативное) может включать все символы кроме букв русского алфавита и символов < и >.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/attributeIdPathParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/attributeRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AttributeEditedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Нельзя изменить тип данных атрибута;\n  - Нельзя изменить справочник атрибута, если он используется в каталогах;\n  - У атрибута передана комбинация `rusName`, `techName` и `typeTag`, которая уже используется другим атрибутом;\n  - У атрибута переданы одинаковые русскоязычные альтернативные названия `rusAlterName`;\n  - Передано зарезервированное техническое наименование \"id\";\n  - В техническом названии атрибута присутствуют запрещенные символы;\n  - В русскоязычном названии атрибута присутствуют запрещенные символы;\n  - В альтернативном русскоязычном названии атрибута присутствуют запрещенные символы;\n  - В англоязычном названии атрибута присутствуют запрещенные символы;\n  - В альтернативном англоязычном названии атрибута присутствуют запрещенные символы.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/ResourceCannotBeEditedError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/OutOfScopeError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Изменен тип данных": {
                                      "$ref": "#/components/examples/AttributeTypeIsEditedError"
                                  },
                                  "Изменен справочник используемого атрибута": {
                                      "$ref": "#/components/examples/UsedAttributeDictionaryIsEditedError"
                                  },
                                  "Неуникальная комбинация рус. названия, тех. навзания и типа атриубта": {
                                      "$ref": "#/components/examples/AttributeNameCombinationNotUniqueError"
                                  },
                                  "Неуникальное альтернативное название атрибута": {
                                      "$ref": "#/components/examples/AttributeAlterNameNotUniqueError"
                                  },
                                  "Зарезерированное техническое наименование": {
                                      "$ref": "#/components/examples/AttributeForbiddenTechNameError"
                                  },
                                  "В техническом названии атрибута присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/AttributeBadTechNameError"
                                  },
                                  "В русскоязычном названии атрибута присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/AttributeBadRusNameError"
                                  },
                                  "В альтер. русскоязычном названии атрибута присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/AttributeBadRusAlterNameError"
                                  },
                                  "В англоязычном названии атрибута присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/AttributeBadEnNameError"
                                  },
                                  "В альтер. англоязычном названии атрибута присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/AttributeBadEnAlterNameError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id атрибута не существует;\n  - Изменяемый id альтернативного наименования атрибута не существует;\n  - Справочник `dictionaryId` с указанным идентификатором не найден.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id атрибута": {
                                      "$ref": "#/components/examples/AttributeNotFoundError"
                                  },
                                  "Несуществующий id альтернативного наименования атрибута": {
                                      "$ref": "#/components/examples/AttributeAlterNameNotFoundError"
                                  },
                                  "Несуществующий id справочника": {
                                      "$ref": "dictionaries.yaml#/components/examples/DictionaryNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/attributes/{attributeId}/catalogs/search": {
          "post": {
              "tags": [
                  "attributes"
              ],
              "summary": "Получение информации о каталогах, в которых используется атрибут",
              "description": "Возвращает список каталогов, в которых используется (использовался) атрибут.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `catalogId`, `catalogName`, `attributeRusName` и `attributeEnName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/attributeIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `catalogId`, `catalogName`, `attributeRusName` и `attributeEnName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги, идентификатор, наименование или название атрибута в которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/dataModesFilterQueryParam"
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogStatusesFilterQueryParam"
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `catalogId`, `catalogName`, `attributeRusName` и `attributeEnName`.\n\nПо умолчанию: `catalogId`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "catalogId",
                          "enum": [
                              "catalogId",
                              "catalogName",
                              "attributeRusName",
                              "attributeEnName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов атрибута",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "catalogId",
                                                              "catalogName",
                                                              "attributeRusName",
                                                              "attributeEnName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/AttributeCatalogSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/AttributeCatalogInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AttributeCatalogInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id атрибута не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id атрибута": {
                                      "$ref": "#/components/examples/AttributeNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/attributes/{attributeId}/catalogAttributes/search": {
          "post": {
              "tags": [
                  "attributes"
              ],
              "summary": "Получение информации о каталогах заполнения и атрибутах, в которых используется атрибут",
              "description": "Возвращает информацию о неудаленных каталогах заполнения и атрибутах, в которых используется атрибут.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `fullName`, `attributeRusName` и `attributeEnName` используется тело запроса.\n\nЕсли атрибут используется в табличном атрибуте каталога, то выводится идентификатор и наименование основного каталога. \nОстальные данные остаются неизменными (attributeRusName, attributeEnName). ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/attributeIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов и атрибутов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id`, `fullName`, `attributeRusName` и `attributeEnName`.\nВ ответе будут представлены только те каталоги и атрибуты, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги с атрибутами, идентификатор каталога или наименование каталога или атрибута которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `fullName`, `attributeRusName` и `attributeEnName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "attributeRusName",
                              "attributeEnName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов и атрибутов атрибута",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName",
                                                              "attributeRusName",
                                                              "attributeEnName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogAttributesSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CatalogAttributeInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogAttributesInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id атрибута не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id атрибута": {
                                      "$ref": "#/components/examples/AttributeNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/attributes/{attributeId}/publicationCatalogAttributes/search": {
          "post": {
              "tags": [
                  "attributes"
              ],
              "summary": "Получение информации о каталогах публикации и атрибутах, в которых используется атрибут",
              "description": "Возвращает информацию о неудаленных каталогах публикации и атрибутах, в которых используется атрибут.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `fullName`, `attributeRusName` и `attributeEnName` используется тело запроса.\n\nЕсли атрибут используется в табличном атрибуте каталога, то выводится идентификатор и наименование основного каталога. \nОстальные данные остаются неизменными (`attributeRusName`, `attributeEnName`). ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/attributeIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов и атрибутов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id`, `fullName`, `attributeRusName` и `attributeEnName`.\nВ ответе будут представлены только те каталоги и атрибуты, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги с атрибутами, идентификатор каталога или наименование каталога или атрибута которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `fullName`, `attributeRusName` и `attributeEnName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "attributeRusName",
                              "attributeEnName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов и атрибутов атрибута",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName",
                                                              "attributeRusName",
                                                              "attributeEnName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogAttributesSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CatalogAttributeInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogAttributesInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id атрибута не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id атрибута": {
                                      "$ref": "#/components/examples/AttributeNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/attributes/groups": {
          "post": {
              "tags": [
                  "attributes"
              ],
              "summary": "Создание новой группы атрибутов",
              "description": "Создает новую группу атрибутов. В теле запроса передается название группы `name`.",
              "requestBody": {
                  "$ref": "#/components/requestBodies/attributeGroupRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AttributeArrayResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/AttributeGroupBadRequestResponse"
                  }
              }
          },
          "get": {
              "tags": [
                  "attributes"
              ],
              "summary": "Получение списка групп атрибутов",
              "description": "Возвращает список всех групп атрибутов в ЕХД.",
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/AttributeGroup"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AttributeGroupArrayResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "attributes"
              ],
              "summary": "Удаление групп атрибутов с отвязкой от атрибутов всех каталогов",
              "description": "Удаляет группы атрибутов из ЕХД по переданным идентификаторам.\nВсе существующие связи с атриубтами в каталогах автоматически удаляются.",
              "parameters": [
                  {
                      "name": "groupIds",
                      "required": true,
                      "in": "query",
                      "description": "Список идентификаторов удаляемых групп атрибутов.\n\nЧисло элементов в списке от `1` до `100`.",
                      "schema": {
                          "type": "array",
                          "items": {
                              "type": "integer"
                          },
                          "minItems": 1,
                          "maxItems": 100
                      },
                      "example": [
                          1,
                          2
                      ]
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AttributeGroupDeletedResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/attributes/groups/{groupId}": {
          "put": {
              "tags": [
                  "attributes"
              ],
              "summary": "Изменение (переименование) группы атрибутов",
              "description": "Меняет название существующей группы атрибутов.\nВ теле запроса передается новое название группы `name`.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/groupIdPathParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/attributeGroupRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AttributeGroupEditedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/AttributeGroupBadRequestResponse"
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id группы атрибутов не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id группы атрибутов": {
                                      "$ref": "#/components/examples/AttributeGroupNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/attributes/system/{systemId}": {
          "get": {
              "tags": [
                  "attributes"
              ],
              "summary": "Получение системных атрибутов",
              "description": "Возвращает список всех системных атрибутов по идентификатору системы.\nИспользуется при настройке публикации каталога раскрытия.",
              "parameters": [
                  {
                      "$ref": "systems.yaml#/components/parameters/systemIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/SystemAttribute"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SystemAttributeArrayResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id информационной системы не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id информационной системы": {
                                      "$ref": "systems.yaml#/components/examples/SystemNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/attributes/types": {
          "get": {
              "tags": [
                  "attributes"
              ],
              "summary": "Получение списка типов атрибутов в ЕХД",
              "description": "Возвращает список всех типов атрибутов, которые используются в ЕХД.",
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/AttributeType"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AttributeTypeArrayResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/dictionaries/search": {
          "post": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Поиск по списку справочников",
              "description": "Возвращает список справочников.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск по списку и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `name` используется тело запроса.",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых справочников (число от `1` до `500`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 500
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку справочников. Поиск производится по идентификатору и наименованию.\n\nЗапрос со значением `12` вернет все справочники, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `name`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку справочников",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "name"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/DictionarySearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DictionaryListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionaryListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/dictionaries/aux/{auxDictTagId}": {
          "get": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Получение содержания вспомогательных справочников",
              "description": "В зависисмости от справочника изменяются объекты массива в ответе.\nВ схеме ответа, будут предлагаться возможные варианты по мере добавления вспомогательных справочников.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/auxDictTagIdPathParam"
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых элементов справочника (число от `1` до `100`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "#/components/parameters/dictElemSearchParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "catalogs.yaml#/components/schemas/CatalogKind"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "catalogs.yaml#/components/schemas/CatalogType"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "#/components/schemas/UpdatePeriodicityAuxDictElement"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "publicationCatalogs.yaml#/components/schemas/PublicationCatalogStatus"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "catalogObjects.yaml#/components/schemas/ObjectStatus"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "publicationObjects.yaml#/components/schemas/PublicationObjectStatus"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "attributes.yaml#/components/schemas/AttributeType"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "signatures.yaml#/components/schemas/SignStatus"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "signatures.yaml#/components/schemas/CatalogHistorySignStatus"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "signatures.yaml#/components/schemas/CatalogHistorySignType"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "signatures.yaml#/components/schemas/SignObjectLogStatus"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "imports.yaml#/components/schemas/CatalogImportHistoryStatus"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "datasets.yaml#/components/schemas/DatasetSeasonality"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "datasets.yaml#/components/schemas/DatasetDictionaryType"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "#/components/schemas/FilterOperatorAuxDictElement"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "#/components/schemas/SysColumn"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "publicationCatalogs.yaml#/components/schemas/GeneralInfoSyncedProperty"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "publicationCatalogs.yaml#/components/schemas/MetadataSyncedProperty"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "publicationCatalogs.yaml#/components/schemas/Rubric"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "searchIndexes.yaml#/components/schemas/SearchIndexStatus"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "users.yaml#/components/schemas/UserGroup"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "users.yaml#/components/schemas/UserPrivilege"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "users.yaml#/components/schemas/MailingStatus"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "users.yaml#/components/schemas/Menu"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "users.yaml#/components/schemas/UserStatus"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "auth.yaml#/components/schemas/SecurityEventType"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "catalogObjects.yaml#/components/schemas/LastChangeType"
                                          }
                                      },
                                      {
                                          "type": "array",
                                          "items": {
                                              "$ref": "pushsubs.yaml#/components/schemas/PushsubStatus"
                                          }
                                      }
                                  ]
                              },
                              "examples": {
                                  "auxDictTagId = kindCatalog": {
                                      "$ref": "#/components/examples/CatalogKindAuxResponse"
                                  },
                                  "auxDictTagId = typeCatalog": {
                                      "$ref": "#/components/examples/CatalogTypeAuxResponse"
                                  },
                                  "auxDictTagId = periodUpdate": {
                                      "$ref": "#/components/examples/UpdatePeriodicityAuxResponse"
                                  },
                                  "auxDictTagId = publicationStatus": {
                                      "$ref": "#/components/examples/PublicationCatalogStatusAuxResponse"
                                  },
                                  "auxDictTagId = objectStatus": {
                                      "$ref": "#/components/examples/ObjectStatusAuxResponse"
                                  },
                                  "auxDictTagId = publObjectStatus": {
                                      "$ref": "#/components/examples/PublObjectStatusAuxResponse"
                                  },
                                  "auxDictTagId = attributeType": {
                                      "$ref": "#/components/examples/AttributeTypeAuxResponse"
                                  },
                                  "auxDictTagId = signStatus": {
                                      "$ref": "#/components/examples/SignStatusAuxResponse"
                                  },
                                  "auxDictTagId = subCatalogHistory": {
                                      "$ref": "#/components/examples/CatalogHistorySignStatusAuxResponse"
                                  },
                                  "auxDictTagId = subCatalogHistoryType": {
                                      "$ref": "#/components/examples/CatalogHistorySignTypeAuxResponse"
                                  },
                                  "auxDictTagId = subObjectLog": {
                                      "$ref": "#/components/examples/SignObjectLogStatusAuxResponse"
                                  },
                                  "auxDictTagId = importHistoryStatus": {
                                      "$ref": "#/components/examples/ImportHistoryStatusAuxResponse"
                                  },
                                  "auxDictTagId = datasetSeasonality": {
                                      "$ref": "#/components/examples/DatasetSeasonalityAuxResponse"
                                  },
                                  "auxDictTagId = datasetDictType": {
                                      "$ref": "#/components/examples/DatasetDictionaryTypeAuxResponse"
                                  },
                                  "auxDictTagId = filterOperator": {
                                      "$ref": "#/components/examples/FilterOperatorAuxResponse"
                                  },
                                  "auxDictTagId = sysColumns": {
                                      "$ref": "#/components/examples/SysColumnsAuxResponse"
                                  },
                                  "auxDictTagId = generalInfoSyncedProperty": {
                                      "$ref": "#/components/examples/GeneralInfoSyncedPropertiesAuxResponse"
                                  },
                                  "auxDictTagId = metadataSyncedProperty": {
                                      "$ref": "#/components/examples/MetadataSyncedPropertiesAuxResponse"
                                  },
                                  "auxDictTagId = mapSyncedProperty": {
                                      "$ref": "#/components/examples/MapSyncedPropertiesAuxResponse"
                                  },
                                  "auxDictTagId = rubric": {
                                      "$ref": "#/components/examples/RubricAuxResponse"
                                  },
                                  "auxDictTagId = searchIndexStatus": {
                                      "$ref": "#/components/examples/SearchIndexStatusAuxResponse"
                                  },
                                  "auxDictTagId = userGroup": {
                                      "$ref": "#/components/examples/UserGroupAuxResponse"
                                  },
                                  "auxDictTagId = userPrivilege": {
                                      "$ref": "#/components/examples/UserPrivilegeAuxResponse"
                                  },
                                  "auxDictTagId = mailingStatus": {
                                      "$ref": "#/components/examples/MailignStatusAuxResponse"
                                  },
                                  "auxDictTagId = menu": {
                                      "$ref": "#/components/examples/Menu"
                                  },
                                  "auxDictTagId = userStatus": {
                                      "$ref": "#/components/examples/UserStatus"
                                  },
                                  "auxDictTagId = securityEvent": {
                                      "$ref": "#/components/examples/SecurityEvent"
                                  },
                                  "auxDictTagId = lastChangeType": {
                                      "$ref": "#/components/examples/LastChangeType"
                                  },
                                  "auxDictTagId = pushsubStatus": {
                                      "$ref": "#/components/examples/PushsubStatus"
                                  },
                                  "auxDictTagId = geoType": {
                                      "$ref": "#/components/examples/GeoTypeAuxResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/dictionaries/{dictionaryId}/columns": {
          "get": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Получение колонок справочника",
              "description": "Возвращает список колонок выбранного справочника. \n\nДанный формат нужен для:\n\n- формы редактирования каталога, при редактировании атрибута типа \"Справочник\".\nИспользуется в полях \"Поле для связи\" и \"Поле для вывода\".\n\n- формы создания поискового индекса по справочнику. Используется в поле \"Столбец справочника\".        ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DictionaryColumn"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionaryColumnArrayResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundResponse"
                  }
              }
          }
      },
      "/dictionaries": {
          "post": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Создание справочника",
              "description": "Метод используется при создании справочника с ручным управлением элементами или справочника на основе каталога. \nПри успешном создании в ответе в поле `id` передается идентификатор созданного справочника.\n\nПри создании справочника на основе каталога необходимо указать:\n  - идентификатор (`global_id` или `system_object_id`) объекта для использования в качестве идентификатора элемента справочника;\n  - атрибут каталога, используемый в качестве наименования справочных элементов;\n  - атрибут каталога, в котором содержится идентификатор родительского элемента в родительском справочнике, если он выбран;\n\n    При выборе атрибутов каталога доступны атрибуты следующих типов:\n      - строка;\n      - целое число;\n      - дробное число;\n      - справочник;\n      - ссылка.",
              "requestBody": {
                  "$ref": "#/components/requestBodies/DictionaryRequestBody"
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionaryCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Справочник с переданным названием `name` уже существует;\n  - В названии справочника присутствуют запрещенные символы;\n  - В наименовании доп. атрибутов присутствуют запрещенные символы;\n  - В тех. наименовании доп. атрибутов присутствуют запрещенные символы;\n  - В тех. наименовании доп. атрибута передано недопустимое значение (системный идентификатор);\n  - В тех. наименовании доп. атрибута переданы дубликаты;\n  - Переданы недопустимые атрибуты для связи с каталогом;\n  - Невалидное условие ограничения выборки;\n  - Для справочника на основе каталога и с родительким справочником не передан parentCatalogFieldId.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/OutOfScopeError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Неуникальное название справочника": {
                                      "$ref": "#/components/examples/DictionaryNameNotUniqueError"
                                  },
                                  "В названии справочника присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/DictionaryBadNameError"
                                  },
                                  "В названии доп. атрибута присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/DictionaryAddFieldBadNameError"
                                  },
                                  "В тех. названии доп. атрибута присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/DictionaryAddFieldBadTechNameError"
                                  },
                                  "В тех. названии доп. атрибута передано недопустимое значение": {
                                      "$ref": "#/components/examples/DictionaryAddFieldForbiddenTechNameError"
                                  },
                                  "В тех. названии доп. атрибута переданы дубликаты": {
                                      "$ref": "#/components/examples/DictionaryAddFieldDuplicatedTechNameError"
                                  },
                                  "Переданы недопустимые атрибуты для связи с каталогом": {
                                      "$ref": "#/components/examples/InvalidCatalogAttributesError"
                                  },
                                  "Невалидное условие ограничения выборки": {
                                      "$ref": "#/components/examples/ConditionValidationError"
                                  },
                                  "Для справочника на основе каталога и с родительким справочником не передан parentCatalogFieldId": {
                                      "$ref": "#/components/examples/MissingParentCatalogFieldIdError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "get": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Получение общей информации справочника",
              "description": "Метод возвращает информацию о справочниках по идентификаторам.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/Dictionary"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionaryArrayResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundResponse"
                  }
              }
          },
          "delete": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Удаление справочника",
              "description": "Метод используется для удаления одного или нескольких справочников.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionaryDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Один или несколько из переданных справочников используются в атрибутах;\n  - Один или несколько из переданных справочников являются родителями других справочников;\n  - Один или несколько из переданных справочников используются в поисковых индексах;\n  - Один или несколько из переданных справочников используются в конструкторе проверок каталогов заполнения;\n  - Один или несколько из переданных справочников используются в настройках уникальности каталогов заполнения;\n  - Один или несколько из переданных справочников используются в атрибутах каталога публикации;\n  - Один или несколько из переданных справочников используются в настройках ограничения выборки каталогов публикации.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/ResourceCannotBeDeletedError"
                              },
                              "examples": {
                                  "Справочник используется в атрибуте": {
                                      "$ref": "#/components/examples/DictionaryIsUsedInAttributesError"
                                  },
                                  "Справочник является родителем другого справочника": {
                                      "$ref": "#/components/examples/DictionaryIsParentDictionaryError"
                                  },
                                  "Справочник используется в поисковом индексе": {
                                      "$ref": "#/components/examples/DictionaryIsInSearchIndexesError"
                                  },
                                  "Справочник используется в конструкторе проверок каталога заполнения": {
                                      "$ref": "#/components/examples/DictionaryIsInCatalogPackageError"
                                  },
                                  "Справочник используется в настройках уникальностей каталога заполнения": {
                                      "$ref": "#/components/examples/DictionaryIsInCatalogUniqError"
                                  },
                                  "Справочник используется в атрибуте каталога публикации": {
                                      "$ref": "#/components/examples/DictionaryIsUsedInPublicationCatalogsError"
                                  },
                                  "Справочник используется в ограничених выборки каталога публикации": {
                                      "$ref": "#/components/examples/DictionaryIsUsedInPublCatalogConditionsError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundResponse"
                  }
              }
          }
      },
      "/dictionaries/validate": {
          "post": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Валидация условия ограничения выборки для справочника на основе каталога",
              "description": "Метод позволяет выполнить валидацию условия ограничения выборки справочника на основе каталога.",
              "requestBody": {
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "condition": {
                                      "description": "Условие ограничения выборки, описанное пользователем в формате TOML. Передаётся в виде строки с экранированием символов.",
                                      "type": "string"
                                  },
                                  "catalogId": {
                                      "description": "Идентификатор каталога для получения атрибутов и проверки их использования в условии",
                                      "type": "integer"
                                  }
                              },
                              "required": [
                                  "condition",
                                  "catalogId"
                              ]
                          },
                          "examples": {
                              "Пример": {
                                  "description": "Пример тела запроса с условием",
                                  "value": {
                                      "condition": "condition = \"contains(attr.City, 'Москва')\"",
                                      "catalogId": 6404
                                  }
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SuccessValidationResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Невалидное условие заполнения.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ConditionValidationError"
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/dictionaries/{dictionaryId}": {
          "put": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Изменение информации о справочнике",
              "description": "Изменяет информацию о справочнике. \n\n\nДля обычных справочников доступно редактирование наименования, а также русскоязычных наименований дополнительных столбцов. \n\nВ теле запроса необходимо отправлять полный список дополнительных столбцов.\nЕсли в теле запроса будет передано измененное техническое наименование столбца,\nэто будет восприниматься как удаление старой колонки и добавление новой.\n\n\nДля справочников на основе каталога доступно редактирование только наименования.\nЕсли будут переданы другие измененные поля, они будут прогнорированы.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdPathParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/DictionaryRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionaryEditedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибка построения запроса или целостности переданных данных.\n\n### Возможные ошибки бизнес-логики:\n  - Справочник с переданным названием `name` уже существует;\n  - В названии справочника присутствуют запрещенные символы;\n  - В наименовании доп. атрибутов присутствуют запрещенные символы;\n  - В тех. наименовании доп. атрибута передано недопустимое значение;\n  - Удаляется столбец справочника, по которому построен индекс;",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/OutOfScopeError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/ResourceCannotBeDeletedError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Неуникальное название справочника": {
                                      "$ref": "#/components/examples/DictionaryNameNotUniqueError"
                                  },
                                  "В названии справочника присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/DictionaryBadNameError"
                                  },
                                  "В названии доп. атрибута присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/DictionaryAddFieldBadNameError"
                                  },
                                  "В тех. названии доп. атрибута присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/DictionaryAddFieldBadTechNameError"
                                  },
                                  "В тех. названии доп. атрибута передано недопустимое значение": {
                                      "$ref": "#/components/examples/DictionaryAddFieldForbiddenTechNameError"
                                  },
                                  "Столбец справочника используется в индексе": {
                                      "$ref": "#/components/examples/DictionaryColumnIsInSearchIndexesError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundResponse"
                  }
              }
          }
      },
      "/dictionaries/{dictionaryId}/attributes/search": {
          "post": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Получение информации об атрибутах, в которых используется справочник",
              "description": "Возвращает информацию о неудаленных атрибутах, в которых используется справочник.\nАтрибут может использоваться или не использоваться в каталоге. Для поиска атрибутов в каталоге используется метод /catalogsAttributes/search \n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\nДля фильтрации по полям `id` и `name` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых атрибутов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку атрибутов.\nПоиск производится по полям `id` и `name`.\nВ ответе будут представлены только те атрибуты, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все атрибуты, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `name`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку атрибутов, в которых используется справочник",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "name"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/DictionariesAttributesSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DictionaryAttrubuteInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionariesAttributesInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundErrorResponse"
                  }
              }
          }
      },
      "/dictionaries/{dictionaryId}/catalogAttributes/search": {
          "post": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Получение информации о каталогах заполнения и атрибутах, в которых используется справочник",
              "description": "Возвращает информацию о неудаленных каталогах заполнения и атрибутах, в которых используется справочник.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `fullName`, `attributeRusName` и `attributeEnName` используется тело запроса.\n\nЕсли атрибут используется в табличном атрибуте каталога, то выводится идентификатор и наименование основного каталога. \nОстальные данные остаются неизменными (attributeRusName, attributeEnName). ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов и атрибутов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id`, `fullName`, `attributeRusName` и `attributeEnName`.\nВ ответе будут представлены только те каталоги и атрибуты, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги с атрибутами, идентификатор каталога или наименование каталога или атрибута которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `fullName`, `attributeRusName` и `attributeEnName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "attributeRusName",
                              "attributeEnName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов и атрибутов, в которых используется справочник",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName",
                                                              "attributeRusName",
                                                              "attributeEnName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/DictionariesCatalogsSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "attributes.yaml#/components/schemas/CatalogAttributeInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionariesCatalogsAttributesInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundErrorResponse"
                  }
              }
          }
      },
      "/dictionaries/{dictionaryId}/publicationCatalogAttributes/search": {
          "post": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Получение информации о каталогах публикации и атрибутах, в которых используется справочник",
              "description": "Возвращает информацию о неудаленных каталогах публикации и атрибутах, в которых используется справочник.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `fullName`, `attributeRusName` и `attributeEnName` используется тело запроса.\n\nЕсли атрибут используется в табличном атрибуте каталога, то выводится идентификатор и наименование основного каталога. \nОстальные данные остаются неизменными (`attributeRusName`, `attributeEnName`). ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов и атрибутов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id`, `fullName`, `attributeRusName` и `attributeEnName`.\nВ ответе будут представлены только те каталоги и атрибуты, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги с атрибутами, идентификатор каталога или наименование каталога или атрибута которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `fullName`, `attributeRusName` и `attributeEnName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "attributeRusName",
                              "attributeEnName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов, в которых используется справочник",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName",
                                                              "attributeRusName",
                                                              "attributeEnName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/DictionariesCatalogsSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "attributes.yaml#/components/schemas/CatalogAttributeInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionariesCatalogsAttributesInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundErrorResponse"
                  }
              }
          }
      },
      "/dictionaries/{dictionaryId}/searchIndexes/search": {
          "post": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Получение информации о поисковых индексах, в которых используется справочник",
              "description": "Возвращает информацию о неудаленных индексах, в которых используется справочник.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `name`, `dictColumnName` и `dictColumnTechName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых атрибутов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку индексов.\nПоиск производится по полям `id`, `name`, `dictColumnName` и `dictColumnTechName`.\nВ ответе будут представлены только те поисковые индексы, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все поисковые индексы, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `name`, `dictColumnName` и `dictColumnTechName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name",
                              "dictColumnName",
                              "dictColumnTechName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку поисковых индексов, в которых используется справочник",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "name",
                                                              "dictColumnName",
                                                              "dictColumnTechName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/DictionariesSearchIndexesSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DictionarySearchIndexInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionariesSearchIndexInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundErrorResponse"
                  }
              }
          }
      },
      "/dictionaries/{dictionaryId}/childDictionaries/search": {
          "post": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Получение информации о дочерних справочниках, в которых используется справочник как родитель",
              "description": "Возвращает информацию о неудаленных справочниках, в которых справочник указан родителем.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых справочников (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку справочников.\nПоиск производится по полям `id` и `name`.\nВ ответе будут представлены только те справочники, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все справочники, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id` и `name`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку дочерних справочников, в которых справочник указан родителем",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "name"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/DictionariesChildDictSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CommonDictionaryInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionariesChildDictsInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundErrorResponse"
                  }
              }
          }
      },
      "/dictionaries/{dictionaryId}/catalogPackages/search": {
          "post": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Получение информации о каталогах и конструкторах процессов, в которых используется справочник",
              "description": "Возвращает информацию о неудаленных каталогах заполнения и конструкторах процессов, в которых используется справочник.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `fullName`, `packName`, `packTechName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id`, `fullName`, `packName`, `packTechName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги и пакеты, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `fullName`, `packName`, `packTechName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "packName",
                              "packTechName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов, в которых справочник используется в конструкторе проверок",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName",
                                                              "packName",
                                                              "packTechName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/DictionariesCatalogsSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogs.yaml#/components/schemas/CatalogPackageInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionariesCatalogPackagesInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundErrorResponse"
                  }
              }
          }
      },
      "/dictionaries/{dictionaryId}/catalogUniqs/search": {
          "post": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Получение информации о каталогах и настройках уникальностей, в которых используется справочник",
              "description": "Возвращает информацию о неудаленных каталогах заполнения и настройках уникальностей, в которых используется справочник.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `fullName`, `uniqTypeTag`, `packTechName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id`, `fullName`, `uniqTypeTag`, `packTechName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги и пакеты, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `fullName`, `uniqTypeTag`, `packTechName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "uniqTypeTag",
                              "packTechName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов, в которых справочник используется в конструкторе проверок",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName",
                                                              "packTechName",
                                                              "uniqTypeTag"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/DictionariesCatalogsSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogs.yaml#/components/schemas/CatalogUniqInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionariesCatalogUniqInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundErrorResponse"
                  }
              }
          }
      },
      "/dictionaries/{dictionaryId}/publCatalogConditions/search": {
          "post": {
              "tags": [
                  "dictionaries"
              ],
              "summary": "Получение информации о каталогах публикации, в которых используется справочник",
              "description": "Возвращает информацию о неудаленных каталогах публикации, в которых используется справочник в настройках ограничения выборки.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id` и `fullName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов и атрибутов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id` и `fullName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id` и `fullName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов, в которых используется справочник",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/DictionariesAttributesSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionariesPublCatalogConditionsInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundErrorResponse"
                  }
              }
          }
      },
      "/dictionaryElements/search": {
          "post": {
              "tags": [
                  "dictionaryElements"
              ],
              "summary": "Поиск по списку элементов справочника",
              "description": "Возвращает список элементов справочника. \n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск по списку и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `name` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых элементов справочника (число от `1` до `500`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 500
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/dictionaryElementStatusesFilterQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/dictElemSearchParam"
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `name`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  },
                  {
                      "name": "parentDictElementIds",
                      "in": "query",
                      "description": "Массив идентификаторов элементов родительского справочника.\nВ ответе должны содержаться элементы справочника в соответствии с переданными родительскими идентификаторами.\nЕсли в массиве содержится идентификатор несуществующего или удалённого элемента, то он игнорируется.",
                      "required": false,
                      "schema": {
                          "type": "array",
                          "items": {
                              "type": "string"
                          }
                      }
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку элементов справочника",
                  "content": {
                      "application/json": {
                          "schema": {
                              "description": "Фильтр по списку элементов справочника",
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "name"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/DictionaryElementSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DictionaryElementListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionaryElementListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundResponse"
                  }
              }
          }
      },
      "/dictionaryElements/columns": {
          "get": {
              "tags": [
                  "dictionaryElements"
              ],
              "summary": "Получение столбцов для элементов справочника",
              "description": "Возвращает информацию о столбцах списка элементов справочника.\nДанные формат нужен для построения таблицы при просмотре элементов справочника, а также для построения формы редактирования элемента справочника.     \n\nКаждый столбец в ответе содержит информацию о типе столбца, его названии, отображаемом в интерфейсе, а также техническом наименовании.\n\nСтолбцы возвращаются в порядке следования в таблице.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DictionaryElementListColumn"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionaryElementListColumnArrayResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundResponse"
                  }
              }
          }
      },
      "/dictionaryElements": {
          "post": {
              "tags": [
                  "dictionaryElements"
              ],
              "summary": "Создание элемента справочника",
              "description": "Метод используется при создании элемента справочника. \nПри успешном создании в ответе в поле `id` передается идентификатор созданного элемента.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdQueryParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/DictionaryElement"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/DictionaryElementRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "object",
                                  "description": "Успешное создание элемента.",
                                  "properties": {
                                      "id": {
                                          "description": "Строковый идентифкатор ресурса, для которого передан ответ",
                                          "type": "string"
                                      },
                                      "message": {
                                          "description": "Текст ответа",
                                          "type": "string"
                                      },
                                      "code": {
                                          "description": "HTTP-код ошибки",
                                          "type": "integer",
                                          "format": "int32",
                                          "enum": [
                                              201
                                          ]
                                      },
                                      "messageType": {
                                          "description": "Тип ответа",
                                          "type": "string",
                                          "enum": [
                                              "Created"
                                          ]
                                      }
                                  },
                                  "required": [
                                      "code",
                                      "messageType",
                                      "message"
                                  ]
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionaryElementCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Создание или изменение элемента справочника на основе каталога;\n  - В названии элемента справочника присутствуют запрещенные символы;\n  - При создании элемента с доп. полями переданы доп. поля, не сооветствующие справочнику;\n  - Переданного parentElementId не существует в родительском справочнике;\n  - Переданный parentElementId помечен удаленным в родительском справочнике.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OutOfScopeError"
                              },
                              "examples": {
                                  "Создание или изменение элемента справочника на основе каталога": {
                                      "$ref": "#/components/examples/DictionaryFromCatalogElementEditError"
                                  },
                                  "В названии элемента справочника присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/DictionaryElementBadNameError"
                                  },
                                  "Доп. поля элемента не сооветствуют доп. полям справочника": {
                                      "$ref": "#/components/examples/WrongDictionaryFieldsError"
                                  },
                                  "Переданный parentElementId не существует в родительском справочнике": {
                                      "$ref": "#/components/examples/InvalidParentElementIdError"
                                  },
                                  "Переданный parentElementId помечен удаленным в родительском справочнике": {
                                      "$ref": "#/components/examples/ParentElementIsDeletedError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundResponse"
                  }
              }
          },
          "get": {
              "tags": [
                  "dictionaryElements"
              ],
              "summary": "Получение информации об элементе справочника",
              "description": "Метод используется для получения общей информации об элементах справочника по идентификаторам.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryElementIdsQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/dictionaryIdQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DictionaryElement"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionaryElementArrayResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id справочника не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id справочника": {
                                      "$ref": "#/components/examples/DictionaryNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "dictionaryElements"
              ],
              "summary": "Отметка элемента справочника удаленным",
              "description": "Метод используется для отметки удаленным одного или нескольких элементов справочника.\n\nПри удалении осуществляется проверка, используется ли элемент справочника в каталоге. Если используется, то удаление требует подтверждения.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/dictionaryElementIdsQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/userConfirmedDeletionQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionaryElementDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Удаление элемента справочника на основе каталога;\n  - Один или несколько из переданных элементов справочника используются в каталоге.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/ConflictError"
                              },
                              "examples": {
                                  "Удаление элемента справочника на основе каталога": {
                                      "$ref": "#/components/examples/DictionaryFromCatalogElementEditError"
                                  },
                                  "Элемент справочника используется в каталоге": {
                                      "$ref": "#/components/examples/DictionaryElementIsUsedInCatalogsError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Ресурс не найден.\n\n### Возможные ошибки бизнес-логики:\n  - Запрошенный id справочника не существует.\n  - Запрошенный id элемента справочника не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id справочника": {
                                      "$ref": "#/components/examples/DictionaryNotFoundError"
                                  },
                                  "Несуществующий id элемента справочника": {
                                      "$ref": "#/components/examples/DictionaryElementNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/dictionaryElements/{dictionaryElementId}": {
          "put": {
              "tags": [
                  "dictionaryElements"
              ],
              "summary": "Изменение элемента справочника",
              "description": "Метод используется для изменения информации об элементе справочника.         ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/dictionaryElementIdPathParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/DictionaryElement"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "object",
                                  "description": "Успешное создание элемента.",
                                  "properties": {
                                      "id": {
                                          "description": "Строковый идентифкатор ресурса, для которого передан ответ",
                                          "type": "string"
                                      },
                                      "message": {
                                          "description": "Текст ответа",
                                          "type": "string"
                                      },
                                      "code": {
                                          "description": "HTTP-код ошибки",
                                          "type": "integer",
                                          "format": "int32",
                                          "enum": [
                                              200
                                          ]
                                      },
                                      "messageType": {
                                          "description": "Тип ответа",
                                          "type": "string",
                                          "enum": [
                                              "Ok"
                                          ]
                                      }
                                  },
                                  "required": [
                                      "code",
                                      "messageType",
                                      "message"
                                  ]
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionaryElementEditedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Создание или изменение элемента справочника на основе каталога;\n  - В названии элемента справочника присутствуют запрещенные символы;\n  - При создании элемента с доп. полями переданы доп. поля, не сооветствующие справочнику\n  - Переданного parentElementId не существует в родительском справочнике\n  - Переданный parentElementId помечен удаленным в родительском справочнике",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OutOfScopeError"
                              },
                              "examples": {
                                  "Создание или изменение элемента справочника на основе каталога": {
                                      "$ref": "#/components/examples/DictionaryFromCatalogElementEditError"
                                  },
                                  "В названии элемента справочника присутствуют запрещенные символы": {
                                      "$ref": "#/components/examples/DictionaryElementBadNameError"
                                  },
                                  "Доп. поля элемента не сооветствуют доп. полям справочника": {
                                      "$ref": "#/components/examples/WrongDictionaryFieldsError"
                                  },
                                  "Переданный parentElementId не существует в родительском справочнике": {
                                      "$ref": "#/components/examples/InvalidParentElementIdError"
                                  },
                                  "Переданный parentElementId помечен удаленным в родительском справочнике": {
                                      "$ref": "#/components/examples/ParentElementIsDeletedError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id справочника не существует.\n  - Запрошенный id элемента справочника не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id справочника": {
                                      "$ref": "#/components/examples/DictionaryNotFoundError"
                                  },
                                  "Несуществующий id элемента справочника": {
                                      "$ref": "#/components/examples/DictionaryElementNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/dictionaryElements/recover": {
          "post": {
              "tags": [
                  "dictionaryElements"
              ],
              "summary": "Восстановление элемента справочника",
              "description": "Метод используется для восстановления одного или нескольких элементов справочника.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Тело запроса с массивом идентификаторов элементов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "elementIds": {
                                      "type": "array",
                                      "items": {
                                          "type": "string"
                                      },
                                      "minItems": 1,
                                      "maxItems": 100,
                                      "example": [
                                          43,
                                          343,
                                          64
                                      ]
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/DictionaryElementRecoverRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DictionaryElementRecoveredResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Создание или изменение элемента справочника на основе каталога.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OutOfScopeError"
                              },
                              "examples": {
                                  "Создание или изменение элемента справочника на основе каталога": {
                                      "$ref": "#/components/examples/DictionaryFromCatalogElementEditError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/dictionaryExports": {
          "post": {
              "tags": [
                  "dictionaryExports"
              ],
              "summary": "Запуск экспорта справочника",
              "description": "Метод выполняет запуск экспорта элементов справочника. По умолчанию экспортируются все элементы справочника: и активные, и удаленные.\n    \nФайл экспорта всегда будет иметь формат .csv.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdQueryParam"
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ExportCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundResponse"
                  }
              }
          }
      },
      "/dictionaryExports/{exportId}/cancel": {
          "get": {
              "tags": [
                  "dictionaryExports"
              ],
              "summary": "Отмена  экспорта справочника",
              "description": "Метод позволяет выполнить отмену запущенного экспорта справочника.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/exportIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ExportCancelledResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Экспорт уже завершен.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ExportIsAlreadyFinishedError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/ExportNotFoundResponse"
                  }
              }
          }
      },
      "/dictionaryExports/history": {
          "post": {
              "tags": [
                  "dictionaryExports"
              ],
              "summary": "Получение истории экспортов справочника",
              "description": "Метод позволяет получать историю экспортов справочника.\n\nМетод позволяет выполнять фильтрацию и пагинацию. Подробнее см. параметры запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/dictionaryIdQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых элементов списка историй экспортов (число от `1` до `100`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку экспортов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "userName",
                                                              "dateStart",
                                                              "dateEnd"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/ExportHistoryFilterRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ExportHistoryItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ExportHistoryItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/DictionaryNotFoundResponse"
                  }
              }
          }
      },
      "/regexps/search": {
          "post": {
              "tags": [
                  "regexps"
              ],
              "summary": "Поиск по списку регулярных выражений",
              "description": "Возвращает список регулярных выражений. \n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск по списку и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `name`, `value`, `description` используется тело запроса.",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых регулярных выражений (число от `1` до `500`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 500
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку регулярных выражений.\nПоиск производится по идентификатору и наименованию регулярного выражения.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `name`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку регулярных выражений",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "name",
                                                              "value",
                                                              "description"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/RegularExpressionSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/RegularExpression"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/RegularExpressionArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/regexps": {
          "post": {
              "tags": [
                  "regexps"
              ],
              "summary": "Создание регулярного выражения",
              "description": "Метод используется при создании регулярного выражения. \nПри успешном создании в ответе в поле `id` передается идентификатор созданного регулярного выражения.",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/RegularExpression"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/RegularExpressionRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/RegularExpressionCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Регулярное выражение невалидно;",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Регулярное выражение является невалидным": {
                                      "$ref": "#/components/examples/InvalidRegularExpressionError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "get": {
              "tags": [
                  "regexps"
              ],
              "summary": "Получение информации о регулярных выражениях",
              "description": "Возвращает полную информацию о регулярных выражениях по идентификаторам.       \nЕсли регулярное выражение с указанным идентификатором не найдено, оно не включаются в массив тела ответа.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/regexIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/RegularExpression"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/RegularExpressionArrayResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "regexps"
              ],
              "summary": "Удаление регулярных выражений",
              "description": "Метод используется для удаления одного или нескольких регулярных выражений.\n\nПри удалении осуществляется проверка (метод /regexps/{regexId}/checkAttributes), используется ли регулярное выражение в атрибутах каталогов. \nЕсли используется, то удаление невозможно.\n\nЕсли регулярное выражение привязано к атрибуту (именно к атрибуту, а не атрибуту каталога), то при удалении выражения ссылка в атрибуте обнуляется. \n",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/regexIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/RegularExpressionDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Одно или несколько из переданных регулярных выражений используются в атрибутах каталогов;\n  - Одно или несколько из переданных регулярных выражений используется в атрибутах;\n  - Одно или несколько из переданных регулярных выражений используется в конструкторе проверок каталога заполнения;\n  - Одно или несколько из переданных регулярных выражений используется в настройках уникальностей каталога заполнения;\n  - Одно или несколько из переданных регулярных выражений используется в настройках ограничения выборки каталога публикации;",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/ResourceCannotBeDeletedError"
                              },
                              "examples": {
                                  "Регулярное выражение используется в атрибуте каталога": {
                                      "$ref": "#/components/examples/RegularExpressionIsUsedInAttributesError"
                                  },
                                  "Регулярное выражение используется в атрибутах": {
                                      "$ref": "#/components/examples/RegularExpressionIsUsedInListAttributesError"
                                  },
                                  "Регулярное выражение используется в конструкторе проверок каталога заполнения": {
                                      "$ref": "#/components/examples/RegularExpressionIsUsedInCatalogPackagesError"
                                  },
                                  "Регулярное выражение используется в настройках уникальностей каталога заполнения": {
                                      "$ref": "#/components/examples/RegularExpressionIsUsedInCatalogUniqsError"
                                  },
                                  "Регулярное выражение используется в настройках ограничения выборки каталога публикации": {
                                      "$ref": "#/components/examples/RegularExpressionIsUsedInPublCatalogConditionsError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/regexps/{regexId}": {
          "put": {
              "tags": [
                  "regexps"
              ],
              "summary": "Изменение регулярного выражения",
              "description": "Метод используется для изменения информации о регулярном выражении.\nДля регулярного выражения доступно изменение наименования, значения и описания выражения.     \n\n\nПри редактировании осуществляется проверка (метод /regexps/{regexId}/checkAttributes), используется ли регулярное выражение в атрибутах каталогов. \nЕсли используется, то редактирование требует подтверждения.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/regexIdPathParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/RegularExpression"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/RegularExpressionRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/RegularExpressionEditedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Регулярное выражение невалидно;",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Регулярное выражение является невалидным": {
                                      "$ref": "#/components/examples/InvalidRegularExpressionError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/RegularExpressionNotFoundResponse"
                  }
              }
          }
      },
      "/regexps/{regexId}/attributes/search": {
          "post": {
              "tags": [
                  "regexps"
              ],
              "summary": "Получение информации об атрибутах, в которых используется регулярное выражение",
              "description": "Возвращает список атрибутов в неудаленных каталогах, где используется указанное регулярное выражение.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск по списку и пагинацию. Подробнее см. параметры запроса.\nДля фильтрации используется тело запроса.\n\n\nОтвет включает список атрибутов c идентификаторами, названием `attributeName` и названием каталога `catalogName`, к которому этот атрибут относится.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/regexIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых атрибутов (число от `1` до `500`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 500
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку атрибутов. Поиск производится по идентификатору и наименованию каталога, а также по идентификатору и наименованию атрибута.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `catalogId`, `catalogName`, `attributeId`, `attributeName`.\n\nПо умолчанию: `catalogId`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "catalogId",
                          "enum": [
                              "catalogId",
                              "catalogName",
                              "attributeId",
                              "attributeName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку атрибутов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "catalogId",
                                                              "catalogName",
                                                              "attributeId",
                                                              "attributeName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/RegularExpressionAttributeSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/RegularExpressionAttributeInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/RegularExpressionAttributeInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/RegularExpressionNotFoundResponse"
                  }
              }
          }
      },
      "/regexps/{regexId}/checkAttributes": {
          "get": {
              "tags": [
                  "regexps"
              ],
              "summary": "Проверка, используется ли регулярное выражение в атрибутах каталогов",
              "description": "Метод используется для проверки использования регулярного выражения в атрибутах каталогов.\nВозвращает ответ `true` или `false` и сообщение с результатом проверки.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/regexIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "description": "Результат проверки",
                                  "type": "object",
                                  "properties": {
                                      "usedInCatalogs": {
                                          "description": "Результат проверки. `true` если выражение используется в каталогах, `false` - не используется",
                                          "type": "boolean"
                                      },
                                      "message": {
                                          "description": "Сообщение с результатом проверки и информацией об атрибутах",
                                          "type": "string"
                                      }
                                  },
                                  "required": [
                                      "usedInCatalogs"
                                  ]
                              },
                              "examples": {
                                  "Результат проверки, когда регулярное выражение используется в каталогах": {
                                      "$ref": "#/components/examples/RegularExpressionCheckUsedResponse"
                                  },
                                  "Результат проверки, когда регулярное выражение НЕ используется в каталогах": {
                                      "$ref": "#/components/examples/RegularExpressionCheckNotUsedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/RegularExpressionNotFoundResponse"
                  }
              }
          }
      },
      "/regexps/testString": {
          "post": {
              "tags": [
                  "regexps"
              ],
              "summary": "Проверка, соответствует ли введенный текст регулярному выражению",
              "description": "Метод используется для проверки текста на соответствие регулярному выражению. \nВозвращает ответ `true` или `false` и сообщение с результатом проверки.      ",
              "requestBody": {
                  "description": "Пример тела запроса регулярным выражением и текстом для проверки",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "regexValue": {
                                      "description": "Значение регулярного выражения",
                                      "type": "string"
                                  },
                                  "textValue": {
                                      "description": "Текст для проверки на соответствие регулярному выражению",
                                      "type": "string"
                                  }
                              },
                              "required": [
                                  "regexValue",
                                  "textValue"
                              ]
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/RegularExpressionTestRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "description": "Результат проверки",
                                  "type": "object",
                                  "properties": {
                                      "textIsMatch": {
                                          "type": "boolean"
                                      },
                                      "message": {
                                          "description": "Сообщения результата проверки",
                                          "type": "string"
                                      }
                                  },
                                  "required": [
                                      "textIsMatch"
                                  ]
                              },
                              "examples": {
                                  "Успешный результат проверки": {
                                      "$ref": "#/components/examples/RegularExpressionMatchedResponse"
                                  },
                                  "Результат проверки с ошибкой": {
                                      "$ref": "#/components/examples/RegularExpressionNotMatchedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Регулярное выражение невалидно;",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Регулярное выражение является невалидным": {
                                      "$ref": "#/components/examples/InvalidRegularExpressionError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/regexps/{regexId}/catalogAttributes/search": {
          "post": {
              "tags": [
                  "regexps"
              ],
              "summary": "Получение информации о каталогах и атрибутах, в которых используется регулярное выражение",
              "description": "Возвращает информацию о неудаленных каталогах заполнения и атрибутах, в которых используется регулярное выражение.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `fullName`, `attributeRusName` и `attributeEnName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/regexIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов и атрибутов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов и атрибутов.\nПоиск производится по полям `id`, `fullName`, `attributeRusName` и `attributeEnName`.\nВ ответе будут представлены только те каталоги и атрибуты, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги с атрибутами, идентификатор каталога или наименование каталога или атрибута которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `fullName`, `attributeRusName` и `attributeEnName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "attributeRusName",
                              "attributeEnName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов и атрибутов, в которых используется регулярное выражение",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName",
                                                              "attributeRusName",
                                                              "attributeEnName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/RegularExpressionCatalogAttributeSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "attributes.yaml#/components/schemas/CatalogAttributeInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/RegularExpressionCatalogsAttributesInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/RegularExpressionNotFoundResponse"
                  }
              }
          }
      },
      "/regexps/{regexId}/catalogPackages/search": {
          "post": {
              "tags": [
                  "regexps"
              ],
              "summary": "Получение информации о каталогах и конструкторах процессов, в которых используется регулярное выражение",
              "description": "Возвращает информацию о неудаленных каталогах заполнения и конструкторах процессов, в которых используется регулярное выражение.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `fullName`, `packName`, `packTechName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/regexIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id`, `fullName`, `packName`, `packTechName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги и пакеты, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `fullName`, `packName`, `packTechName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "packName",
                              "packTechName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов, в которых используется регулярное выражение",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName",
                                                              "packName",
                                                              "packTechName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/RegularExpressionCatalogPackagesSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogs.yaml#/components/schemas/CatalogPackageInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/RegularExpressionCatalogPackageInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/RegularExpressionNotFoundResponse"
                  }
              }
          }
      },
      "/regexps/{regexId}/catalogUniqs/search": {
          "post": {
              "tags": [
                  "regexps"
              ],
              "summary": "Получение информации о каталогах и настройках уникальностей, в которых используется регулярное выражение",
              "description": "Возвращает информацию о неудаленных каталогах заполнения и настройках уникальностей, в которых используется регулярное выражение.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `fullName`, `uniqTypeTag`, `packTechName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/regexIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id`, `fullName`, `uniqTypeTag`, `packTechName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги и пакеты, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `fullName`, `uniqTypeTag`, `packTechName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "uniqTypeTag",
                              "packTechName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов, в которых используется регулярное выражение",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName",
                                                              "uniqTypeTag",
                                                              "packTechName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/RegularExpressionCatalogUniqsSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogs.yaml#/components/schemas/CatalogUniqInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/RegularExpressionCatalogUniqInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/RegularExpressionNotFoundResponse"
                  }
              }
          }
      },
      "/regexps/{regexId}/publCatalogConditions/search": {
          "post": {
              "tags": [
                  "regexps"
              ],
              "summary": "Получение информации о каталогах публикации, в которых используется регулярное выражение",
              "description": "Возвращает информацию о неудаленных каталогах публикации, в которых используется регулярное выражение в настройках ограничения выборки.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id` и `fullName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/regexIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id` и `fullName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `id` и `fullName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов, в которых используется регулярное выражение",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/RegularExpressionPublCatalogConditionsSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/RegularExpressionPublCatalogConditionsInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/RegularExpressionNotFoundResponse"
                  }
              }
          }
      },
      "/searchIndexes/search": {
          "post": {
              "tags": [
                  "searchIndexes"
              ],
              "summary": "Поиск по списку поисковых индексов",
              "description": "Возвращает список поисковых индексов, удовлетворящий поисковым критериям.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\nОтвет включает список объектов индексов с указанием идентификатора `id`, названия `name`, технического названия `techName`, \nописания индекса `description`, наименования справочника `dictName`, наименования столбца справочника `dictColumnName` и наименование статуса `status`.\n\nДля фильтрации используется тело запроса.",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых индексов (число от `1` до `100`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку индексов. Поиск производится по идентификатору индекса `id`, наименованиям `name` и `techName`, \nописанию индекса `description`, наименованию справочника `dictName`, наименованию столбца справочника `dictColumnName`.\n\nЗапрос со значением `12` вернет все индексы, у которых идентификатор индекса, наименования или описание индекса, \nнаименование справочника или столбца справочника которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `name`, `techName`, `dictName`, `dictColumnName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name",
                              "techName",
                              "dictName",
                              "dictColumnName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/searchIndexStatusesQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку поисковых индексов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "name",
                                                              "techName",
                                                              "description",
                                                              "dictName",
                                                              "dictColumnName",
                                                              "status"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/SearchIndexesSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/SearchIndexListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SearchIndexesListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  }
              }
          }
      },
      "/searchIndexes": {
          "get": {
              "tags": [
                  "searchIndexes"
              ],
              "summary": "Получение поисковых индексов по идентификаторам",
              "description": "Возвращает полную информацию о поисковых индексах по идентификаторам.\n\nЕсли поисковый индекс с указанным идентификатором не найден, он не включаются в массив тела ответа.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/searchIndexIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/SearchIndex"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SearchIndexesArrayResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "searchIndexes"
              ],
              "summary": "Создание поискового индекса",
              "description": "Создает поисковый индекс. \nВ запросе передается:\n- русскоязычное наименование поискового индекса в поле `name`\n- техническое наименование поискового индекса (латиницей) в поле `techName`\n- русскоязычное описание индекса в поле `description`\n- идентификатор справочника, по которому строится индекс в поле `dictId`\n- техническое наименование столбца справочника, по которому строится индекс в поле `dictColTechName`\n\nДля поискового индекса должны выполняться следующие правила:\n- уникальная комбинация справочника `dictId` и столбца справочника `dictColTechName`, по которому строится индекс\n- уникальное русскоязычное наименование `name`\n- уникальное техническое наименование `techName`\n\nЕсли справочник, по которому строится индекс имеет менее 10 000 записей, то индекс будет создан синхронно и пользователю выводится сообщение об успешном создании индекса.\nЕсли справчоник имеет более 10 000 записей, \nто справочник отправляется в очередь на построение индекса и пользователю выводится сообщение об успешном добавлении спрачоника в очередь построения индекса.         ",
              "requestBody": {
                  "$ref": "#/components/requestBodies/SearchIndexRequestBody"
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример синхронного создания индекса": {
                                      "$ref": "#/components/examples/SearchIndexSynchCreatedResponse"
                                  },
                                  "Пример асинхронного создания индекса (добавлен в очередь)": {
                                      "$ref": "#/components/examples/SearchIndexAsynchCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/SearchIndexBadRequestResponse"
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный dictId справочника не существует.\n  - Запрошенный столбец dictColTechName справочника не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий dictId справочника": {
                                      "$ref": "dictionaries.yaml#/components/examples/DictionaryNotFoundError"
                                  },
                                  "Несуществующий столбец dictColTechName справочника": {
                                      "$ref": "dictionaries.yaml#/components/examples/DictionaryTechColumnNotFoundError"
                                  }
                              }
                          }
                      }
                  },
                  "500": {
                      "description": "### Возможные внутренние ошибки:\n  - Ошибка синхронного создания поискового индекса.\n  - Ошибка добавления индекса в очередь построения индекса.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/InternalServerError"
                              },
                              "examples": {
                                  "Ошибка синхронного создания поискового индекса": {
                                      "$ref": "#/components/examples/SearchIndexSynchCreatedError"
                                  },
                                  "Ошибка добавления поискового индекса в очередь на построение": {
                                      "$ref": "#/components/examples/SearchIndexAsynchCreatedError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "searchIndexes"
              ],
              "summary": "Удаление поискового индекса",
              "description": "Удаляет поисковые индексы по переданным идентификаторам.\n\nЕсли поисковый индекс используется хотя бы в одном каталоге (атрибуте), \nбудет возвращена ошибка и удаление всех переданных поисковых индексов не будет выполнено.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/searchIndexIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SearchIndexesDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Один или несколько из переданных поисковых индексов используются в атрибутах каталога.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/ResourceCannotBeDeletedError"
                              },
                              "examples": {
                                  "Поисковый индекс используется в атрибуте каталога": {
                                      "$ref": "#/components/examples/SearchIndexIsUsedInCatalogsError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/searchIndexes/{indexId}": {
          "put": {
              "tags": [
                  "searchIndexes"
              ],
              "summary": "Изменение информации о поисковом индексе",
              "description": "Обновляет информацию о поисковом индексе.\n\nВ запросе передается:\n  - новое наименование поискового индекса в поле `name`\n  - новое техническое наименование поискового индекса в поле `techName`\n  - новое русскоязычное описание поискового индекса в поле `description`, \n  которые должны быть уникальными.\n\nПри редактировании данных о поисковом индексе должны выполняться следующие правила:\n  - нельзя изменять идентификатор справочника, по которому настроен индекс\n  - нельзя изменять наименование столбца справочника, по которому настроен индекс",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/searchIndexIdPathParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/SearchIndexRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SearchIndexEditedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/SearchIndexBadRequestPutResponse"
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id поискового индекса не существует.\n  - Запрошенный dictId справочника не существует.\n  - Запрошенный столбец dictColTechName справочника не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id поискового индекса": {
                                      "$ref": "#/components/examples/SearchIndexNotFoundError"
                                  },
                                  "Несуществующий dictId справочника": {
                                      "$ref": "dictionaries.yaml#/components/examples/DictionaryNotFoundError"
                                  },
                                  "Несуществующий столбец dictColTechName справочника": {
                                      "$ref": "dictionaries.yaml#/components/examples/DictionaryTechColumnNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/searchIndexes/{indexId}/catalogAttributes/search": {
          "post": {
              "tags": [
                  "searchIndexes"
              ],
              "summary": "Получение информации о каталогах и атрибутах, в которых используется поисковый индекс",
              "description": "Возвращает информацию о неудаленных каталогах и атрибутах, в которых используется поисковый индекс.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `fullName`, `attributeRusName` и `attributeEnName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/searchIndexIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов и атрибутов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов и атрибутов.\nПоиск производится по полям `id`, `fullName`, `attributeRusName` и `attributeEnName`.\nВ ответе будут представлены только те каталоги и атрибуты, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги с атрибутами, идентификатор каталога или наименование каталога или атрибута которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `fullName`, `attributeRusName` и `attributeEnName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "attributeRusName",
                              "attributeEnName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов и атрибутов, в которых используется поисковый индекс",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName",
                                                              "attributeRusName",
                                                              "attributeEnName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/SearchIndexCatalogSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "attributes.yaml#/components/schemas/CatalogAttributeInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SearchIndexCatalogInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/SearchIndexNotFoundErrorResponse"
                  }
              }
          }
      },
      "/searchIndexes/{indexId}/dictionary": {
          "get": {
              "tags": [
                  "searchIndexes"
              ],
              "summary": "Получение информации о справочнике, по которому построен поисковый индекс",
              "description": "Метод возвращает информацию о справочнике по идентификатору поискового индекса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/searchIndexIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "object",
                                  "allOf": [
                                      {
                                          "$ref": "#/components/schemas/SearchIndexDictionaryInfo"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SearchIndexDictionaryInfoResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/SearchIndexNotFoundErrorResponse"
                  }
              }
          }
      },
      "/searchIndexes/{indexId}/query": {
          "get": {
              "tags": [
                  "searchIndexes"
              ],
              "summary": "Запрос к поисковому индексу",
              "description": "Возвращает список значений поискового индекса, удовлетворяющих запросу. \nНа вывод отображается первые 50 значений индекса подходящих под запрос.  ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/searchIndexIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/queryQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "type": "string"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/IndexValueArrayResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/SearchIndexNotFoundErrorResponse"
                  }
              }
          }
      },
      "/searchIndexes/{indexId}/rebuild": {
          "post": {
              "tags": [
                  "searchIndexes"
              ],
              "summary": "Полное перестроение индекса",
              "description": "Выполняется запуск полного перестроение существующего индекса.\n\nПолное перестроение запускается в случае, если у индекса статус \"Ошибка построения\".\nПолное перестроение индекса выполняется всегда в асинхронном врежиме и пользователю выводится сообщение об успешном добавлении индекса в очередь построения индекса.         ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/searchIndexIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример асинхронного запуска перестроения индекса (добавлен в очередь)": {
                                      "$ref": "#/components/examples/SearchIndexAsynchRebuildResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id поискового индекса не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id поискового индекса": {
                                      "$ref": "#/components/examples/SearchIndexNotFoundError"
                                  }
                              }
                          }
                      }
                  },
                  "500": {
                      "description": "### Возможные внутренние ошибки:\n  - Ошибка синхронного перестроения поискового индекса.\n  - Ошибка добавления индекса в очередь перестроения индекса.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/InternalServerError"
                              },
                              "examples": {
                                  "Ошибка синхронного создания поискового индекса": {
                                      "$ref": "#/components/examples/SearchIndexSynchRebuildError"
                                  },
                                  "Ошибка добавления поискового индекса в очередь на построение": {
                                      "$ref": "#/components/examples/SearchIndexAsynchRebuildError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/searchIndexes/{indexId}/resendErrors": {
          "post": {
              "tags": [
                  "searchIndexes"
              ],
              "summary": "Повторная обработка ошибочных записей",
              "description": "Выполняется запуск повторной обработки ошибочных записей обновления индекса.\n\nЕсли у поискового индекса статус `Ошибки обновления`, то для индекса возможно запустить повторну обработку ошибочных записей, \nчто бы избежать необходимости запускать полное перестроение поискового индекса по методу `/searchIndexes/{indexId}/rebuild`.\nПовторная обработка выполняется всегда в асинхронном врежиме и пользователю выводится сообщение об успешном добавлении записей в очередь обновления индекса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/searchIndexIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример запуска повторной обработки ошибочных записей индекса": {
                                      "$ref": "#/components/examples/SearchIndexSynchResenderrorsResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id поискового индекса не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id поискового индекса": {
                                      "$ref": "#/components/examples/SearchIndexNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/oivs/search": {
          "post": {
              "tags": [
                  "oivs"
              ],
              "summary": "Получение списка ОИВов",
              "description": "Возвращает список неудалённых ОИВов, добавленных в ЕХД",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых ОИВов (число от `1` до `100`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке ОИВов. Поиск производится по атрибутам `id`, `name`, 'shortName', `inn`. Запрос со значением `12` вернет все ОИВы, идентификатор или наименование которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `id`, `name`, `shortName`, `inn`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name",
                              "shortName",
                              "inn"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  },
                  {
                      "name": "hasCatalogs",
                      "in": "query",
                      "required": false,
                      "description": "Признак, указывающий, что ОИВ является поставщиком хотя бы в одном каталоге",
                      "schema": {
                          "type": "boolean",
                          "default": false
                      }
                  },
                  {
                      "name": "countCatalogs",
                      "in": "query",
                      "required": false,
                      "description": "Признак, указывающий, что ответ должен содержать количество каталогов, для которых ОИВ является поставщиком",
                      "schema": {
                          "type": "boolean",
                          "default": false
                      }
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/OivListRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/OivListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OivListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/oivs": {
          "get": {
              "tags": [
                  "oivs"
              ],
              "summary": "Получение ОИВов по идентификаторам",
              "description": "Возвращает полную информацию об ОИВах по идентификаторам.\n\nЕсли ОИВ с указанными идентификатором не найден, он не включаются в массив тела ответа.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/oivIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "allOf": [
                                          {
                                              "$ref": "#/components/schemas/Oiv"
                                          },
                                          {
                                              "properties": {
                                                  "keycloakId": {
                                                      "type": "string"
                                                  },
                                                  "token": {
                                                      "type": "string"
                                                  }
                                              }
                                          }
                                      ]
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OivArrayResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "oivs"
              ],
              "summary": "Создание ОИВ",
              "description": "Создает новый ОИВ        ",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Oiv"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/OivCreateRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OivCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Наименование неуникально.\n  - ИНН не соответствует формату.            ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/WrongFormatError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Наименование неуникально": {
                                      "$ref": "#/components/examples/OivNotUniqueNameError"
                                  },
                                  "ИНН не соответствует формату": {
                                      "$ref": "#/components/examples/InnWrongFormatError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует родительский ОИВ с указанным идентификатором.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не существует родительский ОИВ с указанным идентификатором": {
                                      "$ref": "#/components/examples/OivNotExistError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "oivs"
              ],
              "summary": "Удаление ОИВ",
              "description": "Метод используется для удаления одного или нескольких ОИВов, не имеющих связи с пользователями, гуппами каталогов, огранизациями и другими ОИВ.\n\nПри удалении ОИВ удаляются связи ОИВ с каталогами. Если у каталога данный ОИВ единственный, то удаление ОИВ не выполняется.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/oivIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OivDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибка построения запроса или целостности переданных данных.\nОшибка может быть в параметре, заголовке или полях тела запроса.\nВ зависимости от этого текст ошибки может отличаться.\n\n### Возможные ошибки бизнес-логики:\n  - Удаляется ОИВ, который содержит пользователей;\n  - Удаляется ОИВ, являющийся родительским для других ОИВ;\n  - Удаляется ОИВ, который используется в группах каталогов;\n  - Удаляется ОИВ, после удаления которого не остается ОИВов в каталогах заполнения;\n  - Удаляется ОИВ, после удаления которого не остается ОИВов в каталогах публикации;",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/ResourceCannotBeDeletedError"
                              },
                              "examples": {
                                  "Удаляется ОИВ, который используется в пользователях": {
                                      "$ref": "#/components/examples/OivConnectedUserError"
                                  },
                                  "Удаляется ОИВ, являющийся родительским для других ОИВ": {
                                      "$ref": "#/components/examples/OivConnectedOivError"
                                  },
                                  "Удаляется ОИВ, который используется в группах каталогов": {
                                      "$ref": "#/components/examples/OivConnectedCatalogGroupsError"
                                  },
                                  "Удаляется ОИВ, после удаления которого не остается ОИВов в каталогах заполнения": {
                                      "$ref": "#/components/examples/OivConnectedCatalogError"
                                  },
                                  "Удаляется ОИВ, после удаления которого не остается ОИВов в каталогах публикации": {
                                      "$ref": "#/components/examples/OivConnectedPublicationCatalogError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/oivs/{oivId}": {
          "put": {
              "tags": [
                  "oivs"
              ],
              "summary": "Изменение данных ОИВ",
              "description": "Изменение данных ОИВ        ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/oivIdPathParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Oiv"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/OivModifyRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OivOkResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Наименование неуникально.\n  - ИНН не соответствует формату.            ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/WrongFormatError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Наименование неуникально": {
                                      "$ref": "#/components/examples/OivNotUniqueNameError"
                                  },
                                  "ИНН не соответствует формату": {
                                      "$ref": "#/components/examples/InnWrongFormatError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует родительский ОИВ с указанным идентификатором.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не существует родительский ОИВ с указанным идентификатором": {
                                      "$ref": "#/components/examples/OivNotExistError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/oivs/{oivId}/catalogs/search": {
          "post": {
              "tags": [
                  "oivs"
              ],
              "summary": "Поиск каталогов заполнения, связанных с ОИВ",
              "description": "Возвращает список неудалённых каталогов заполнения. \n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса. Для фильтрации по столбцам списка используется тело запроса.        ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/oivIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых каталогов (от `1` до `1000`).",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке каталогов.\nПоиск производится по идентификатору и полному наименованию каталога.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "thematicCategory",
                              "objectCategories",
                              "oivs"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/catalogListRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ. При отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив. Если переданы несуществующие идентификаторы категории, ОИВ, то также возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/OivCatalogListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OivCatalogListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/oivs/{oivId}/publicationCatalogs/search": {
          "post": {
              "tags": [
                  "oivs"
              ],
              "summary": "Получение информации о каталогах публикации, в которых указана ОИВ",
              "description": "Возвращает информацию о неудаленных каталогах публикации, в которых указана ОИВ в поле \"Поставщик информации\".\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id` и `fullName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/oivIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых каталогов (от `1` до `200`). По умолчанию `100`.",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id` и `fullName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги, идентификатор или наименование которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов, в которых указана ОИВ",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/OivCatalogSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OivCatalogInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/OivNotFoundResponse"
                  }
              }
          }
      },
      "/oivs/{oivId}/catalogGroups/search": {
          "post": {
              "tags": [
                  "oivs"
              ],
              "summary": "Получение информации о группах каталогов, в которых указана ОИВ",
              "description": "Возвращает информацию о неудаленных группах каталогов, в которых ОИВ указана в поле \"Добавлять все каталоги выбранных ОИВ\".\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id` и `name` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/oivIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых каталогов (от `1` до `200`). По умолчанию `100`.",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос по списку групп каталогов.\nПоиск производится по полям `id` и `name`.\nВ ответе будут представлены только те группы каталогов, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все группы каталогов, идентификатор или наименование которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку групп каталогов, в которых указана ОИВ",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "name"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/OivCatalogGroupsSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogGroups.yaml#/components/schemas/CommonCatalogGroupInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OivCatalogGroupsInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/OivNotFoundResponse"
                  }
              }
          }
      },
      "/oivs/{oivId}/childOivs/search": {
          "post": {
              "tags": [
                  "oivs"
              ],
              "summary": "Получение информации о дочерних ОИВах, в которых указана ОИВ",
              "description": "Возвращает информацию о неудаленных ОИВов, в которых ОИВ указана родителем.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id` и `name` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/oivIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых каталогов (от `1` до `200`). По умолчанию `100`.",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос по списку групп каталогов.\nПоиск производится по полям `id` и `name`.\nВ ответе будут представлены только те группы каталогов, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все группы каталогов, идентификатор или наименование которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку групп каталогов, в которых указана ОИВ",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "name"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/OivCatalogGroupsSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogGroups.yaml#/components/schemas/CommonCatalogGroupInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OivCatalogGroupsInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/OivNotFoundResponse"
                  }
              }
          }
      },
      "/users/search": {
          "post": {
              "tags": [
                  "users"
              ],
              "summary": "Получение списка пользователей",
              "description": "Возвращает список пользователей, включая удалённых и заблокированных",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых пользователей (число от `1` до `100`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке Пользователей. Поиск производится по атрибутам `id`, `Логин`, `Фамилия`, `Имя`, `Отчество` и `e-mail`. Запрос со значением `Iva` вернет всех Пользователей, атрибуты которого содержат подстроку `Iva`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `id`, `firstName`, `lastName`, `pathroName` `login`, `email`, `userGroupName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "lastName",
                              "firstName",
                              "pathroName",
                              "login",
                              "email",
                              "userGroupName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/oivIdQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/isAdminQueryParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/UserListRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/UserListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/UserListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/users": {
          "get": {
              "tags": [
                  "users"
              ],
              "summary": "Получение данных пользователя",
              "description": "Получение данных пользователя пользователя",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/userIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/User"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/UserDataResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "users"
              ],
              "summary": "Создание пользователя",
              "description": "Создает нового пользователя",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/User"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/UserCreateRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/UserCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Логин неуникален.\n  - Email неуникален.\n  - E-mail не соответствует формату.              ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/WrongFormatError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Логин неуникален": {
                                      "$ref": "#/components/examples/UserNotUniqueLoginError"
                                  },
                                  "E-mail неуникален": {
                                      "$ref": "#/components/examples/UserNotUniqueEmailError"
                                  },
                                  "E-mail не соответствует формату": {
                                      "$ref": "#/components/examples/EmailWrongFormatError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует организация пользователя с указанным идентификатором.\n  - Не существует группа пользователей с указанным идентификатором.\n  \n  - Не существует пункт меню с указанным идентификатором.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не существует организация пользователя с указанным идентификатором": {
                                      "$ref": "#/components/examples/OivNotExistError"
                                  },
                                  "Не существует группа пользователей с указанным идентификатором": {
                                      "$ref": "#/components/examples/GroupNotExistError"
                                  },
                                  "Не существует пункт меню с указанным идентификатором": {
                                      "$ref": "#/components/examples/MenuPointNotExistError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "users"
              ],
              "summary": "Изменение статуса учетной записи пользователя на \"Удалена\"",
              "description": "Метод используется для изменения статуса на \"Удалена\" одной или нескольких учетных записей пользователя пользователей.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/userIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/UserDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует пользователь с указанным идентификатором.              ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не существует пользователь с указанным идентификатором": {
                                      "$ref": "#/components/examples/UserNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/users/{userId}": {
          "put": {
              "tags": [
                  "users"
              ],
              "summary": "Изменение данных пользователя",
              "description": "Изменение данных пользователя       ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/userIdPathParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/User"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/UserModifyRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/UserOkResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Логин неуникален.\n  - Логин нельзя изменить.\n  - E-mail неуникален.\n  - E-mail не соответствует формату.\n  - Нельзя сделать постоянную учётную запись временной\n  - Нельзя изменить параметры временной учётной записи, если она истекла              ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/ResourceCannotBeEditedError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/WrongFormatError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/ResourceCannotBeEditedError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Логин неуникален": {
                                      "$ref": "#/components/examples/UserNotUniqueLoginError"
                                  },
                                  "Логин нельзя изменить": {
                                      "$ref": "#/components/examples/UserNotEdittedLoginError"
                                  },
                                  "E-mail неуникален": {
                                      "$ref": "#/components/examples/UserNotUniqueEmailError"
                                  },
                                  "E-mail не соответствует формату": {
                                      "$ref": "#/components/examples/EmailWrongFormatError"
                                  },
                                  "Нельзя сделать постоянную учётную запись временной": {
                                      "$ref": "#/components/examples/TempImpossibleError"
                                  },
                                  "Нельзя изменить параметры временной учётной записи, если она истекла": {
                                      "$ref": "#/components/examples/TempFinishedError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует пользователь с указанным идентификатором. \n  - Не существует организация пользователя с указанным идентификатором.\n  - Не существует группа пользователей с указанным идентификатором.\n  \n  - Не существует пункт меню с указанным идентификатором.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не существует пользователь с указанным идентификатором": {
                                      "$ref": "#/components/examples/UserNotFoundError"
                                  },
                                  "Не существует организация пользователя с указанным идентификатором": {
                                      "$ref": "#/components/examples/OivNotExistError"
                                  },
                                  "Не существует группа пользователей с указанным идентификатором": {
                                      "$ref": "#/components/examples/GroupNotExistError"
                                  },
                                  "Не существует пункт меню с указанным идентификатором": {
                                      "$ref": "#/components/examples/MenuPointNotExistError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/users/admins": {
          "post": {
              "tags": [
                  "users"
              ],
              "summary": "Создание администратора",
              "description": "Создает нового пользователя с признаком администраторa",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserAdmin"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/AdminCreateRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/UserCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Логин неуникален.\n  - E-mail неуникален.\n  - E-mail не соответствует формату.              ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/WrongFormatError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Логин неуникален": {
                                      "$ref": "#/components/examples/UserNotUniqueLoginError"
                                  },
                                  "E-mail неуникален": {
                                      "$ref": "#/components/examples/UserNotUniqueEmailError"
                                  },
                                  "E-mail не соответствует формату": {
                                      "$ref": "#/components/examples/EmailWrongFormatError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/users/admins/{userId}": {
          "put": {
              "tags": [
                  "users"
              ],
              "summary": "Изменение данных администратора",
              "description": "Изменение данных пользователя       ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/userIdPathParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/UserAdmin"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/AdminCreateRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/UserOkResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:              \n  - Логин неизменяем.\n  - E-mail неуникален.\n  - E-mail не соответствует формату.              ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/ResourceCannotBeEditedError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/WrongFormatError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Логин нельзя изменить": {
                                      "$ref": "#/components/examples/UserNotEdittedLoginError"
                                  },
                                  "E-mail неуникален": {
                                      "$ref": "#/components/examples/UserNotUniqueEmailError"
                                  },
                                  "E-mail не соответствует формату": {
                                      "$ref": "#/components/examples/EmailWrongFormatError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует пользователь с указанным идентификатором.               ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не существует пользователь с указанным идентификатором": {
                                      "$ref": "#/components/examples/UserNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/users/block": {
          "get": {
              "tags": [
                  "users"
              ],
              "summary": "Блокирование пользователя",
              "description": "Метод используется для блокировки одного или нескольких пользователей. В результате вызова метода статус учетной записи пользователя меняется на \"Заблокирована\".",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/userIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/UserBlockedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует пользователь с указанным идентификатором.              ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не существует пользователь с указанным идентификатором": {
                                      "$ref": "#/components/examples/UserNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/users/recover": {
          "get": {
              "tags": [
                  "users"
              ],
              "summary": "Восстановление пользователя",
              "description": "Метод используется для восстановления одного или нескольких пользователей. В результате вызова метода статус учетной записи пользователя меняется на \"Активна\". Нельзя восстановить запись, у которой isTemporary=true.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/userIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/UserRecoveredResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:              \n  - E-mail пользователя неуникален.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "E-mail пользователя неуникален": {
                                      "$ref": "#/components/examples/UserNotUniqueEmailError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует пользователь с указанным идентификатором.              ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не существует пользователь с указанным идентификатором": {
                                      "$ref": "#/components/examples/UserNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/users/{userId}/resetPassword": {
          "get": {
              "tags": [
                  "users"
              ],
              "summary": "Сброс пароля пользователя (триггер для вызова метода сброса пароля KeyCloak)",
              "description": "Метод используется для вызова метода сброса пароля в KeyCloak",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/userIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/UserResetPasswordResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:              \n  - Указанный пользователь аутентифицируется без пароля.                          ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/WrongFormatError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Пользователь аутентифицируется через СУДИР": {
                                      "$ref": "#/components/examples/UserHasNoPasswordError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует пользователь с указанным идентификатором.\n  - Статус пользователя неактивный (удален, заблокирован, временно заблокирован).              ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не существует пользователь с указанным идентификатором": {
                                      "$ref": "#/components/examples/UserNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/users/{userId}/specPrivileges/search": {
          "post": {
              "tags": [
                  "users"
              ],
              "summary": "Получение спецпривилегий пользователя по его идентификатору",
              "description": "Возвращает перечень назначенных спецпривилегий на каталоги и группы каталогов.        ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/userIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/dataModeFilterQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых спецпривилегий (число от `1` до `100`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке спецпривилегий Пользователя. Поиск производится по атрибутам `id`, `Наименование` каталога/группы каталогов. Запрос со значением `Iva` вернет все каталоги, атрибуты которого содержат подстроку `Iva`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `entityId`, `entityName`.\n\nПо умолчанию: `entityId`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "entityId",
                          "enum": [
                              "entityId",
                              "entityName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса для поиска по списку специальных привилегий",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "type": "string",
                                                          "enum": [
                                                              "entityId",
                                                              "entityName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/SpecPrivilegeSearchRequest"
                              }
                          }
                      }
                  },
                  "required": false
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/SpecPrivilegeInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SpecPrivilegeListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует пользователь с указанным идентификатором.              ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не существует пользователь с указанным идентификатором": {
                                      "$ref": "#/components/examples/UserNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/users/{userId}/specPrivileges": {
          "post": {
              "tags": [
                  "users"
              ],
              "summary": "Сохранение спецпривилегий пользователя",
              "description": "Сохранение спецпривилегий пользователя. Спецпривилегия должна назначаться для каталога или для группы каталогов. После сохранения спецпривилегий должно обновляться значение поля \"Наличие спецпривилегий\"(SPECIAL_PRIVILEGES) в таблице \"Пользователи\" (T_USER)       ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/userIdPathParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/SpecPrivilege"
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/UserCreateSpecPrivilegesRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SpecPrivilegeCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует пользователь с указанным идентификатором.\n  - Не существует каталог с указанным идентификатором.\n  - Не существует группа каталогов с указанным идентификатором.\n              ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не существует пользователь с указанным идентификатором": {
                                      "$ref": "#/components/examples/UserNotFoundError"
                                  },
                                  "Не существует каталог с указанным идентификатором": {
                                      "$ref": "#/components/examples/CatalogNotExistError"
                                  },
                                  "Не существует группа каталогов с указанным идентификатором": {
                                      "$ref": "#/components/examples/CatalogGroupNotExistError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "put": {
              "tags": [
                  "users"
              ],
              "summary": "Изменение спецпривилегий пользователя",
              "description": "Изменение спецпривилегий пользователя.      ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/userIdPathParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/SpecPrivilegeInfo"
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/SpecPrivilegeModifyRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SpecPrivilegeModifiedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Спецпривилегия не найдена.\n  - Не существует пользователь с указанным идентификатором.\n  - Не существует каталог с указанным идентификатором.\n  - Не существует группа каталогов с указанным идентификатором.\n               ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Спецпривилегия не найдена": {
                                      "$ref": "#/components/examples/SpecPrivNotExistError"
                                  },
                                  "Не существует пользователь с указанным идентификатором": {
                                      "$ref": "#/components/examples/UserNotFoundError"
                                  },
                                  "Не существует каталог с указанным идентификатором": {
                                      "$ref": "#/components/examples/CatalogNotExistError"
                                  },
                                  "Не существует группа каталогов с указанным идентификатором": {
                                      "$ref": "#/components/examples/CatalogGroupNotExistError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/users/specPrivileges": {
          "delete": {
              "tags": [
                  "users"
              ],
              "summary": "Удаление спецпривилегий пользователя",
              "description": "Удаление спецпривилегий пользователя.      ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/specPrivilegeIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SpecPrivilegeDeleteResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/thematicCategories/search": {
          "post": {
              "tags": [
                  "thematicCategories"
              ],
              "summary": "Получение списка тематических категорий",
              "description": "Возвращает список тематических категорий, добавленных в ЕХД",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых тематических категорий (число от `1` до `100`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке тематических категорий. Поиск производится по атрибутам `id`, `name` и `enName`. Запрос со значением `12` вернет все категории, идентификатор или наименование которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name",
                              "enName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку тематических категорий",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "name",
                                                              "enName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/ThematicCategorySearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ. \nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ThematicCategoryListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ThematicCategoryListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  }
              }
          }
      },
      "/thematicCategories": {
          "get": {
              "tags": [
                  "thematicCategories"
              ],
              "summary": "Получение тематических категорий по идентификаторам",
              "description": "Возвращает полную информацию о тематических категориях по идентификаторам.\n\nЕсли тематическая категория с указанным идентификатором не найдена, она не включаются в массив тела ответа.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/thematicCategoryIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ThematicCategory"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ThematicCategoryArrayResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "thematicCategories"
              ],
              "summary": "Создание тематической категории",
              "description": "Создает тематическую категорию. \nВ запросе передается:\n- Русскоязычное наименование тематической категории `name`\n- Англоязычное наименование темотической категории `enName`\n- Статус публикации тематической категории `statusTagId`\n- Идентификатор файла (uuid) иконки категории `fileId`\n\nДля тематической категории должны выполняться следующие правила:\n- уникальное русскоязычное наименование `name`\n- уникальное англоязычное наименование `enName`\n\nЕсли передается статус `Опубликована`, то должны выполняться следующие условия:\n  - англоязычное наименование (поле `enName`) должно быть заполнено\n  - идентификатор файла иконки категории (поле `fileId`) должно быть заполнено\n  - формат файла иконки категории должен быть `svg`",
              "requestBody": {
                  "$ref": "#/components/requestBodies/ThematicCategoryRequestBody"
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ThematicCategoryCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/ThematicCategoryBadRequestPostOrPutResponse"
                  }
              }
          },
          "delete": {
              "tags": [
                  "thematicCategories"
              ],
              "summary": "Удаление тематической категории",
              "description": "Удаляет тематические категории по переданным идентификаторам.\n\nЕсли одна или несколько тематических категорий используются хотя бы в одном каталоге, \nбудет возвращена ошибка и удаление всех переданных тематических категорий не будет выполнено.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/thematicCategoryIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ThematicCategoryDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/ThematicCategoryDeletedErrorResponse"
                  }
              }
          }
      },
      "/thematicCategories/{thematicCategoryId}": {
          "put": {
              "tags": [
                  "thematicCategories"
              ],
              "summary": "Изменение информации о тематической категории",
              "description": "Обновляет информацию о тематической категории.\n\nВ запросе передается:\n  - новое русскоязычное наименование тематической категории в поле `name`, которое должны быть уникальным\n  - новое англоязычное наименование тематической категории в поле `enName`, которое должны быть уникальным\n  - измененный статус публикации, если необходимо опубликовать или снять с публикации тематическую категорию\n  - измененный идентификатор файла иконки категории, если категория опубликована\n\nЕсли передается статус `Опубликована`, то должны выполняться следующие условия:\n  - англоязычное наименование (поле `enName`) должно быть заполнено\n  - идентификатор файла иконки категории (поле `fileId`) должно быть заполнено\n  - формат файла иконки категории должен быть `svg`",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/thematicCategoryIdPathParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/ThematicCategoryRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ThematicCategoryEditedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/ThematicCategoryBadRequestPostOrPutResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/ThematicCategoryNotFoundErrorResponse"
                  }
              }
          }
      },
      "/thematicCategories/{thematicCategoryId}/catalogs/search": {
          "post": {
              "tags": [
                  "thematicCategories"
              ],
              "summary": "Получение информации о каталогах заполнения, в которых используется тематическая категория",
              "description": "Возвращает информацию о неудаленных каталогах заполнения, в которых используется тематическая категория.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id` и `fullName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/thematicCategoryIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id` и `fullName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `id` и `fullName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов, в которых используется тематическая категория",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/ThematicCategoryCatalogSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ThematicCategoryCatalogInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/ThematicCategoryNotFoundErrorResponse"
                  }
              }
          }
      },
      "/thematicCategories/{thematicCategoryId}/publicationCatalogs/search": {
          "post": {
              "tags": [
                  "thematicCategories"
              ],
              "summary": "Получение информации о каталогах публикации, в которых используется тематическая категория",
              "description": "Возвращает информацию о неудаленных каталогах публикации, в которых используется тематическая категория.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id` и `fullName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/thematicCategoryIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id` и `fullName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `id` и `fullName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов, в которых используется тематическая категория",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/ThematicCategoryCatalogSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ThematicCategoryCatalogInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/ThematicCategoryNotFoundErrorResponse"
                  }
              }
          }
      },
      "/systems/search": {
          "post": {
              "tags": [
                  "systems"
              ],
              "summary": "Получение списка систем",
              "description": "Возвращает список информационных систем, добавленных в ЕХД",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых систем (число от `1` до `100`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке информационных систем. Поиск производится по атрибутам `id`, `name`, `login`. Запрос со значением `12` вернет все системы, идентификатор, наименование или логин которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `id`, `name`, `login`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name",
                              "login",
                              "fullName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/typeIntegrationQueryParam"
                  },
                  {
                      "name": "countCatalogs",
                      "in": "query",
                      "required": false,
                      "description": "Признак, указывающий, что ответ должен содержать количество каталогов, с которыми система имеет интеграцию. Если выбран тип интеграции supplier, consumer, то считается количество для указанного типа, иначе оба типа.",
                      "schema": {
                          "type": "boolean",
                          "default": false
                      }
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/SystemListRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ. При отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/SystemListItem"
                                  }
                              },
                              "examples": {
                                  "Пример (countCatalogs = true)": {
                                      "$ref": "#/components/examples/SystemListItemCountCatalogsArrayResponse"
                                  },
                                  "Пример (countCatalogs = false)": {
                                      "$ref": "#/components/examples/SystemListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/systems": {
          "get": {
              "tags": [
                  "systems"
              ],
              "summary": "Получение систем по идентификаторам",
              "description": "Возвращает полную информацию о системах по идентификаторам.\n\nЕсли система с указанным идентификатором не найдена, она не включаются в массив тела ответа.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/systemIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/System"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SystemArrayResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "systems"
              ],
              "summary": "Создание новой информационной системы",
              "description": "Метод используется при создании системы.",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/System"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/SystemCreatedRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SystemCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Наименование неуникально;\n  - Логин неуникален;            \n  - Не установлен пароль информационной системы.\n  - Ошибка ФЛК: указанный e-mail не соответствует регулярному выражению                         ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/WrongFormatError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Наименование неуникально": {
                                      "$ref": "#/components/examples/SystemNotUniqueNameError"
                                  },
                                  "Логин неуникален": {
                                      "$ref": "#/components/examples/SystemNotUniqueLoginError"
                                  },
                                  "Не установлен пароль информационной системы": {
                                      "$ref": "#/components/examples/SystemPasswordEmptyError"
                                  },
                                  "Ошибка ФЛК - указанный e-mail не соответствует регулярному выражению": {
                                      "$ref": "#/components/examples/SystemEmailFormatError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "systems"
              ],
              "summary": "Отметка системы удаленной",
              "description": "Метод используется для отметки удалёнными одной или нескольких систем.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/systemIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SystemDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Одина или несколько из переданных систем используются в каталогах заполнения;\n  - Одина или несколько из переданных систем используются в каталогах публикации;",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/ResourceCannotBeDeletedError"
                              },
                              "examples": {
                                  "Системе используется в каталогах заполнения": {
                                      "$ref": "#/components/examples/SystemIsUsedInCatalogsError"
                                  },
                                  "Система используется в каталогах публикации": {
                                      "$ref": "#/components/examples/SystemIsUsedInPublicationCatalogsError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/SystemNotFoundErrorResponse"
                  }
              }
          }
      },
      "/systems/recover": {
          "get": {
              "tags": [
                  "systems"
              ],
              "summary": "Восстановление системы",
              "description": "Метод используется для восстановления одной или нескольких систем.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/systemIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SystemRecoveredResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Восстанавление системы с неуникальным наименованием ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Восстанавление системы с неуникальным наименованием": {
                                      "$ref": "#/components/examples/SystemRecoverNotUniqueNameError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/systems/{systemId}": {
          "put": {
              "tags": [
                  "systems"
              ],
              "summary": "Изменение данных системы",
              "description": "Изменяет данные системы",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/systemIdPathParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/System"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/SystemCreatedRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SystemOkResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Наименование неуникально;\n  - Логин неуникален;\n  - Логин нельзя изменить;\n  - Ошибка ФЛК: указанный e-mail не соответствует регулярному выражению                         ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/UniqueValueError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/ResourceCannotBeEditedError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/WrongFormatError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Наименование неуникально": {
                                      "$ref": "#/components/examples/SystemNotUniqueNameError"
                                  },
                                  "Логин неуникален": {
                                      "$ref": "#/components/examples/SystemNotUniqueLoginError"
                                  },
                                  "Логин нельзя изменить": {
                                      "$ref": "#/components/examples/SystemNotEditLoginError"
                                  },
                                  "Ошибка ФЛК - указанный e-mail не соответствует регулярному выражению": {
                                      "$ref": "#/components/examples/SystemEmailFormatError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/systems/{systemId}/catalogs/search": {
          "post": {
              "tags": [
                  "systems"
              ],
              "summary": "Получение информации о каталогах заполнения, в которых указана система",
              "description": "Возвращает информацию о неудаленных каталогах заполнения, в которые система поставляет данные \n(указана в поле \"Система-поставщик\") или из которых система получает данные \n(указана в поле \"Система (только чтение)\").\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id` и `fullName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/systemIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых каталогов (от `1` до `200`).",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id` и `fullName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги, идентификатор или наименование которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/typeIntegrationQueryParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/SystemCatalogsRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SystemCatalogsInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/SystemNotFoundErrorResponse"
                  }
              }
          }
      },
      "/systems/{systemId}/publicationCatalogs/search": {
          "post": {
              "tags": [
                  "systems"
              ],
              "summary": "Получение информации о каталогах публикации, из которых система получает данные",
              "description": "Возвращает информацию о неудаленных каталогах публикации, из которых система получает данные \n(указана в поле \"Системы-потребители данных\").\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id` и `fullName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/systemIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых каталогов (от `1` до `1000`).",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id` и `fullName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги, идентификатор или наименование которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/SystemCatalogsRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SystemCatalogsInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/SystemNotFoundErrorResponse"
                  }
              }
          }
      },
      "/signatures/{catalogId}/check": {
          "get": {
              "tags": [
                  "signatures"
              ],
              "summary": "Запуск указанных проверок для каталога.",
              "description": "Метод используется для запуска указанных проверок на выбранный каталог.\nСписок проверок:\n  - Находится ли каталог в процессе подписания, \n  - Проверка, что у пользователя есть права на подписание данных каталога, \n  - Проверка, есть ли объекты с ошибками ФЛК,\n  - Проверка, указано ли у каталога ответственное лицо.\n  - Проверка, заполнено ли описание каталога.\n  - Находится ли каталог в процессе импорта. ",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/checkCatalogFilterQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/SigningCheckResult"
                              },
                              "examples": {
                                  "Успешный результат проверки": {
                                      "$ref": "#/components/examples/SigningCheckSuccessResultResponse"
                                  },
                                  "Результат проверки с ошибкой": {
                                      "$ref": "#/components/examples/SigningCheckErrorResultResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/signatures/{catalogId}": {
          "post": {
              "tags": [
                  "signatures"
              ],
              "summary": "Подписание всех неподписанных объектов выбранного каталога",
              "description": "Метод используется для подписания всех неподписанных объектов выбранного каталога. \n\n  - Если подписывается каталог, в котором более 500 объектов, то подписание отправляется в фон.\n  - Если подписывается каталог, в котором не более 500 объектов, то подписание осуществляется синхронно.\n\nДля каталога, у которого все объекты подписаны, при вызове этого метода будет осуществляться подтверждение отсутствия изменений.\n\nЕсли каталог уже находится в процессе подписания, то подписание не осуществляется.        ",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/signatureIdQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с данными цифровой подписи",
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/DigitalSignatureInfo"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/DigitalSignatureInfoRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Каталог добавлен в очередь подписания": {
                                      "$ref": "#/components/examples/CatalogObjectsAddedToQueueResponse"
                                  },
                                  "Каталог успешно подписан": {
                                      "$ref": "#/components/examples/CatalogInfoSignedResponse"
                                  },
                                  "Успешно подписано отсутствие изменений": {
                                      "$ref": "#/components/examples/NoChangesSignedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики, после которых в истории подписания процесс метится как завершён с ошибкой:\n  - Указанные даты валидности сертификата не включают текущую дату;\n### Возможные ошибки бизнес-логики, не влияющие на историю подпсиания:  \n  - Каталог уже находится в процессе подписания;\n  - Указанное подписание уже завершено;",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/OutOfScopeError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Каталог уже находится в процессе подписания": {
                                      "$ref": "#/components/examples/CatalogInSigningError"
                                  },
                                  "Указанное подписание уже завершено": {
                                      "$ref": "#/components/examples/SigningFinishedError"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "$ref": "_common.yaml#/components/responses/MethodForbiddenResponse"
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики, не влияющие на историю подпсиания:\n  - Запрошенный id каталога не существует.\n  - Запрошенный id подписания не существует для указанного каталога. ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id каталога": {
                                      "$ref": "catalogs.yaml#/components/examples/CatalogNotFoundError"
                                  },
                                  "Несуществующий id подписания в каталоге": {
                                      "$ref": "#/components/examples/SignatureInCatalogNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/signatures/{catalogId}/hash": {
          "get": {
              "tags": [
                  "signatures"
              ],
              "summary": "Получение общего хэша всех неподписанных объектов каталога",
              "description": "Метод используется для получения общего хэша всех неподписанных объектов выбранного каталога. В ответе передается hash-строка.\n\nДля каталога, у которого все объекты подписаны, вместо подписания будет осуществляться подтверждение отсутствия изменений. \nHash для этого метода будет рассчитываться от текущего timestamp'а.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/SigningHash"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SigningHashResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Вызванный метод `check` вернул ошибки.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "#/components/schemas/SigningCheckResult"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Результат проверки с ошибкой": {
                                      "$ref": "#/components/examples/SigningCheckErrorResultResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          },
          "post": {
              "tags": [
                  "signatures"
              ],
              "summary": "Создание общего хэша подписания для подписания через внешние API",
              "description": "Метод используется для получения общего хэша для всех объектов одной сессии подписания при подписании через внешние API. В ответе передается hash-строка",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "systems.yaml#/components/parameters/systemIdQueryParam"
                  },
                  {
                      "$ref": "files.yaml#/components/parameters/fileIdQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Тело запроса для сохранения объекта в каталоге с подписанием",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "signatures.yaml#/components/schemas/DigitalSignatureInfo"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "signatures.yaml#/components/examples/DigitalSignatureInfoRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/SigningHash"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SigningHashResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id каталога не существует\n  - Запрошенный id системы не существует\n  - Запрошенный id файла не существует",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id каталога": {
                                      "$ref": "catalogs.yaml#/components/examples/CatalogNotFoundError"
                                  },
                                  "Несуществующий id системы": {
                                      "$ref": "#/components/examples/SystemNotFoundError"
                                  },
                                  "Несуществующий id файла": {
                                      "$ref": "#/components/examples/FileNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/signatures/{catalogId}/meta": {
          "post": {
              "tags": [
                  "signatures"
              ],
              "summary": "Подписание метаданных выбранного каталога",
              "description": "Метод используется для подписания метаданных (описание, фио, email, телефон ответственного) выбранного каталога. \n\nПодписание происходит синхронно, в теле запроса передаются данные подписи и подписанный хэш, полученный с помощью плагина и библиотек КриптоПро на клиентской части системы.       ",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/signatureIdQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса c данными цифровой подписи",
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/DigitalSignatureInfo"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/DigitalSignatureInfoRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Метаданные каталога успешно подписаны": {
                                      "$ref": "#/components/examples/CatalogMetadataSignedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики, после которых в истории подписания процесс метится как завершён с ошибкой:\n  - Указанные даты валидности сертификата не включают текущую дату;\n### Возможные ошибки бизнес-логики, не влияющие на историю подпсиания:    \n  - Каталог уже находится в процессе подписания;\n  - Указанное подписание уже завершено;",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/OutOfScopeError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Каталог уже находится в процессе подписания": {
                                      "$ref": "#/components/examples/CatalogInSigningError"
                                  },
                                  "Указанное подписание уже завершено": {
                                      "$ref": "#/components/examples/SigningFinishedError"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "$ref": "_common.yaml#/components/responses/MethodForbiddenResponse"
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики, не влияющие на историю подпсиания:\n  - Запрошенный id каталога не существует.\n  - Запрошенный id подписания не существует в указанном каталоге. ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id каталога": {
                                      "$ref": "catalogs.yaml#/components/examples/CatalogNotFoundError"
                                  },
                                  "Несуществующий id подписания в каталоге": {
                                      "$ref": "#/components/examples/SignatureInCatalogNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/signatures/{catalogId}/meta/hash": {
          "get": {
              "tags": [
                  "signatures"
              ],
              "summary": "Получение хэша текущего значения метаданных каталога",
              "description": "Метод используется для получения общего хэша текущего значения метаданных выбранного каталога. В ответе передается hash-строка.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/SigningHash"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SigningHashResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Вызванный метод `check` вернул ошибки.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "#/components/schemas/SigningCheckResult"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Результат проверки с ошибкой": {
                                      "$ref": "#/components/examples/SigningCheckErrorResultResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/signatures/{catalogId}/signHistory": {
          "post": {
              "tags": [
                  "signatures"
              ],
              "summary": "Получение истории подписаний каталога",
              "description": "Метод позволяет получать историю подписаний выбранного каталога. История включает в себя все типы подписания.\n\nМетод позволяет выполнять фильтрацию и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `dateStart`, `dateEnd`, `userName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых элементов списка историй подписания (число от `1` до `1000`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку историй подписания",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "userName",
                                                              "dateStart",
                                                              "dateEnd"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  "signingTypes": {
                                      "description": "Тип подписания",
                                      "type": "array",
                                      "items": {
                                          "$ref": "#/components/schemas/SigningTypeTagIdEnum"
                                      },
                                      "minItems": 1
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/SignHistoryRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CatalogSignHistoryItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogSignHistoryItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/signatures/{catalogId}/status": {
          "get": {
              "tags": [
                  "signatures"
              ],
              "summary": "Получение информации о статусе подписания данных каталога",
              "description": "Метод используется для получения статусов подписания метаданных каталога и всех объектов каталога, а также информации о последнем подписании.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CatalogSigningInfo"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogSigningInfoResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/signatures/catalogObjects": {
          "post": {
              "tags": [
                  "signatures"
              ],
              "summary": "Подписание выбранных объектов каталога",
              "description": "Метод используется для подписания одного или нескольких выбранных объектов каталога.\n\nПеред осуществлением подписания необходимо проверить, что данные актуальны на текущий момент времени. \nЕсли объекты были изменены, пока пользователь находился на странице, то необходимо показывать уведомление с выбором действия - обновить страницу со списком объектов или закрыть окно с уведомлением.",
              "requestBody": {
                  "description": "Пример тела запроса со списком объектов, сгрупированных по статусам. Данные о цифровой подписи передаются в поле `digitalSignatureParams`",
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CatalogObjectsSignatureInfo"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogObjectsSignatureInfoRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogObjectsSignedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики, после которых в истории подписания процесс метится как завершён с ошибкой:\n  - Указанные даты валидности сертификата не включают текущую дату;\n  - Переданы уже подписанные или удаленные объекты;\n  - Актуальный статус объекта не соответствует переданному;\n  - Каталог находится в процессе импорта;\n### Возможные ошибки бизнес-логики, не влияющие на историю подпсиания:  \n  - Указанное подписание уже завершено.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/OutOfScopeError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Переданы уже подписанные или удаленные записи": {
                                      "$ref": "#/components/examples/CatalogObjectsSignedError"
                                  },
                                  "Актуальный статус объекта не соответствует переданному": {
                                      "$ref": "#/components/examples/CatalogObjectsStatusChangedError"
                                  },
                                  "Указанное подписание уже завершено": {
                                      "$ref": "#/components/examples/SigningFinishedError"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "$ref": "_common.yaml#/components/responses/MethodForbiddenResponse"
                  },
                  "404": {
                      "description": "Ресурс не найден.\n\n### Возможные ошибки бизнес-логики, после которых в истории подписания процесс метится как завершён с ошибкой:\n  - Запрошенные id объектов не существуют.\n### Возможные ошибки бизнес-логики, не влияющие на историю подпсиания:\n  - Запрошенный id каталога не существует.\n  - Запрошенный id подписания не существует в указанном каталоге.    ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id каталога": {
                                      "$ref": "catalogs.yaml#/components/examples/CatalogNotFoundError"
                                  },
                                  "Несуществующие id объектов": {
                                      "$ref": "catalogObjects.yaml#/components/examples/ObjectNotFoundError"
                                  },
                                  "Несуществующий id подписания в каталоге": {
                                      "$ref": "#/components/examples/SignatureInCatalogNotFoundError"
                                  }
                              }
                          }
                      }
                  },
                  "409": {
                      "description": "Данные в выбранных объектах были обновлены другим пользователем или системой.\nНеобходимо обновить данные на странице и повторить попытку.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/ConflictError"
                              },
                              "examples": {
                                  "Данные обновлены другим пользователем": {
                                      "$ref": "#/components/examples/CatalogObjectsSigningConflictError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/signatures/catalogObjects/check": {
          "get": {
              "tags": [
                  "signatures"
              ],
              "summary": "Запуск проверок для объектов каталога",
              "description": "Метод используется для запуска проверок на выбранные объекты каталога.\n\nСписок проверок:\n  - Находится ли каталог в процессе подписания, \n  - Проверка, что у пользователя есть права на подписание объектов, \n  - Проверка, есть ли объекты с ошибками ФЛК,\n  - Проверка, указано ли у каталога ответственное лицо.\n  - Проверка, заполнено ли описание каталога.\n  - Находится ли каталог в процессе импорта. ",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "$ref": "catalogObjects.yaml#/components/parameters/objectIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/SigningCheckResult"
                              },
                              "examples": {
                                  "Успешный результат проверки": {
                                      "$ref": "#/components/examples/SigningCheckSuccessResultResponse"
                                  },
                                  "Результат проверки с ошибкой": {
                                      "$ref": "#/components/examples/SigningCheckErrorResultResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id каталога не существует.\n  - Запрошенные id объектов не существуют. ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id каталога": {
                                      "$ref": "catalogs.yaml#/components/examples/CatalogNotFoundError"
                                  },
                                  "Несуществующие id объектов": {
                                      "$ref": "catalogObjects.yaml#/components/examples/ObjectNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/signatures/catalogObjects/hash": {
          "get": {
              "tags": [
                  "signatures"
              ],
              "summary": "Получение хэша выбранных объектов",
              "description": "Метод используется для получения общего хэша для выбранных объектов. В ответе передается hash-строка",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "$ref": "catalogObjects.yaml#/components/parameters/objectIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/SigningHash"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SigningHashResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Вызванный метод `check` вернул ошибки.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "#/components/schemas/SigningCheckResult"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Результат проверки с ошибкой": {
                                      "$ref": "#/components/examples/SigningCheckErrorResultResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id каталога не существует.\n  - Запрошенные id объектов не существуют.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id каталога": {
                                      "$ref": "catalogs.yaml#/components/examples/CatalogNotFoundError"
                                  },
                                  "Несуществующие id объектов": {
                                      "$ref": "catalogObjects.yaml#/components/examples/ObjectNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/signatures/cancelCatalogSigning": {
          "post": {
              "tags": [
                  "signatures"
              ],
              "summary": "Отмена фонового подписания объектов каталога",
              "description": "Отмена фонового подписания выбранного каталога пользователем. ",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/signatureIdQueryParam"
                  },
                  {
                      "name": "type",
                      "in": "query",
                      "required": false,
                      "description": "Тип отмены подписания: \n  - `userReq` - отмена подписания, вызванная пользователем. \n  - `sysError`- отмена подписания, вызванная системной ошибкой. Может произойти, если во время получения подписанного хэша возникли ошибки и дальнейшее подписание не может быть запущено. ",
                      "schema": {
                          "type": "string",
                          "enum": [
                              "userReq",
                              "sysError"
                          ],
                          "default": "userReq"
                      }
                  }
              ],
              "requestBody": {
                  "required": false,
                  "content": {
                      "application/json": {
                          "schema": {
                              "properties": {
                                  "message": {
                                      "description": "Текст ошибки, полученный от КриптоПро, при типе отмены sysError.",
                                      "type": "string"
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CancelCatalogSigningRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "type = userReq": {
                                      "$ref": "#/components/examples/SigningCanceledByUserResponse"
                                  },
                                  "type = sysError": {
                                      "$ref": "#/components/examples/SigningCanceledBySystemResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Подписание уже завершено.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Подписание уже завершено": {
                                      "$ref": "#/components/examples/CatalogInfoSigningFinishedBeforeCancelError"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "$ref": "_common.yaml#/components/responses/MethodForbiddenResponse"
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/signatures/validate": {
          "post": {
              "tags": [
                  "signatures"
              ],
              "summary": "Проверка валидности подписи",
              "description": "Метод используется для валидации подлинности сертификата у удостоверяющего центра КриптоПро,\nа также для влидации подписи объектов, переданных системой-поставщиком.\n\nВ теле запроса передается содержимое запроса catalogObjectSign (поле `json`) или setDataIn (поле `xml`) в виде строки. ",
              "requestBody": {
                  "description": "Запрос к методу валидации",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/DigitalSignatureValidationRequest"
                          },
                          "examples": {
                              "Запрос с XML": {
                                  "$ref": "#/components/examples/SignetureInfoXMLRequest"
                              },
                              "Запрос с JSON": {
                                  "$ref": "#/components/examples/SignetureInfoJSONRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ            ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Подпись валидна": {
                                      "$ref": "#/components/examples/SignatureOkResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:            \n- Сертификат недействителен\n- Срок действия сертификата истёк\n- Недействительный алгоритм\n- Не удалось проверить неподписанный хеш\n- Не удалось проверить подписанный хеш\n- Метод формирования хеша недопустим\n- Метод подписания недопустим\n- Не указан объект подписи",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Сертификат недействителен": {
                                      "$ref": "#/components/examples/SignatureErrorResponse"
                                  },
                                  "Срок действия сертификата истёк": {
                                      "$ref": "#/components/examples/SignaturePeriodErrorResponse"
                                  },
                                  "Недействительный алгоритм": {
                                      "$ref": "#/components/examples/AlgorithmErrorResponse"
                                  },
                                  "Не удалось проверить неподписанный хеш": {
                                      "$ref": "#/components/examples/UnsignedHashErrorResponse"
                                  },
                                  "Не удалось проверить подписанный хеш": {
                                      "$ref": "#/components/examples/SignedHashErrorResponse"
                                  },
                                  "Метод формирования хеша недопустим": {
                                      "$ref": "#/components/examples/CreateMethodUnacceptableResponse"
                                  },
                                  "Метод подписания недопустим": {
                                      "$ref": "#/components/examples/SignMethodUnacceptableResponse"
                                  },
                                  "Не указан объект подписи": {
                                      "$ref": "#/components/examples/NotSpecifiedObjectErrorResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/publication/queue/search": {
          "post": {
              "tags": [
                  "publication"
              ],
              "summary": "Поиск по списку каталогов, находящихся в очереди публикации",
              "description": "Возвращает список каталогов, находящихся в очереди публикации и удовлетворящих поисковым критериям.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nОтвет включает список каталогов с указанием идентификатора `catalogId`, названий `catalogName`, приоритет `priority`,\nа также количество объектов в зависимости от статуса в очереди публикации (см. описание тела ответа).\n\nДля фильтрации используется тело запроса.\n\nПо умолчанию сортировка производится в порядке убывания приоритета каталога.",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов (число от `1` до `100`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов в очереди.\nПоиск производится по идентификатору `catalogId` и наисменованию каталога `catalogName`.\n\nЗапрос со значением `12` вернет все каталога, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка списка. Допустимые значения: `catalogId`, `catalogName`, `priority`,\n`newCnt`, `inWorkCnt`, `publishedCnt`, `updatedCnt`, `deletedCnt`, `restoredCnt`, `passedCnt`, `errorCnt`.\n\nПо умолчанию: `priority`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "priority",
                          "enum": [
                              "catalogId",
                              "catalogName",
                              "priority",
                              "newCnt",
                              "inWorkCnt",
                              "publishedCnt",
                              "updatedCnt",
                              "deletedCnt",
                              "restoredCnt",
                              "passedCnt",
                              "errorCnt"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByDescQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов в очереди публикации",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "catalogId",
                                                              "catalogName",
                                                              "priority",
                                                              "newCnt",
                                                              "inWorkCnt",
                                                              "publishedCnt",
                                                              "updatedCnt",
                                                              "deletedCnt",
                                                              "restoredCnt",
                                                              "passedCnt",
                                                              "errorCnt"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/PublicationQueueSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CatalogPublicationQueueInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogPublicationQueueInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  }
              }
          }
      },
      "/publication/queue/setPriority": {
          "post": {
              "tags": [
                  "publication"
              ],
              "summary": "Изменение приоритета публикации каталога",
              "description": "Метод позволяет изменить приоритет публикации каталога.\n\nВ теле запроса указывается массив объектов с идентификатором каталога `catalogId` и новым приоритетом `priority`.\n\nОбычный пользователь может устанавливать приоритет в интервале от `1` до `10`.\n\nСистемный пользователь может устанавливать приоритет в интервале от `1` до `11`.\nЕсли каталог имеет приоритет 11, то изменить его может только системный пользователь.",
              "requestBody": {
                  "description": "Пример тела запроса для изменения приоритета публикации каталогов",
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "array",
                              "minItems": 1,
                              "maxItems": 100,
                              "items": {
                                  "type": "object",
                                  "description": "Объект, передаваемый для изменения приоритета",
                                  "properties": {
                                      "catalogId": {
                                          "description": "Идентификатор каталога",
                                          "type": "integer",
                                          "format": "int32"
                                      },
                                      "priority": {
                                          "description": "Обновленное значение приоритета",
                                          "type": "integer",
                                          "format": "int32",
                                          "minimum": 1,
                                          "maximum": 11
                                      }
                                  },
                                  "required": [
                                      "catalogId",
                                      "priority"
                                  ]
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/PublicationSetPriorityRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogPriorityChangedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Обычный пользователь меняет приоритет каталога на 11;\n  - Обычный пользователь меняет приоритет каталога, текущий приоритет которого 11.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/ResourceCannotBeDeletedError"
                              },
                              "examples": {
                                  "Обычный пользователь меняет приоритет каталога на 11": {
                                      "$ref": "#/components/examples/CatalogPublicationPriorityCannotBeChangedTo11"
                                  },
                                  "Обычный пользователь меняет приоритет каталога с приоритетом 11": {
                                      "$ref": "#/components/examples/CatalogPublicationPriorityCannotBeChangedFrom11"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/publication/queue/fill": {
          "get": {
              "tags": [
                  "publication"
              ],
              "summary": "Запуск наполнения очереди публикации для каталога",
              "description": "Запускает публикацию объектов каталога.\n\nВ параметрах запроса передаются идентификатор каталога публикации, его версия, а также причина публикации объектов.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "$ref": "publicationCatalogs.yaml#/components/parameters/versionQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/reasonQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationQueueFillingStartedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "publicationCatalogs.yaml#/components/responses/PublicationCatalogOrVersionNotFoundResponse"
                  }
              }
          }
      },
      "/files": {
          "post": {
              "tags": [
                  "files"
              ],
              "summary": "Сохранение файла и его описания",
              "description": "Метод используется для сохранения файла и его описания. \n\nНеобходимо обязательное заполнение поля `catalogId` при сохранении файлов, кроме файла иконки тематической категории и файла экспорта справочника\n(`fileProcessType = thematic-category` или `fileProcessType = dictionary-export`).",
              "requestBody": {
                  "content": {
                      "multipart/form-data": {
                          "schema": {
                              "$ref": "#/components/schemas/File"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/FileRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/FileCreatedResponse"
                              },
                              "example": {
                                  "id": "e81251b2-2dbc-4223-bbd8-17cbf4bf6adf",
                                  "code": 201,
                                  "messageType": "Created",
                                  "message": "Файл успешно создан!"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Превышен допустимый размер файла;\n  - Переданный catalogId не существует;\n  - Для переданного fileProcessType не указан catalogId;",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Превышен допустимый размер файла": {
                                      "$ref": "#/components/examples/BigFileSizeError"
                                  },
                                  "Переданный catalogId не существует": {
                                      "$ref": "#/components/examples/FileCatalogIdNotFoundError"
                                  },
                                  "Для переданного fileProcessType не указан catalogId": {
                                      "$ref": "#/components/examples/FileProcessTypeNoCatalogIdError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "files"
              ],
              "summary": "Удаление файла",
              "description": "Метод используется для удаления одного или нескольких файлов. В теле запроса передаются идентификаторы файлов (UUID).",
              "requestBody": {
                  "description": "Пример тела запроса",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/fileUuidArray"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/fileUuidArrayRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FileDeletedResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/files/getFilesInfo": {
          "post": {
              "tags": [
                  "files"
              ],
              "summary": "Получение информации об одном или нескольких файлах",
              "description": "Метод используется для получения информации о файлах. В теле запроса передаются идентификаторы файлов (UUID).",
              "requestBody": {
                  "description": "Пример тела запроса",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/fileUuidArray"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/fileUuidArrayRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/File"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FileArrayResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/files/{fileId}/download": {
          "get": {
              "tags": [
                  "files"
              ],
              "summary": "Скачивание файла",
              "description": "Метод используется для скачивания файла по идентификатору (uuid).",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/fileIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/octet-stream": {
                              "schema": {
                                  "type": "string",
                                  "format": "binary",
                                  "example": "<file-content>"
                              }
                          }
                      },
                      "headers": {
                          "Content-Disposition": {
                              "schema": {
                                  "type": "string"
                              },
                              "description": "Обязательный заголовок, должен начинаться с `attachment;` и содержать имя файла для скачивания",
                              "example": "attachment; filename=\"name.pdf\""
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/FileNotFoundResponse"
                  }
              }
          }
      },
      "/files/{fileId}/show": {
          "get": {
              "tags": [
                  "files"
              ],
              "summary": "Отображение изображения",
              "description": "Метод используется для отображения изображения в браузере. Для управления размером отображения используется параметр `fileSizeMode`.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/fileIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/fileSizeModeQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "image/jpeg": {
                              "schema": {
                                  "type": "string",
                                  "format": "binary",
                                  "example": "<file-content>"
                              }
                          },
                          "image/png": {
                              "schema": {
                                  "type": "string",
                                  "format": "binary",
                                  "example": "<file-content>"
                              }
                          },
                          "image/svg": {
                              "schema": {
                                  "type": "string",
                                  "format": "binary",
                                  "example": "<file-content>"
                              }
                          }
                      },
                      "headers": {
                          "Content-Disposition": {
                              "schema": {
                                  "type": "string"
                              },
                              "description": "Опциональный заголовок. Если указан, то должен содержать значение `inline`",
                              "example": "inline"
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/FileNotFoundResponse"
                  }
              }
          }
      },
      "/files/textToFile": {
          "post": {
              "tags": [
                  "files"
              ],
              "summary": "Получение файла, сформированного на основе текстовых данных",
              "description": "Возвращает файл или zip архив, если файлов несколько. Файлы формируются на основе отправленных в теле запроса текстовых данных.\nДля наименования файла с архивом используется дата запроса в виде YYYYMMDDHHMM-textToFile",
              "requestBody": {
                  "description": "Пример тела запроса",
                  "content": {
                      "application/json": {
                          "schema": {
                              "description": "Массив объектов, где каждый элемент представляет отдельный файл.",
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                  "$ref": "#/components/schemas/FileText"
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/TextToFileRequestBody"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/*": {
                              "schema": {
                                  "type": "string",
                                  "format": "binary",
                                  "example": "<file-content>"
                              }
                          }
                      },
                      "headers": {
                          "Content-Disposition": {
                              "schema": {
                                  "type": "string"
                              },
                              "description": "Обязательный заголовок, должен начинаться с `attachment;` и содержать имя файла для скачивания",
                              "example": "attachment; filename=\"constructor_33111.zip\""
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибкт бизнес-логики",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/MissingParamsError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/WrongTypeError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/OutOfScopeError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/WrongFormatError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не указан обязательный параметр": {
                                      "$ref": "_common.yaml#/components/examples/MissingParameterError"
                                  },
                                  "Неверный тип": {
                                      "$ref": "_common.yaml#/components/examples/WrongTypeParameterError"
                                  },
                                  "Значение не принадлежит определенному множеству": {
                                      "$ref": "_common.yaml#/components/examples/OutOfScopeEnumError"
                                  },
                                  "Длина массива меньше минимального": {
                                      "$ref": "_common.yaml#/components/examples/WrongFormatMinArrayLengthError"
                                  }
                              }
                          }
                      }
                  },
                  "405": {
                      "$ref": "_common.yaml#/components/responses/MethodNotAllowedResponse"
                  },
                  "408": {
                      "$ref": "_common.yaml#/components/responses/TimeoutResponse"
                  },
                  "500": {
                      "$ref": "_common.yaml#/components/responses/InternalServerErrorResponse"
                  }
              }
          }
      },
      "/files/fileToText": {
          "post": {
              "tags": [
                  "files"
              ],
              "summary": "Получение содержимого текстовых файлов в виде строк.",
              "description": "Возвращает массив объектов, описывающих файл и его содержимое.\nЕсли загружается 1 текстовый файл, то возвращается массив с одним элементом. \nЕсли загружают архив из нескольких файлов, то возвращается массив объектов, где 1 объект - 1 файл.\nДопускаются к загрузке форматы .zip, .txt, .toml  ",
              "requestBody": {
                  "description": "Текстовый файл или zip архив",
                  "content": {
                      "multipart/form-data": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "file": {
                                      "description": "zip архив или тектовый файл в формате .toml или .txt",
                                      "type": "string",
                                      "format": "binary",
                                      "example": "<file-content>"
                                  }
                              },
                              "required": [
                                  "file"
                              ]
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "minItems": 1,
                                  "items": {
                                      "$ref": "#/components/schemas/FileText"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/FileToTextResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/locks/search": {
          "post": {
              "tags": [
                  "locks"
              ],
              "summary": "Получение списка блокировок",
              "description": "Возвращает список текущих блокировок, добавленных в ЕХД",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых блокировок (число от `1` до `500`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 500
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке блокировок. Поиск производится по атрибутам `id`, `catalogId`, `catalogName`",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdsOptQueryParam"
                  },
                  {
                      "name": "lockType",
                      "in": "query",
                      "required": false,
                      "description": "Фильтр по типу блокировки. Если не указан, возвращаются любые. В параметре передается техническое наименование.",
                      "schema": {
                          "$ref": "#/components/schemas/LockTypeTagIdEnum"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "catalogId",
                              "catalogName",
                              "userId",
                              "userLogin",
                              "systemId",
                              "systemLogin",
                              "dateTimeCreated",
                              "dateTimeExpired"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку блокировок",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "catalogId",
                                                              "catalogName",
                                                              "userId",
                                                              "userLogin",
                                                              "systemId",
                                                              "systemLogin",
                                                              "dateTimeCreated",
                                                              "dateTimeExpired"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/LocksSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ. \nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/LockListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/LocksListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  }
              }
          }
      },
      "/locks": {
          "get": {
              "tags": [
                  "locks"
              ],
              "summary": "Получение блокировок по идентификаторам",
              "description": "Возвращает полную информацию о блокировках по идентификаторам.\n\nЕсли блокировка с указанным идентификатором не найдена, она не включаются в массив тела ответа.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/lockIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/Lock"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/LocksArrayResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "locks"
              ],
              "summary": "Создание блокировки",
              "description": "Создает блокировку.\n\nВ запросе может передаваться время жизни блокировки в миллисекундах.\nЕсли не передано, то блокировка будет создана со стандартным временем жизни для блокирующего процесса.",
              "requestBody": {
                  "$ref": "#/components/requestBodies/LockRequestBody"
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/LockCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибки создания блокировки:\n  - Не передан пользователь или система.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/NoUserOrSystemInLockResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/LocksNotFoundErrorResponse"
                  }
              }
          },
          "delete": {
              "tags": [
                  "locks"
              ],
              "summary": "Удаление блокировки",
              "description": "Удаляет блокировки по переданным идентификаторам.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/lockIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/LockDeletedResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/imports/uploadCSV": {
          "post": {
              "tags": [
                  "imports"
              ],
              "summary": "Загрузка и обработка файла импорта формата .csv",
              "description": "Метод позволяет обработать колонки файла импорта и после успешной обработки загрузить его в хранилище. Для загрузки в хранилище должен вызываться `POST /files`.\n\nМетод возвращает список колонок загруженного файла. ",
              "requestBody": {
                  "content": {
                      "multipart/form-data": {
                          "schema": {
                              "$ref": "#/components/schemas/ImportFile"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/ImportFileRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ProcessedFileInfo"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ProcessedFileInfoResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Загруженный файл не соответствует формату .csv.\n  - Наименование колонки файла является зарезервированным словом в БД (all, table, select...);\n  - Наименования колонок файла не уникальны.  ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Загруженный файл не соответствует формату .csv": {
                                      "$ref": "#/components/examples/FileIsNotCSV"
                                  },
                                  "Наименование колонки файла является зарезервированным словом в БД": {
                                      "$ref": "#/components/examples/FileColumnNameIsReservedError"
                                  },
                                  "Наименования колонок файла не уникальны": {
                                      "$ref": "#/components/examples/FileColumnNameNotUniqueError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/imports": {
          "post": {
              "tags": [
                  "imports"
              ],
              "summary": "Запуск процесса импорта",
              "description": "Запуск процесса импорта, для которого передаются параметры импорта и информация о файле.\n\nВместе с параметрами импорта обязательно передавать связку системного атрибута каталога и колонки файла в массиве `columnsMatching`. \nДля системных атрибутов передаются значения идентификаторов (`attributeId`): \n  - `global_id` = `-1`,\n  - `system_object_id` = `-2`.\n\nДля системных атрибутов вложенных каталогов передаются значения идентификаторов:\n  - `system_global_object_id` = `-5`,\n  - `global_object_id` = `-3`.",
              "requestBody": {
                  "description": "Пример тела запроса с данными импорта",
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ImportInfo"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/ImportInfoRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Импорт добавлен в очередь": {
                                      "$ref": "#/components/examples/ImportCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибка построения запроса или целостности переданных данных.\n\n### Возможные ошибки бизнес-логики:\n  - Выбранный каталог находится в процессе подписания.\n  - Не удалось обработать архив с файлами.\n  - Выставлены в `true` оба флага \"Предварительное удаление записей\" и \"Удалить неактуальные записи\".",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Каталог находится в процессе подписания": {
                                      "$ref": "#/components/examples/CatalogIsSigningError"
                                  },
                                  "Не удалось обработать архив с файлами": {
                                      "$ref": "#/components/examples/FileArchiveError"
                                  },
                                  "Выставлены в `true` оба флага \"Предварительное удаление записей\" и \"Удалить неактуальные записи\"": {
                                      "$ref": "#/components/examples/DeletionFlagsError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Указанный id каталога не существует.\n  - Указанный id вложенного каталога не существует в корневом каталоге.\n  - Указанный id атрибута не существует.\n  - Указанный id файла не существует.\n  - Указанное наименование колонки файла не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id каталога": {
                                      "$ref": "catalogs.yaml#/components/examples/CatalogNotFoundError"
                                  },
                                  "Несуществующий id вложенного каталога": {
                                      "$ref": "#/components/examples/ChildCatalogNotFoundInCatalogError"
                                  },
                                  "Несуществующий id атрибута": {
                                      "$ref": "attributes.yaml#/components/examples/AttributeNotFoundError"
                                  },
                                  "Несуществующий id файла": {
                                      "$ref": "#/components/examples/FileNotFoundError"
                                  },
                                  "Несуществующее наименование колонки файла": {
                                      "$ref": "#/components/examples/FileColumnNameNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "get": {
              "tags": [
                  "imports"
              ],
              "summary": "Получение параметров выбранных импортов",
              "description": "Возвращает информацию о параметрах импорта, вызывается из истории импортов.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/importIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ImportInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ImportInfoArrayResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/imports/{importId}/cancel": {
          "get": {
              "tags": [
                  "imports"
              ],
              "summary": "Отмена импорта объектов каталога",
              "description": "Отмена выбранного импорта пользователем. ",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/importIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ImportCanceledByUserResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Импорт уже завершен.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Импорт уже завершен": {
                                      "$ref": "#/components/examples/ImportFinishedError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id каталога не существует.\n  - Запрошенный id импорта не существует. ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id каталога": {
                                      "$ref": "catalogs.yaml#/components/examples/CatalogNotFoundError"
                                  },
                                  "Несуществующий id импорта": {
                                      "$ref": "#/components/examples/ImportNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/imports/history": {
          "post": {
              "tags": [
                  "imports"
              ],
              "summary": "Получение истории импортов каталога",
              "description": "Метод позволяет получать историю импортов выбранного каталога.\n\nМетод позволяет выполнять фильтрацию и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `importName`, `dateStart`, `dateEnd` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых элементов списка истории импорта (число от `1` до `1000`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку истории импорта",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "importName",
                                                              "dateStart",
                                                              "dateEnd",
                                                              "countInWorkObj",
                                                              "statusTagId"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/ImportHistoryRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CatalogImportHistoryItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogImportHistoryItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/exports": {
          "post": {
              "tags": [
                  "exports"
              ],
              "summary": "Запуск экспорта каталога заполнения",
              "description": "Выполняет запуск экспорта по каталогу заполнения. По умолчанию в файл экспорта попадают объекты со статусами: new, signed, toModification\n\nВ теле запроса могут передаваться: фильтры, ограничивающие  выборку экспортируемых объектов,\nа также сортировки, определяющие порядок объектов в итоговом файле.\n\nВ тело запроса также передаются атрибуты, которые включаются в итоговый файл экспорта.\nДля включения в файл экспорта системных атрибутов необходимо добавить их идентификаторы в массив:\n  - информация о подписи объекта (attrId = -12);",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/exportTypeQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/exportOnlyRootCatalogQueryParam"
                  },
                  {
                      "$ref": "catalogObjects.yaml#/components/parameters/objectStatusesQueryParam"
                  },
                  {
                      "$ref": "geodata.yaml#/components/parameters/FetchGeodataExportQueryParam"
                  }
              ],
              "requestBody": {
                  "required": false,
                  "description": "Тело запроса",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "catalogObjects.yaml#/components/schemas/RootCatalogObjectListFilter"
                                      }
                                  },
                                  "sortings": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "_common.yaml#/components/schemas/Sorting"
                                      }
                                  },
                                  "attributes": {
                                      "$ref": "#/components/schemas/ExportAttributesList"
                                  }
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ExportCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Переданный оператор не может быть применен для указанного атрибута (несоответствие типа);\n  - Передана отметка о необходимости экспортировать геоданные объектов для каталога, у которого отключена геопривязка ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/OutOfScopeError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Неверный оператор": {
                                      "$ref": "_common.yaml#/components/examples/WrongFilterOperatorError"
                                  },
                                  "Запрошена геометрия для каталога без геопривязки": {
                                      "$ref": "#/components/examples/FetchGeodataError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogObjects.yaml#/components/responses/CatalogObjectSearchNotFoundResponse"
                  }
              }
          }
      },
      "/exports/history": {
          "post": {
              "tags": [
                  "exports"
              ],
              "summary": "Получение истории экспортов каталога заполнения",
              "description": "Метод позволяет получать историю экспортов каталога.\n\nМетод позволяет выполнять фильтрацию и пагинацию. Подробнее см. параметры запроса.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых элементов списка историй экспортов (число от `1` до `100`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку экспортов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "userName",
                                                              "dateStart",
                                                              "dateEnd",
                                                              "countAllObj",
                                                              "statusTagId"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/ExportHistoryRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ExportHistoryItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ExportHistoryItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/exports/{exportId}/cancel": {
          "get": {
              "tags": [
                  "exports"
              ],
              "summary": "Отменяет выполнение экспорта",
              "description": "Выполняет отмену запущенного экспорта",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/exportIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ExportCancelledResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Экспорт уже завершен.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ExportIsAlreadyFinishedError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/ExportNotFoundResponse"
                  }
              }
          }
      },
      "/exports/{exportId}/settings": {
          "get": {
              "tags": [
                  "exports"
              ],
              "summary": "Получение настроек экспорта",
              "description": "Возвращает фильтры применённые к экспорту: фильтр по атрибутам, фильтр по статусам, сортировка, а также перечень атрибутов, включенных в итоговый файл экспорта.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/exportIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ExportSettings"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ExportSettingsResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/ExportNotFoundResponse"
                  }
              }
          }
      },
      "/publicationExports": {
          "post": {
              "tags": [
                  "publicationExports"
              ],
              "summary": "Запуск экспорта каталога публикации",
              "description": "Выполняет запуск экспорта по каталогу публикации. По умолчанию в файл экспорта попадают объекты со статусом: active.\n\nВ теле запроса могут передаваться фильтры, ограничивающие  выборку экспортируемых объектов,\nа также сортировки, определяющие порядок объектов в итоговом файле.\nПри этом фильтры и сортировки не могут передаваться, если необходимо возвращать удаленные объекты.\n\nВ тело запроса также передаются атрибуты, которые включаются в итоговый файл экспорта. \n\nНевозможен экспорт с геоданными объектов в формате xlsx.\n\nДля включения в файл экспорта системных атрибутов необходимо добавить их идентификаторы в массив:\n  - дата публикации (attrId = -8);",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/exportTypeQueryParam"
                  },
                  {
                      "$ref": "publicationObjects.yaml#/components/parameters/publicationStatusesQueryParam"
                  },
                  {
                      "$ref": "exports.yaml#/components/parameters/exportOnlyRootCatalogQueryParam"
                  },
                  {
                      "$ref": "geodata.yaml#/components/parameters/FetchGeodataExportPublQueryParam"
                  }
              ],
              "requestBody": {
                  "required": false,
                  "description": "Тело запроса с фильтрами и сортировками по списку объектов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "description": "Для случая, если в запросе передаются фильтры и массив атрибутов, при этом в фильтрах указан атрибут, которого нет в массиве атрибутов, то такой фильтр должен игнорироваться и не применяться к выборке.",
                                      "type": "array",
                                      "items": {
                                          "$ref": "#/components/schemas/PublicExportFilter"
                                      }
                                  },
                                  "sortings": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "_common.yaml#/components/schemas/Sorting"
                                      }
                                  },
                                  "attributes": {
                                      "$ref": "exports.yaml#/components/schemas/ExportAttributesList"
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/PublicationExportRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "exports.yaml#/components/examples/ExportCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Переданный оператор не может быть применен для указанного атрибута (несоответствие типа);\n  - Передана отметка о необходимости экспортировать геоданные объектов для каталога, у которого отключена геопривязка; \n  - Экспорт геоданных невозможен в xlsx.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/OutOfScopeError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Неверный оператор": {
                                      "$ref": "_common.yaml#/components/examples/WrongFilterOperatorError"
                                  },
                                  "Запрошена геометрия для каталога без геопривязки": {
                                      "$ref": "#/components/examples/FetchGeodataError"
                                  },
                                  "Запрошен экспорт в недопустимом для геометрии формате": {
                                      "$ref": "#/components/examples/XlsxGeodataError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Доступ к каталогу ограничен",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id каталога": {
                                      "$ref": "publicationCatalogs.yaml#/components/examples/PublicationCatalogNotFoundError"
                                  },
                                  "Отсутсвуют данные на дату": {
                                      "$ref": "#/components/examples/PublicCatalogDataNotFound"
                                  },
                                  "Атрибут фильтра или сортировки не существует в каталоге": {
                                      "$ref": "_common.yaml#/components/examples/FilterSortingAttributeNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/publicationExports/history": {
          "post": {
              "tags": [
                  "publicationExports"
              ],
              "summary": "Получение истории экспортов каталога публикации",
              "description": "Метод позволяет получать историю экспортов публикации. Сортировка списка по умолчанию - по убыванию даты запроса экспорта (DATE_CREATED в БД).\n\nМетод позволяет выполнять фильтрацию и пагинацию. Подробнее см. параметры запроса.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых элементов списка историй экспортов (число от `1` до `100`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку экспортов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "userName",
                                                              "dateStart",
                                                              "dateEnd",
                                                              "countAllObj",
                                                              "statusTagId",
                                                              "type"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "exports.yaml#/components/examples/ExportHistoryRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "exports.yaml#/components/schemas/ExportHistoryItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicExportHistoryItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/publicationExports/{exportId}/cancel": {
          "get": {
              "tags": [
                  "publicationExports"
              ],
              "summary": "Отменяет выполнение экспорта",
              "description": "Выполняет отмену запущенного экспорта каталога публикации.",
              "parameters": [
                  {
                      "$ref": "exports.yaml#/components/parameters/exportIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "exports.yaml#/components/examples/ExportCancelledResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Экспорт уже завершен.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "exports.yaml#/components/examples/ExportIsAlreadyFinishedError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "exports.yaml#/components/responses/ExportNotFoundResponse"
                  }
              }
          }
      },
      "/publicationExports/{exportId}/settings": {
          "get": {
              "tags": [
                  "publicationExports"
              ],
              "summary": "Получение настроек экспорта каталога публикации",
              "description": "Возвращает фильтры применённые к экспорту: фильтр по атрибутам, фильтр по статусам, сортировка",
              "parameters": [
                  {
                      "$ref": "exports.yaml#/components/parameters/exportIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/PublicExportSettings"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicExportSettingsResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "exports.yaml#/components/responses/ExportNotFoundResponse"
                  }
              }
          }
      },
      "/datasets/search": {
          "post": {
              "tags": [
                  "datasets"
              ],
              "summary": "Поиск по списку наборов данных",
              "description": "Возвращает список наборов данных отсортированный по возрастанию идентификатора набора данных.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\nДля фильтрации по столбцам списка используется тело запроса.",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых каталогов (от `1` до `1000`).",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке наборов данных.\nПоиск производится по атрибутам `id`, `name`, `publicationCatalogId`.\nЗапрос со значением `12` вернет все наборы, идентификатор или наименование которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name",
                              "publicationStatus",
                              "lastReleaseDate",
                              "publicationCatalogId",
                              "publicationCatalogHasNewVersion"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  },
                  {
                      "name": "publicationStatuses",
                      "in": "query",
                      "required": false,
                      "description": "Параметр для фильтрации по статусам наборов данных. Передается техническое наименование статуса.",
                      "schema": {
                          "$ref": "#/components/schemas/DatasetPublicationStatusTagIdEnum"
                      }
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/datasetsListRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DatasetListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DatasetListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/datasets/lite/search": {
          "get": {
              "tags": [
                  "datasets"
              ],
              "summary": "Поиск по списку наборов данных с минимальным набором свойств",
              "description": "Возвращает список неудалённых наборов данных с минимальным набором свойств (`id`, `name`).\n",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых каталогов (от `1` до `1000`).",
                      "schema": {
                          "type": "integer",
                          "default": 1000,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в наборе данных.\nПоиск производится по наименованию набора и является регистронезависимым.\nЗапрос со значением `тест` вернет все каталоги, полное наименование которых содержит подстроку `тест` независимо от регистра.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "$ref": "#/components/parameters/isDictQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ. Если не было найдено соответствующих запросу записей, то возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DatasetLiteListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DatasetLiteArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/datasets": {
          "get": {
              "tags": [
                  "datasets"
              ],
              "summary": "Получение базовых настроек набора данных",
              "description": "Получение базовых настроек набора данных.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/datasetIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Базовые настройки набора данных",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DatasetSettings"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "datasets"
              ],
              "summary": "Создание набора данных",
              "description": "Первичное сохранение набора данных с присвоением ему уникального идентификатора, связываением с каталогом публикации и созданием закрытых первой версии и релиза.",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/DatasetSettings"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ, о создании набора данных.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DatasetCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/DatasetBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/DatasetNotFoundResponse"
                  }
              }
          },
          "delete": {
              "tags": [
                  "datasets"
              ],
              "summary": "Отметка наборов данных удалёнными",
              "description": "Метод используется для отметки удалёнными одного или нескольких наборов данных",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/datasetIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DatasetDeletedResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/datasets/{datasetId}": {
          "put": {
              "tags": [
                  "datasets"
              ],
              "summary": "Изменение базовых настроек набора данных",
              "description": "Изменение базовых настроек набора данных",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/datasetIdPathParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/DatasetSettings"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DatasetEditedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/DatasetBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/DatasetNotFoundResponse"
                  }
              }
          }
      },
      "/datasets/{datasetId}/versions": {
          "get": {
              "tags": [
                  "datasets"
              ],
              "summary": "Получение версий набора данных",
              "description": "Получение версий набора данных.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/datasetIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Массив версий набора данных",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DatasetVersion"
                                  },
                                  "minItems": 1
                              },
                              "examples": {
                                  "value": {
                                      "$ref": "#/components/examples/DatasetVersionArrayResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Ошибки",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id набора данных": {
                                      "$ref": "#/components/examples/DatasetNotFoundResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "datasets"
              ],
              "summary": "Создание версии набора данных",
              "description": "Содание новой закрытой версии набора данных.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/datasetIdPathParam"
                  },
                  {
                      "name": "publicationCatalogId",
                      "in": "query",
                      "description": "Идентификатор каталога публикации, с которым будет связана новая версия, соответственно и набор данных в дальнейшем.\nЕсли передаётся идентификатор каталога, с которым уже связан набор данных, то оставлять текущую связь.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      },
                      "example": 197400
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешное создание версии.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "value": {
                                      "$ref": "#/components/examples/DatasetVersionCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибки бизнес-логики",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "В КП для не указан ОПОД как система-потребитель": {
                                      "$ref": "#/components/examples/OPODNotContainInSystemsConsumersPublicationCatalogResponse"
                                  },
                                  "КП уже связан с другим набором данных": {
                                      "$ref": "#/components/examples/PublicationCatalogAlredyConnectedAnotherDatasetResponse"
                                  },
                                  "НД уже имеет закрытую версию": {
                                      "$ref": "#/components/examples/DatasetVersionAlredyCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Ошибки бизнес-логики",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id набора данных": {
                                      "$ref": "#/components/examples/DatasetNotFoundResponse"
                                  },
                                  "Несуществующий id каталога публикации": {
                                      "$ref": "#/components/examples/PublicationCatalogForDatasetNotFoundResponse"
                                  },
                                  "Отсутствует релиз КП для создания релиза НД": {
                                      "$ref": "#/components/examples/PublicationCatalogReleaseForDatasetReleaseNotFoundResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/datasets/{datasetId}/versions/{versionNum}": {
          "put": {
              "tags": [
                  "datasets"
              ],
              "summary": "Открытие версии набора данных",
              "description": "Открытие версии набора данных пользователям ОПОД",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/datasetIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/datasetVersionNumPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DatasetVersionOpenedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибки бизнес-логики",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Версия не является закрытой": {
                                      "$ref": "#/components/examples/DatasetVersionIsNotCloseResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Ошибки бизнес-логики",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id набора данных": {
                                      "$ref": "#/components/examples/DatasetNotFoundResponse"
                                  },
                                  "В наборе данных не существует версии с указанным номером": {
                                      "$ref": "#/components/examples/DatasetVersionNotFoundResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/datasets/{datasetId}/versions/{versionNum}/releases": {
          "get": {
              "tags": [
                  "datasets"
              ],
              "summary": "Получение релизов версии набора данных",
              "description": "Получение релизов версии набора данных",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/datasetIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/datasetVersionNumPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых релизов (от `1` до `1000`).",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/DatasetRelease"
                                  },
                                  "minItems": 1
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "404": {
                      "description": "Ошибки бизнес-логики",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id набора данных": {
                                      "$ref": "#/components/examples/DatasetNotFoundResponse"
                                  },
                                  "В наборе данных не существует версии с указанным номером": {
                                      "$ref": "#/components/examples/DatasetVersionNotFoundResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/datasets/{datasetId}/versions/{versionNum}/releases/{releaseNum}": {
          "put": {
              "tags": [
                  "datasets"
              ],
              "summary": "Назначение релиза актуальным",
              "description": "Назначение релиза актуальным. Распространяется на случаи:\n  релизы выпускаются вручную, необходимо открыть релиз\n  назначение актуальным исторического релиза",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/datasetIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/datasetVersionNumPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/datasetReleaseNumPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DatasetReleaseSetActualResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Ошибки бизнес-логики",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id набора данных": {
                                      "$ref": "#/components/examples/DatasetNotFoundResponse"
                                  },
                                  "В наборе данных не существует версии с указанным номером": {
                                      "$ref": "#/components/examples/DatasetVersionNotFoundResponse"
                                  },
                                  "В наборе данных не существует релиза с указанным номером в указанной версии": {
                                      "$ref": "#/components/examples/DatasetReleaseNotFoundResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "datasets"
              ],
              "summary": "Удаление релиза",
              "description": "Удаление релиза",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/datasetIdPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/datasetVersionNumPathParam"
                  },
                  {
                      "$ref": "#/components/parameters/datasetReleaseNumPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/DatasetReleaseDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Ошибки бизнес-логики",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id набора данных": {
                                      "$ref": "#/components/examples/DatasetNotFoundResponse"
                                  },
                                  "В наборе данных не существует версии с указанным номером": {
                                      "$ref": "#/components/examples/DatasetVersionNotFoundResponse"
                                  },
                                  "В наборе данных не существует релиза с указанным номером в указанной версии": {
                                      "$ref": "#/components/examples/DatasetReleaseNotFoundResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/fillrest/dictionaries": {
          "get": {
              "tags": [
                  "fillrest"
              ],
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых справочников (число от `1` до `1000`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  }
              ],
              "summary": "Получение общей информации справочника",
              "description": "Метод возвращает список справочников, связанных с каталогами, к которым у системы-потребителя есть доступ.     ",
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "dictionaries.yaml#/components/schemas/Dictionary"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "dictionaries.yaml#/components/examples/DictionaryArrayResponse"
                                  }
                              }
                          }
                      }
                  },
                  "401": {
                      "$ref": "#/components/responses/UnauthorizedErrorResponse"
                  },
                  "404": {
                      "$ref": "dictionaries.yaml#/components/responses/DictionaryNotFoundResponse"
                  }
              }
          }
      },
      "/fillrest/dictionaryElements": {
          "get": {
              "tags": [
                  "fillrest"
              ],
              "summary": "Поиск по списку элементов справочника",
              "description": "Возвращает список элементов справочника. \n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск по списку и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id`, `name` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "dictionaries.yaml#/components/parameters/dictionaryIdQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых элементов справочника (число от `1` до `500`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 500
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "$ref": "dictionaries.yaml#/components/parameters/dictionaryElementStatusesFilterQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку элементов справочника. Поиск производится по идентификатору и наименованию.\n\nЗапрос со значением `123` вернет все элементы справочника, идентификатор или наименование которых содержит подстроку `123`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `name`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "dictionaries.yaml#/components/schemas/DictionaryElementListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "dictionaries.yaml#/components/examples/DictionaryElementListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "401": {
                      "$ref": "#/components/responses/UnauthorizedErrorResponse"
                  },
                  "403": {
                      "$ref": "#/components/responses/DictionaryForbiddenResponse"
                  },
                  "404": {
                      "$ref": "dictionaries.yaml#/components/responses/DictionaryNotFoundResponse"
                  }
              }
          }
      },
      "/fillrest/catalogs": {
          "get": {
              "tags": [
                  "fillrest"
              ],
              "summary": "Поиск по списку каталогов заполнения",
              "description": "Возвращает список неудалённых каталогов, к которым у системы-потребителя есть доступ.\nПо каждому каталогу возвращается общая информация.\n\nМетод позволяет выполнять сортировку по полям ответа. Подробнее см. параметры запроса.",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых каталогов (от `1` до `1000`).",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName",
                              "objectCategories",
                              "thematicCategory",
                              "oivs",
                              "periodUpdate",
                              "systemsConsumers",
                              "systemsSuppliers",
                              "responsiblePerson",
                              "countActiveObjects",
                              "countUnsignedObjects",
                              "countObjects",
                              "dateLastSign",
                              "dateNextUpdate",
                              "statusSignObjects",
                              "statusSignMetadata"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ. \nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив. \nЕсли у системы-потребителя отсутствует доступ к каким-либо каталогам, то также возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "catalogs.yaml#/components/schemas/FillingCatalogGeneralInfo"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "catalogs.yaml#/components/examples/FillingCatalogGeneralInfoResponse"
                                  }
                              }
                          }
                      }
                  },
                  "401": {
                      "$ref": "#/components/responses/UnauthorizedErrorResponse"
                  }
              }
          }
      },
      "/fillrest/catalogs/{catalogId}/attributes": {
          "get": {
              "tags": [
                  "fillrest"
              ],
              "summary": "Получение атрибутов каталога заполнения",
              "description": "Возвращает атрибутивный состава каталога заполнения для формирования запроса на сохранение, изменение данных каталога. ",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "allOf": [
                                          {
                                              "$ref": "#/components/schemas/CatalogAttribute"
                                          }
                                      ]
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogAttributesResponse"
                                  }
                              }
                          }
                      }
                  },
                  "401": {
                      "$ref": "#/components/responses/UnauthorizedErrorResponse"
                  },
                  "403": {
                      "$ref": "#/components/responses/CatalogForbiddenResponse"
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/FillingCatalogNotFoundResponse"
                  }
              }
          }
      },
      "/fillrest/catalogs/{catalogId}/count": {
          "get": {
              "tags": [
                  "fillrest"
              ],
              "summary": "Получение статистики по каталогу заполнения",
              "description": "Возвращает общее количество объектов, а также количество активных и количество неподписанных объектов каталога заполнения. ",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CatalogCount"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogCountResponse"
                                  }
                              }
                          }
                      }
                  },
                  "401": {
                      "$ref": "#/components/responses/UnauthorizedErrorResponse"
                  },
                  "403": {
                      "$ref": "#/components/responses/CatalogForbiddenResponse"
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/FillingCatalogNotFoundResponse"
                  }
              }
          }
      },
      "/fillrest/catalogObjects/search": {
          "post": {
              "tags": [
                  "fillrest"
              ],
              "summary": "Поиск по списку объектов корневого каталога",
              "description": "Возвращает информацию об объектах корневого каталога, удовлетворяющих условиям поиска.\n\nВ теле запроса передаются объекты фильтров и сортировки. Метод позволяет выполнять многоуровневую сортировку.\n\nПорядок сортировки определяется порядком следования объектов сортировки в теле запроса.\n\nПо умолчанию объекты сортируются в порядке возрастания глобального идентификатора.\n\nМетод позволяет выполнять фильтрацию по вложенным каталогам первого уровня. Для таких фильтров передается поле `childCatalogId`.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых объектов (число от `1` до `500`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 500
                      }
                  },
                  {
                      "$ref": "catalogObjects.yaml#/components/parameters/objectStatusesQueryParam"
                  },
                  {
                      "$ref": "catalogObjects.yaml#/components/parameters/globalIdsQueryParam"
                  },
                  {
                      "$ref": "catalogObjects.yaml#/components/parameters/signedVersionQueryParam"
                  },
                  {
                      "$ref": "geodata.yaml#/components/parameters/FetchGeodataQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами и сортировками по списку объектов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "catalogObjects.yaml#/components/schemas/RootCatalogObjectListFilter"
                                      }
                                  },
                                  "sortings": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "_common.yaml#/components/schemas/Sorting"
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "catalogObjects.yaml#/components/examples/CatalogObjectSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogObjects.yaml#/components/schemas/CatalogObjectListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "catalogObjects.yaml#/components/examples/CatalogObjectListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "401": {
                      "$ref": "#/components/responses/UnauthorizedErrorResponse"
                  },
                  "403": {
                      "$ref": "#/components/responses/CatalogForbiddenResponse"
                  },
                  "404": {
                      "$ref": "catalogObjects.yaml#/components/responses/CatalogObjectSearchNotFoundResponse"
                  }
              }
          }
      },
      "/fillrest/catalogObjects/child/search": {
          "post": {
              "tags": [
                  "fillrest"
              ],
              "summary": "Поиск по списку объектов вложенного каталога",
              "description": "Возвращает информацию об объектах вложенного каталога в привязке к родительскому объекту (передается в пути запроса).\n\nВ теле запроса передаются объекты фильтров и сортировки. Метод позволяет выполнять многоуровневую сортировку.\n\nПорядок сортировки определяется порядком следования объектов сортировки в теле запроса.\n\nПо умолчанию объекты сортируются в порядке возрастания глобального идентификатора.",
              "parameters": [
                  {
                      "$ref": "catalogObjects.yaml#/components/parameters/parentGlobalIdQueryParam"
                  },
                  {
                      "$ref": "catalogObjects.yaml#/components/parameters/rootGlobalIdQueryParam"
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/parentCatalogIdQueryParam"
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/rootCatalogIdQueryParam"
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых объектов (число от `1` до `500`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 500
                      }
                  },
                  {
                      "$ref": "catalogObjects.yaml#/components/parameters/signedVersionQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами и сортировками по списку объектов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "catalogObjects.yaml#/components/schemas/ChildCatalogObjectListFilter"
                                      }
                                  },
                                  "sortings": {
                                      "type": "array",
                                      "items": {
                                          "$ref": "_common.yaml#/components/schemas/Sorting"
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "catalogObjects.yaml#/components/examples/CatalogObjectSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogObjects.yaml#/components/schemas/ChildCatalogObjectListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "catalogObjects.yaml#/components/examples/ChildCatalogObjectListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "401": {
                      "$ref": "#/components/responses/UnauthorizedErrorResponse"
                  },
                  "403": {
                      "$ref": "#/components/responses/CatalogForbiddenResponse"
                  },
                  "404": {
                      "$ref": "catalogObjects.yaml#/components/responses/ChildCatalogObjectSearchNotFoundResponse"
                  }
              }
          }
      },
      "/fillrest/catalogObjects": {
          "post": {
              "tags": [
                  "fillrest"
              ],
              "summary": "Сохранение объекта",
              "description": "Метод используется для сохранения объекта, его изменений, а также для удаления в каталоге заполнения.\nДочерние объекты передаются отдельными объектами.\n\nМетод может принимать изменения в объекте. Если какие-то атрибуты не передаются, их значения не меняются.\n\nМетод предусматривает запись только в один и тот же корневой каталог.",
              "requestBody": {
                  "description": "Тело запроса для сохранения объекта в каталоге",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/CatalogObject"
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogObjectRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Ответ при успешной обработке запроса.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/OkCatalogObjectResponse"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OkCatalogObjectResponse"
                                  }
                              }
                          }
                      }
                  },
                  "207": {
                      "description": "Ответ при успешной обработке запроса, при наличии ошибок для некоторых объектов.\nОшибки могут как относиться к бизнес-логике, так и быть техническими.\nДля каждого объекта возвращается отдельный код ответа.\n\n### Возможные ошибки бизнес-логики (ошибки возвращаются отдельно для каждого сохраняемого объекта в массиве):\n  - Значение атрибутов объекта не удовлетворяет свойствам атрибутов или объект не прошёл проверку, настроенную в конструкторе процессов (ошибка ФЛК).\n    Текст ошибки выводится из настроенного в конструкторе уведомления;\n  - Корневой каталог не найден (если передан объект вложенного каталога, то он игнорируется);\n  - Корневой или вложенный объект не найден в соответствующем каталоге.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "anyOf": [
                                          {
                                              "$ref": "#/components/schemas/OkCatalogObjectResponse"
                                          },
                                          {
                                              "$ref": "#/components/schemas/IncorrectDataCatalogObjectResponse"
                                          }
                                      ]
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/MultiStatusCatalogObjectResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ответ, возвращаемый, если для всех объектов в запросе получена ошибка бизнес-логики при сохранении\nили данные не могут сохранены, так как каталог находится в процессе подписания.\n\n### Возможные ошибки бизнес-логики (ошибки возвращаются отдельно для каждого сохраняемого объекта в массиве):\n  - Значение атрибутов объекта не удовлетворяет свойствам атрибутов или объект не прошёл проверку, настроенную в конструкторе процессов (ошибка ФЛК). Текст ошибки выводится из настроенного в конструкторе уведомления;\n  - Корневой каталог не найден (если передан объект вложенного каталога, то он игнорируется);\n  - Корневой или вложенный объект не найден в соответствующем каталоге;\n  - Каталог находится в процессе подписания;\n  - Для объектов передан разный корневой каталог;\n  - Превышено допустимое количество активных сессий поставщика.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "anyOf": [
                                          {
                                              "$ref": "#/components/schemas/IncorrectDataCatalogObjectResponse"
                                          },
                                          {
                                              "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                          },
                                          {
                                              "$ref": "_common.yaml#/components/schemas/TooManyRequestsError"
                                          }
                                      ]
                                  }
                              },
                              "examples": {
                                  "Объекты не прошли проверку форматно-логического контроля или не найдены": {
                                      "$ref": "#/components/examples/IncorrectDataCatalogObjectResponse"
                                  },
                                  "Каталог находится в процессе подписания": {
                                      "$ref": "catalogObjects.yaml#/components/examples/CatalogObjectCatalogIsSigningResponse"
                                  },
                                  "Попытка записи в разные каталоги": {
                                      "$ref": "catalogObjects.yaml#/components/examples/WriteToDifferentCatalogsResponse"
                                  },
                                  "Превышено допустимое количество активных сессий поставщика": {
                                      "$ref": "#/components/examples/SessionLimitExceededError"
                                  }
                              }
                          }
                      }
                  },
                  "401": {
                      "$ref": "#/components/responses/UnauthorizedErrorResponse"
                  },
                  "403": {
                      "$ref": "#/components/responses/CatalogForbiddenResponse"
                  }
              }
          }
      },
      "/fillrest/catalogObjectsSign": {
          "post": {
              "tags": [
                  "fillrest"
              ],
              "summary": "Сохранение объекта с подписанием",
              "description": "Метод используется для сохранения объекта, его изменений, а также удаления в каталоге заполнения c одновременным подписанием.\nДочерние объекты передаются отдельными объектами.\nМетод может принимать только изменения в объекте. Если какие-то атрибуты не передаются, их значения не меняются.",
              "requestBody": {
                  "description": "Тело запроса для сохранения объекта в каталоге с подписанием",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/SignedCatalogObjectData"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/SignedCatalogObjectRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Ответ при успешной обработке запроса.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/OkCatalogObjectResponse"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OkCatalogObjectResponse"
                                  }
                              }
                          }
                      }
                  },
                  "207": {
                      "description": "Ответ при успешной обработке запроса, при наличии ошибок для некоторых объектов.\nОшибки могут как относиться к бизнес-логике, так и быть техническими.\nДля каждого объекта возвращается отдельный код ответа.\n\n### Возможные ошибки бизнес-логики (ошибки возвращаются отдельно для каждого сохраняемого объекта в массиве):\n  - Значение атрибутов объекта не удовлетворяет свойствам атрибутов или объект не прошёл проверку, настроенную в конструкторе процессов (ошибка ФЛК).\n    Текст ошибки выводится из настроенного в конструкторе уведомления;\n  - Корневой каталог не найден (если передан объект вложенного каталога, то он игнорируется);\n  - Корневой или вложенный объект не найден в соответствующем каталоге.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "anyOf": [
                                          {
                                              "$ref": "#/components/schemas/OkCatalogObjectResponse"
                                          },
                                          {
                                              "$ref": "#/components/schemas/IncorrectDataCatalogObjectResponse"
                                          }
                                      ]
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/MultiStatusCatalogObjectResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ответ, возвращаемый, если для всех объектов в запросе получена ошибка бизнес-логики при сохранении\nили данные не могут сохранены, так как каталог находится в процессе подписания.\n\n### Возможные ошибки бизнес-логики (ошибки возвращаются отдельно для каждого сохраняемого объекта в массиве):\n  - Значение атрибутов объекта не удовлетворяет свойствам атрибутов или объект не прошёл проверку, настроенную в конструкторе процессов (ошибка ФЛК). Текст ошибки выводится из настроенного в конструкторе уведомления;\n  - Корневой каталог не найден (если передан объект вложенного каталога, то он игнорируется);\n  - Корневой или вложенный объект не найден в соответствующем каталоге;\n  - В запросе должны быть объекты из одного корневого каталога;\n  - Каталог находится в процессе подписания;\n  - Невозможно распарсить сертификат/подпись;\n  - Переданные изменения не соответствуют подписи;\n  - Превышено допустимое количество активных сессий поставщика.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "anyOf": [
                                          {
                                              "$ref": "#/components/schemas/IncorrectDataCatalogObjectResponse"
                                          },
                                          {
                                              "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                          },
                                          {
                                              "$ref": "_common.yaml#/components/schemas/TooManyRequestsError"
                                          }
                                      ]
                                  }
                              },
                              "examples": {
                                  "Объекты не прошли проверку форматно-логического контроля или не найдены": {
                                      "$ref": "#/components/examples/IncorrectDataCatalogObjectResponse"
                                  },
                                  "В запросе должны быть объекты из одного корневого каталога": {
                                      "$ref": "#/components/examples/NoOneCatalogObjectResponse"
                                  },
                                  "Каталог находится в процессе подписания": {
                                      "$ref": "catalogObjects.yaml#/components/examples/CatalogObjectCatalogIsSigningResponse"
                                  },
                                  "Невозможно распарсить сертификат/подпись": {
                                      "$ref": "#/components/examples/CatalogObjectSignErrorResponse"
                                  },
                                  "Переданные изменения не соответствуют подписи": {
                                      "$ref": "#/components/examples/CatalogArraySignErrorResponse"
                                  },
                                  "Превышено допустимое количество активных сессий поставщика": {
                                      "$ref": "#/components/examples/SessionLimitExceededError"
                                  }
                              }
                          }
                      }
                  },
                  "401": {
                      "$ref": "#/components/responses/UnauthorizedErrorResponse"
                  },
                  "403": {
                      "$ref": "#/components/responses/CatalogForbiddenResponse"
                  }
              }
          }
      },
      "/fillrest/async/catalogObjects": {
          "post": {
              "tags": [
                  "fillrest"
              ],
              "summary": "Асинхронное сохранение объекта/части объекта",
              "description": "Метод используется для сохранения массива объектов, изменения, а также для удаления в каталоге заполнения в асинхронном режиме.\nДля получения статуса обработки запроса используется метод /fillrest/async/status.\n\nДочерние объекты передаются отдельными объектами.\n\nМетод может принимать только изменения в объекте. Если какие-то атрибуты не передаются, их значения не меняются.",
              "requestBody": {
                  "description": "Тело запроса для сохранения объекта в каталоге",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/CatalogObject"
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogObjectRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Ответ при успешной обработке запроса.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/QueueAddedMessage"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/QueueAddedMessageResponse"
                                  }
                              }
                          }
                      }
                  },
                  "401": {
                      "$ref": "#/components/responses/UnauthorizedErrorResponse"
                  },
                  "403": {
                      "$ref": "#/components/responses/CatalogForbiddenResponse"
                  }
              }
          }
      },
      "/fillrest/async/catalogObjectsSign": {
          "post": {
              "tags": [
                  "fillrest"
              ],
              "summary": "Асинхронное сохранение объекта с подписанием",
              "description": "Метод используется для сохранения объекта, его изменений, а также удаления в каталоге заполнения в асинхронном режиме c одновременным подписанием.\n\nДочерние объекты передаются отдельными объектами.\nМетод может принимать только изменения в объекте. Если какие-то атрибуты не передаются, их значения не меняются.",
              "requestBody": {
                  "description": "Тело запроса для сохранения объекта в каталоге с подписанием",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/SignedCatalogObjectData"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/SignedCatalogObjectRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Ответ при успешной обработке запроса.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/QueueAddedMessage"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/QueueAddedMessageResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ответ, возвращаемый, если попись неверна.           \n  - Невозможно распарсить сертификат/подпись;\n  - Переданные изменения не соответствуют подписи.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Невозможно распарсить сертификат/подпись": {
                                      "$ref": "#/components/examples/CatalogObjectSignErrorResponse"
                                  },
                                  "Переданные изменения не соответствуют подписи": {
                                      "$ref": "#/components/examples/CatalogArraySignErrorResponse"
                                  }
                              }
                          }
                      }
                  },
                  "401": {
                      "$ref": "#/components/responses/UnauthorizedErrorResponse"
                  },
                  "403": {
                      "$ref": "#/components/responses/CatalogForbiddenResponse"
                  }
              }
          }
      },
      "/fillrest/async/{queueId}/status": {
          "get": {
              "tags": [
                  "fillrest"
              ],
              "summary": "Статус асинхронного запроса на сохранение объекта",
              "description": "Возвращает статус ранеее отправленного запроса.\n\nПосле обработки асинхронного запроса в очереди в поле `response` возвращается JSON ответа, который может содержать:\n  - Общий ответ для всего запроса (например, в случае ошибки);\n  - Ответ с объработкой сохранения по каждому объекту.\n    В таком случае в `response` возвращается массив с объектами ответов такой же, как в синхронных методах сохранения объектов.",
              "parameters": [
                  {
                      "name": "queueId",
                      "in": "path",
                      "description": "Идентификатор асинхронного запроса",
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      },
                      "required": true
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Ответ при успешной обработке запроса.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/AsyncRequestStatus"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AsyncRequestStatusResponse"
                                  }
                              }
                          }
                      }
                  },
                  "401": {
                      "$ref": "#/components/responses/UnauthorizedErrorResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/RequestNotFoundResponse"
                  }
              }
          }
      },
      "/fillrest/catalogSign/{catalogId}": {
          "post": {
              "tags": [
                  "fillrest"
              ],
              "summary": "Подписание метаданных каталога",
              "description": "Подписывает метаданные каталога.\n\nВ теле запроса передается информация с подписью, с использованием ЭЦП необходимо подписать идентифкиатор каталога.\n\nМетод также может быть использован для подтверждения отсутствия изменений в каталоге.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с данными цифровой подписи",
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "signatures.yaml#/components/schemas/DigitalSignatureInfo"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "signatures.yaml#/components/examples/DigitalSignatureInfoRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Каталог успешно подписан": {
                                      "$ref": "#/components/examples/CatalogSignedResponse"
                                  },
                                  "Изменения не внесены, каталог и его объекты были подписаны ранее": {
                                      "$ref": "#/components/examples/NoChangesSignResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ответ, возвращаемый, если в запросе получена ошибка бизнес-логики при сохранении\nили данные не могут сохранены, так как каталог находится в процессе подписания.\n\n### Возможные ошибки бизнес-логики:\n  - Подпись невалидна;\n  - Объекты каталога не подписаны;                        \n  - Каталог находится в процессе подписания или подготовки к подписанию ЭП.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                  }
                              },
                              "examples": {
                                  "Подпись невалидна": {
                                      "$ref": "#/components/examples/InvalidSignatureResponse"
                                  },
                                  "Объекты каталога не подписаны": {
                                      "$ref": "catalogObjects.yaml#/components/examples/CatalogObjectNotSignResponse"
                                  },
                                  "Каталог находится в процессе подписания": {
                                      "$ref": "catalogObjects.yaml#/components/examples/CatalogObjectCatalogIsSigningResponse"
                                  }
                              }
                          }
                      }
                  },
                  "401": {
                      "$ref": "#/components/responses/UnauthorizedErrorResponse"
                  },
                  "403": {
                      "$ref": "#/components/responses/CatalogForbiddenResponse"
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/FillingCatalogNotFoundResponse"
                  }
              }
          }
      },
      "/publrest/catalog/list": {
          "post": {
              "tags": [
                  "publrest"
              ],
              "summary": "Запрос спецификации каталогов публикации",
              "description": "Возвращает спецификацию каталога публикации, доступные системе-потребителю.\nВ ответе выводится информация о каталоге, атрибутах и системных атрибутах каталога публикации.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/ehdSystemHeaderParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CatalogListRequest"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogListRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив в параметре `response`.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CatalogListResponse"
                              },
                              "examples": {
                                  "Успешный ответ": {
                                      "$ref": "#/components/examples/CatalogListResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/publrest/catalog/get": {
          "post": {
              "tags": [
                  "publrest"
              ],
              "summary": "Запрос содержимого каталога публикации",
              "description": "Возвращает содержимое каталога публикации по указанным параметрам.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/ehdSystemHeaderParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CatalogGetRequest"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogGetRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив в параметре `response`.\nЕсли в теле запроса есть параметр paging=true, то возвращается объект CatalogGetResponsePaging",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "#/components/schemas/CatalogGetResponse"
                                      },
                                      {
                                          "$ref": "#/components/schemas/CatalogGetResponsePaging"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Пример, если нет параметра `paging` в запросе": {
                                      "$ref": "#/components/examples/CatalogGetResponse"
                                  },
                                  "Пример, если в запросе есть параметр `paging=true`": {
                                      "$ref": "#/components/examples/CatalogGetResponsePaging"
                                  },
                                  "Пример, если в запросе есть параметр `fetchGeodata =true`": {
                                      "$ref": "#/components/examples/CatalogGetResponseFetchGeodata"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/publrest/catalog/get/features": {
          "post": {
              "tags": [
                  "publrest"
              ],
              "summary": "Запрос содержимого каталога публикации в формате GeoJSON",
              "description": "Возвращает содержимое каталога публикации по указанным параметрам в формате GeoJSON.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/ehdSystemHeaderParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CatalogGetRequest"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogGetFeaturesRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив в параметре `features`.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CatalogGetFeaturesResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogGetFeaturesResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/publrest/catalog/changes": {
          "post": {
              "tags": [
                  "publrest"
              ],
              "summary": "Получение измененных объектов в каталоге",
              "description": "Возвращает последние версии объектов, удовлетворяющих запросу.\nФормат выводных данных аналогичен методу /publrest/catalog/get\nЕсли в теле запроса есть параметр paging=true, то возвращается объект CatalogChangesResponsePaging.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/ehdSystemHeaderParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CatalogChangesRequest"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogChangesRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив в параметре `response`.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "#/components/schemas/CatalogChangesResponse"
                                      },
                                      {
                                          "$ref": "#/components/schemas/CatalogChangesResponsePaging"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Пример, если нет параметра `paging` в запросе": {
                                      "$ref": "#/components/examples/CatalogGetResponse"
                                  },
                                  "Пример, если в запросе есть параметр `paging=true`": {
                                      "$ref": "#/components/examples/CatalogGetResponsePaging"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/publrest/object/changes": {
          "post": {
              "tags": [
                  "publrest"
              ],
              "summary": "Получение изменений объекта",
              "description": "Возвращает все версии объекта, удовлетворяющего запросу.\nФормат выводных данных аналогичен методу /publrest/catalog/get.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/ehdSystemHeaderParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CatalogObjectChangesRequest"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogObjectChangesRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив в параметре `response`.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CatalogObjectChangesResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogObjectChangesResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/publrest/catalog/count": {
          "post": {
              "tags": [
                  "publrest"
              ],
              "summary": "Запрос количества элементов в каталоге",
              "description": "Возвращает количество элементов в каталоге, удовлетворяющих запросу.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/ehdSystemHeaderParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CatalogCountRequest"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogCountRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается значение `0`.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CatalogCountResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogCountResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/publrest/dictionary/get": {
          "post": {
              "tags": [
                  "publrest"
              ],
              "summary": "Запрос содержимого справочников",
              "description": "Возвращает список элементов справочника.\nМетод позволяет выполнять пагинацию и накладывать ограничение на количество возвращаемых элементов справочника.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/ehdSystemHeaderParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/DictionaryGetRequest"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/DictionaryGetRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив в параметре `response`.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DictionaryGetResponse"
                              },
                              "examples": {
                                  "Прмиер": {
                                      "$ref": "#/components/examples/DictionaryGetResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/publrest/MEDIA/getFile": {
          "get": {
              "tags": [
                  "publrest"
              ],
              "summary": "Скачивание файла",
              "description": "Метод используется для скачивания файла по идентификатору.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/fileUuidQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/octet-stream": {
                              "schema": {
                                  "type": "string",
                                  "format": "binary",
                                  "example": "<file-content>"
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/FileNotFoundResponse"
                  }
              }
          }
      },
      "/publrest/MEDIA/showFile": {
          "get": {
              "tags": [
                  "publrest"
              ],
              "summary": "Отображение изображения, вложенного в объект",
              "description": "Метод используется для отображения изображения в браузере.\nДля управления размером используется `thumbnail` (указывается если необходимо отобразить изображение в уменьшенном виде).",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/fileUuidQueryParam"
                  },
                  {
                      "name": "size",
                      "in": "query",
                      "description": "Указать `thumbnail` если изображение в уменьшенном виде",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "image/jpg": {
                              "schema": {
                                  "type": "string",
                                  "format": "binary",
                                  "example": "<file-content>"
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/FileNotFoundResponse"
                  }
              }
          }
      },
      "/publrest/catalog/export": {
          "post": {
              "tags": [
                  "publrest"
              ],
              "summary": "Запрос на формирование файла экспорта с содержимым каталога",
              "description": "Метод запускает формирование файла экспорта содержимого каталога в форматах: XLSX, JSON, XML, CSV.\nТакже метод позволяет узнать статус формирования файла экспорта.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/ehdSystemHeaderParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CatalogExportRequest"
                          },
                          "examples": {
                              "Пример запроса на экспорт": {
                                  "$ref": "#/components/examples/CatalogExportRequest"
                              },
                              "Пример запроса статуса экспорта": {
                                  "$ref": "#/components/examples/CatalogExportStatusRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив в параметре `response`.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CatalogExportResponse"
                              },
                              "examples": {
                                  "Пример ответа на запрос экспорта": {
                                      "$ref": "#/components/examples/CatalogExportResponse"
                                  },
                                  "Пример ответа на запрос статуса": {
                                      "$ref": "#/components/examples/CatalogExportStatusResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/publrest/catalog/export/get": {
          "get": {
              "tags": [
                  "publrest"
              ],
              "summary": "Скачивание файла экспорта",
              "description": "Метод используется для скачивания файла экспорта каталога публикации по идентификатору.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/FileIdQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/octet-stream": {
                              "schema": {
                                  "type": "string",
                                  "format": "binary",
                                  "example": "<file-content>"
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/ExportFileNotFoundResponse"
                  }
              }
          }
      },
      "/soap/getCatalogList": {
          "$ref": "./domains/soap.yaml#/paths/~1getCatalogList"
      },
      "/soap/getCatalogSpec": {
          "$ref": "./domains/soap.yaml#/paths/~1getCatalogSpec"
      },
      "/soap/getCatalogItems": {
          "$ref": "./domains/soap.yaml#/paths/~1getCatalogItems"
      },
      "/soap/getCatalogStats": {
          "$ref": "./domains/soap.yaml#/paths/~1getCatalogStats"
      },
      "/soap/getAllDict": {
          "$ref": "./domains/soap.yaml#/paths/~1getAllDict"
      },
      "/soap/getDictItem": {
          "$ref": "./domains/soap.yaml#/paths/~1getDictItem"
      },
      "/soap/setSignatureCatalog": {
          "$ref": "./domains/soap.yaml#/paths/~1setSignatureCatalog"
      },
      "/soap/setDataIn": {
          "$ref": "./domains/soap.yaml#/paths/~1setDataIn"
      },
      "/backgroundChecks": {
          "post": {
              "tags": [
                  "backgroundChecks"
              ],
              "summary": "Запуск фоновой проверки",
              "description": "Метод позволяет запустить фоновую проверку и автопроцессы на выбранном каталоге. ",
              "requestBody": {
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/BackgroundCheckInfo"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/BackgroundCheckInfoRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Фоновая проверка добавлена в очередь": {
                                      "$ref": "#/components/examples/BackgroundCheckCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибка построения запроса или целостности переданных данных.\n\n### Возможные ошибки бизнес-логики:\n  - На выбранном каталоге уже запущена фоновая проверка.\n  - Некорректно выставлены флаги `Полная фоновая проверка`, `Проверка свойств атрибутов`, `Проверка регулярных выражений`, `Проверка поискового индекса`.\n  - Некорректно заполнены поля `Запуск главного процесса` и `Тех. наименование пакета конструктора`.\n  - Невалидное условие ограничения выборки.\n  - Указанный e-mail не соответствует регулярному выражению.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      },
                                      {
                                          "$ref": "#/components/schemas/ConditionValidationError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "На каталоге уже запущена фоновая проверка": {
                                      "$ref": "#/components/examples/CatalogInBackCheckError"
                                  },
                                  "Некорректно выставлены флаги `Полная фоновая проверка`, `Проверка свойств атрибутов`, `Проверка регулярных выражений`, `Проверка поискового индекса`": {
                                      "$ref": "#/components/examples/BackgroundCheckFlagsError"
                                  },
                                  "Некорректно заполнены поля `Запуск главного процесса` и `Тех. наименование пакета конструктора`": {
                                      "$ref": "#/components/examples/BackgroundCheckConstructorError"
                                  },
                                  "Невалидное условие ограничения выборки": {
                                      "$ref": "#/components/examples/ConditionValidationError"
                                  },
                                  "Указанный e-mail не соответствует регулярному выражению": {
                                      "$ref": "#/components/examples/EmailFormatError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Указанный id каталога не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id каталога": {
                                      "$ref": "catalogs.yaml#/components/examples/CatalogNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "get": {
              "tags": [
                  "backgroundChecks"
              ],
              "summary": "Получение параметров выбранных фоновых проверок",
              "description": "Метод возвращает информацию о параметрах фоновой проверки, вызывается из истории фоновых проверок.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/backgroundCheckIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/BackgroundCheckInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/BackgroundCheckInfoArrayResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/backgroundChecks/validate": {
          "post": {
              "tags": [
                  "backgroundChecks"
              ],
              "summary": "Валидация условия ограничения выборки",
              "description": "Метод позволяет выполнить валидацию условия ограничения выборки для фоновой проверки.",
              "requestBody": {
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "condition": {
                                      "description": "Ограничение выборки, описанное пользователем в формате TOML. Передаётся в виде строки с экранированием символов.",
                                      "type": "string"
                                  },
                                  "catalogId": {
                                      "description": "Идентификатор каталога для получения атрибутов и проверки их использования в условии",
                                      "type": "integer"
                                  }
                              },
                              "required": [
                                  "condition",
                                  "catalogId"
                              ]
                          },
                          "examples": {
                              "Пример": {
                                  "description": "Пример тела запроса с условием",
                                  "value": {
                                      "condition": "contains(attr.City, 'Москва')",
                                      "catalogId": 6404
                                  }
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SuccessValidationResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибка построения запроса или целостности переданных данных.\n\n### Возможные ошибки бизнес-логики:\n  - Невалидное условие ограничения выборки.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ConditionValidationError"
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/backgroundChecks/{backgroundCheckId}/cancel": {
          "get": {
              "tags": [
                  "backgroundChecks"
              ],
              "summary": "Отмена фоновой проверки объектов каталога",
              "description": "Метод позволяет отменить выбранную фоновую проверку. ",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/backgroundCheckIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/BackgroundCheckCanceledByUserResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Фоновая проверка уже завершена.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Фоновая проверка уже завершена": {
                                      "$ref": "#/components/examples/BackgroundCheckFinishedError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id фоновой проверки не существует. ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id фоновой проверки": {
                                      "$ref": "#/components/examples/BackgroundCheckNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/backgroundChecks/reset": {
          "get": {
              "tags": [
                  "backgroundChecks"
              ],
              "summary": "Сброс ошибок фоновых проверок с объектов каталога",
              "description": "Метод позволяет сбросить с объектов выбранного каталога все ошибки фоновых проверок.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/BackgroundCheckErrorsCleanedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id каталога не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id каталога": {
                                      "$ref": "catalogs.yaml#/components/examples/CatalogNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/backgroundChecks/history": {
          "post": {
              "tags": [
                  "backgroundChecks"
              ],
              "summary": "Получение истории фоновых проверок каталога",
              "description": "Метод позволяет получить историю фоновых проверок выбранного каталога.\n\nМетод позволяет выполнять фильтрацию и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `userName`, `dateStart`, `dateEnd`, используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых элементов списка истории фоновых проверок (число от `1` до `1000`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 1000
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "userName",
                                                              "dateStart",
                                                              "dateEnd"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/BackgroundCheckHistoryRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/CatalogBackgroundCheckHistoryItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogBackgroundCheckHistoryItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/CatalogNotFoundResponse"
                  }
              }
          }
      },
      "/accumulatedCatalogs/search": {
          "get": {
              "tags": [
                  "accumulatedCatalogs"
              ],
              "summary": "Поиск по списку сборных каталогов",
              "description": "Возвращает список сборных каталогов в соответствии с параматерами запроса.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию.",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых каталогов (от `1` до `200`).",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке каталогов.\nПоиск производится по идентификатору и наименованию каталога.\n\nЗапрос со значением `12` вернет все каталоги, идентификатор или наименование которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name",
                              "lastRun",
                              "nextRun"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByDescQueryParam"
                  },
                  {
                      "name": "periodicity",
                      "in": "query",
                      "required": false,
                      "description": "Фильтр по периодичности обновления сборного каталога. Передается техническое наименование (тэг) периодичности.\nЕсли параметр не указан, возвращаются каталоги с любым значением периодичности обновления.",
                      "schema": {
                          "$ref": "#/components/schemas/AccumulatedCatalogUpdatePeriodicityTagIdEnum"
                      }
                  },
                  {
                      "name": "status",
                      "in": "query",
                      "required": false,
                      "description": "Фильтр по статусу сборного каталога. Передается техническое наименование (тэг) статуса.\nЕсли параметр не указан, возвращаются каталоги, находящиеся в любом статусе.",
                      "schema": {
                          "$ref": "#/components/schemas/AccumulatedCatalogStatusTagIdEnum"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ. \nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив. \nЕсли переданы несуществующие идентификаторы периодичности, статуса, то также возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/AccumulatedCatalogListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AccumulatedCatalogListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/accumulatedCatalogs": {
          "post": {
              "tags": [
                  "accumulatedCatalogs"
              ],
              "summary": "Создание сборного каталога",
              "description": "Метод используется при создании сборного каталога.\nПри создании каталога необходимо обязательно передать и выполнить валидацию TOML-кода настроек каталога.\n\nВ случае наличия ошибок возвращаются все ошибки общим списком.",
              "requestBody": {
                  "$ref": "#/components/requestBodies/AccumulatedCatalogSettings"
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AccumulatedCatalogCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибка валидации или сохранения сборного каталога",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "description": "Массив ошибок, обнаруженных при валидации сборного каталога",
                                  "type": "array",
                                  "items": {
                                      "type": "string"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/accumulatedCatalogs/{catalogId}": {
          "put": {
              "tags": [
                  "accumulatedCatalogs"
              ],
              "summary": "Изменение настроек сборного каталога",
              "description": "Метод используется при редактировании сборного каталога.\nПри редактировании каталога необходимо обязательно передать и выполнить валидацию TOML-кода настроек каталога.\n\nВ случае наличия ошибок возвращаются все ошибки общим списком.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/AccumulatedCatalogSettings"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AccumulatedCatalogEditedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибка валидации или сохранения сборного каталога",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "description": "Массив ошибок, обнаруженных при валидации сборного каталога",
                                  "type": "array",
                                  "items": {
                                      "type": "string"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/AccumulatedCatalogNotFound"
                  }
              }
          }
      },
      "/accumulatedCatalogs/{catalogId}/settings": {
          "get": {
              "tags": [
                  "accumulatedCatalogs"
              ],
              "summary": "Получение сборных каталогов по идентификаторам",
              "description": "Возвращает информацию о настройках сборного каталога по идентификатору.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/AccumulatedCatalogSettings"
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/AccumulatedCatalogNotFound"
                  }
              }
          }
      },
      "/accumulatedCatalogs/validate": {
          "post": {
              "tags": [
                  "accumulatedCatalogs"
              ],
              "summary": "Валидация настроек сборного каталога",
              "description": "Возвращает список ошибок при валидации сборного каталога.\nМетод может быть вызван при сохранении каталога, либо отдельно.\n\nМетод принимает на вход настройки сборного каталога в формате TOML.\n\nЕсли ошибок нет, возвращается пустой массив.",
              "requestBody": {
                  "$ref": "#/components/requestBodies/AccumulatedCatalogSettings"
              },
              "responses": {
                  "200": {
                      "description": "Ошибки валидации сборного каталога",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "description": "Массив ошибок, обнаруженных при валидации сборного каталога",
                                  "type": "array",
                                  "items": {
                                      "type": "string"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/accumulatedCatalogs/{catalogId}/history": {
          "get": {
              "tags": [
                  "accumulatedCatalogs"
              ],
              "summary": "Получение истории обновлений сборного каталога",
              "description": "Метод позволяет получить историю о процессах обновления сборного каталога",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых элементов списка истории (число от `1` до `100`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ. Если истории по переданному каталогу нет, возвращается пустой массив",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/AccumulatedCatalogHistoryItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AccumulatedCatalogHistoryResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/AccumulatedCatalogNotFound"
                  }
              }
          }
      },
      "/accumulatedCatalogs/{catalogId}/sourceExports": {
          "get": {
              "tags": [
                  "accumulatedCatalogs"
              ],
              "summary": "Получение истории выгрузок каталогов заполенения для сборного каталога",
              "description": "Метод позволяет получить историю и статус выгрузок каталогов заполнения для сборного каталога",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых элементов списка истории (число от `1` до `100`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ. Если истории по переданному каталогу нет, возвращается пустой массив",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/AccumulatedCatalogSourceExportHistoryItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AccumulatedCatalogSourceExportHistoryResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/AccumulatedCatalogNotFound"
                  }
              }
          }
      },
      "/accumulatedCatalogs/{catalogId}/status": {
          "put": {
              "tags": [
                  "accumulatedCatalogs"
              ],
              "summary": "Изменение статуса сборного каталога",
              "description": "Выполняет изменение статуса сборного каталога.\n\nПри изменении статуса на Активный автоматически запускается формирование или обновление сборного каталога.\n\nПри изменении статуса на Неактивный выгрузки каталогов источников перестают формироваться, уходя в статус отмены пользователем.\nПроцесс обновления сборного каталога также автоматически завершается.\n\nПри повторном вызове метода со статусом Активный перезапуск процесса формирования сборного каталога не запускается.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  }
              ],
              "requestBody": {
                  "description": "Тело запроса для изменения статуса сборного каталога",
                  "content": {
                      "application/json": {
                          "schema": {
                              "description": "Объект, передаваемый для изменения статуса сборного каталога",
                              "type": "object",
                              "properties": {
                                  "status": {
                                      "description": "Новый статус сборного каталога",
                                      "allOf": [
                                          {
                                              "$ref": "#/components/schemas/AccumulatedCatalogStatusTagIdEnum"
                                          }
                                      ]
                                  },
                                  "periodicity": {
                                      "description": "Новая периодичность обновления сборного каталога",
                                      "allOf": [
                                          {
                                              "$ref": "#/components/schemas/AccumulatedCatalogUpdatePeriodicityTagIdEnum"
                                          }
                                      ]
                                  },
                                  "nextRunDate": {
                                      "description": "Плановая дата следующего обновления сборного каталога\n\nОбязательное поле, если новый статус - активный",
                                      "allOf": [
                                          {
                                              "$ref": "_common.yaml#/components/schemas/DateTimeFormat"
                                          }
                                      ]
                                  },
                                  "run": {
                                      "description": "Необходим ли запуск построения сборного каталога после изменения статуса\n\nНе может быть true, если новый статус - неактивный",
                                      "type": "boolean"
                                  }
                              },
                              "required": [
                                  "status",
                                  "periodicity",
                                  "run"
                              ]
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Статус изменен на активный": {
                                      "$ref": "#/components/examples/AccumulatedCatalogStatusChangedToActiveResponse"
                                  },
                                  "Статус изменен на Неактивный": {
                                      "$ref": "#/components/examples/AccumulatedCatalogStatusChangedToInactiveResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибка построения запроса\n\nВозможные ошибки бизнес-логики:\n  - Не передана следующего обновления\n  - Попытка запуска построения неактивного сборного каталога",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Не передана следующего обновления": {
                                      "$ref": "#/components/examples/MissingNextUpdateDate"
                                  },
                                  "Попытка запуска построения неактивного сборного каталога": {
                                      "$ref": "#/components/examples/InactiveCatalogRunNotAllowed"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/AccumulatedCatalogNotFound"
                  }
              }
          }
      },
      "/accumulatedCatalogs/{catalogId}/run": {
          "get": {
              "tags": [
                  "accumulatedCatalogs"
              ],
              "summary": "Разовое построение сборного каталога для отладки",
              "description": "Выполняет разовый запуск построения сборного каталога в целях выполнения отладки.\n\nВызов возможен только для каталога, находящегося в статусе Неактивный.\n\nВ случае, если для каталога не сформированы вызгрузки КЗ-источников,\nсначала запускается экспорт источников, информация о которых возвращается в `GET /accumulatedCatalogs/{catalogId}/sourceExports`",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "value": {
                                          "code": 200,
                                          "messageType": "Ok",
                                          "message": "Построение сборного каталога запущено"
                                      }
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибка построения запроса\n\nВозможные ошибки бизнес-логики:\n  - Попытка запуска разового построения для активного каталога ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "value": {
                                          "code": 200,
                                          "messageType": "Ok",
                                          "message": "Разовое построение невозможно для активного сборного каталога"
                                      }
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/AccumulatedCatalogNotFound"
                  }
              }
          }
      },
      "/accumulatedCatalogs/jobs": {
          "post": {
              "tags": [
                  "accumulatedCatalogs"
              ],
              "summary": "Создание процесса обновления сборного каталога",
              "description": "Выполняет регистрацию процесса обновления сборного каталога.",
              "requestBody": {
                  "description": "Тело запроса для регистрации процесса обновления сборного каталога.",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "catalogId": {
                                      "description": "Идентификатор сборного каталога",
                                      "type": "integer"
                                  },
                                  "jobId": {
                                      "description": "Идентификатор процесса обновления",
                                      "type": "string"
                                  }
                              },
                              "required": [
                                  "catalogId",
                                  "jobId"
                              ]
                          },
                          "examples": {
                              "Пример": {
                                  "value": {
                                      "catalogId": 34,
                                      "jobId": "Ad302A2c-8f0c-406f-afA1-6cCA5af250eA"
                                  }
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AccumulatedCatalogCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/AccumulatedCatalogNotFound"
                  }
              }
          }
      },
      "/accumulatedCatalogs/jobs/{jobId}": {
          "put": {
              "tags": [
                  "accumulatedCatalogs"
              ],
              "summary": "Регистрация выходных файлов по процессу обновления сборного каталога",
              "description": "Позволяет зарегистрировать выходные файлы, сформированные по итогу процесса обнволения сборного каталога\n\nВ случае успешного ответа процесс обнволения считается успешно завершенным",
              "parameters": [
                  {
                      "name": "jobId",
                      "description": "Идентифкатор процесса обновления",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "required": true,
                  "description": "Тело запроса с информацией о выходных файлах сборного каталога",
                  "content": {
                      "application/json": {
                          "schema": {
                              "properties": {
                                  "channels": {
                                      "description": "Массив выходных файлов сборного каталога",
                                      "type": "array",
                                      "items": {
                                          "$ref": "#/components/schemas/ChannelOutput"
                                      },
                                      "minItems": 1
                                  }
                              },
                              "required": [
                                  "channels"
                              ]
                          },
                          "examples": {
                              "Пример": {
                                  "value": {
                                      "channels": [
                                          {
                                              "channelId": "outputs.fountains_uvao:snapshot",
                                              "filename": "0f583f97-9bb7-4b44-b37e-bfae615e4780-fountains_uvao.zip",
                                              "uuid": "0f583f97-9bb7-4b44-b37e-bfae615e4780",
                                              "sha256sum": "135a7a68115c170106505dcf93e4cbaa4fd158d339e97d0801fe37f134062865",
                                              "totalBytes": 41234234,
                                              "objCount": 2421
                                          },
                                          {
                                              "channelId": "outputs.fountains_szao:snapshot",
                                              "filename": "0f583f97-9bb7-4b44-b37e-bfae615e4780-fountains_szao.zip",
                                              "uuid": "0f583f97-9bb7-4b44-b37e-bfae615e4780",
                                              "sha256sum": "66e42d8c396115e5db9697f8533bec8f3fdc09b85966aaff8e550abaf9ba7c4d",
                                              "totalBytes": 49852734,
                                              "objCount": 4523
                                          }
                                      ]
                                  }
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/AccumulatedCatalogEditedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибка валидации или сохранения сборного каталога",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "description": "Массив ошибок, обнаруженных при валидации сборного каталога",
                                  "type": "array",
                                  "items": {
                                      "type": "string"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/AccumulatedCatalogNotFound"
                  }
              }
          }
      },
      "/auth/authUrl": {
          "get": {
              "tags": [
                  "auth"
              ],
              "summary": "Получение url страницы авторизации (в KeyCloack)",
              "description": "Возвращает адрес страницы авторизации, в котором содержатся client_id, redirect_url и другие параметры пути аутентификации",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/RedirectUrlQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ.",
                      "content": {
                          "text/plain": {
                              "schema": {
                                  "$ref": "#/components/schemas/AuthUrl"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/auth/token": {
          "get": {
              "tags": [
                  "auth"
              ],
              "summary": "Получение JWT-токена доступа ЕХД по коду авторизации KeyCloak",
              "description": "Возвращает JWT-токен доступа с данными пользователя после успешной аутентификации в KeyCloack",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/AuthCodeQueryParam"
                  },
                  {
                      "$ref": "#/components/parameters/RedirectUrlQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/TokenResponse"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/auth/refreshToken": {
          "post": {
              "tags": [
                  "auth"
              ],
              "summary": "Получение нового access- и refresh-токена доступа ЕХД по refresh-токену.",
              "description": "Возвращает access-токен доступа с данными пользователя и refresh-токен",
              "requestBody": {
                  "$ref": "#/components/requestBodies/RefreshTokenRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/TokenResponse"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Время жизни refresh-токена истекло.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/BadRequestError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Время жизни refresh-токена истекло": {
                                      "$ref": "#/components/examples/RefreshTokenTimeOverError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/auth/sessionCancel": {
          "get": {
              "tags": [
                  "auth"
              ],
              "summary": "Прекращение сеанса доступа пользователя из таблицы активных сессий",
              "description": "Метод используется для прерывания сеанса доступа из таблицы Активные сессии и одновременного отзыва JWT-токена доступа пользователя, выданного Gateway-сервисом",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/accessJwtIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/StopSessionResponse"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - У пользователя нет прав администратора.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/ForbiddenError"
                              },
                              "examples": {
                                  "Запрещен доступ к прекращению сеансов доступа других пользователей": {
                                      "$ref": "#/components/examples/SessionCancelForbiddenErrorResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/auth/logout": {
          "get": {
              "tags": [
                  "auth"
              ],
              "summary": "Отзыв JWT-токена пользователя",
              "description": "Метод используется для отзыва JWT-токена доступа пользователя, выданного Gateway-сервисом. Сам токен передается в заголовках.",
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/LogoutOKResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/auth/sessions/search": {
          "post": {
              "tags": [
                  "auth"
              ],
              "summary": "Получение активных сеансов пользователей",
              "description": "Возвращает список активных сеансов пользователей",
              "parameters": [
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке сеансов. Поиск производится по атрибутам `Логин`, `Фамилия`, `Имя`, `Отчество` и `e-mail`. Запрос со значением `Iva` вернет всех сессии пользователей, атрибуты которых содержат подстроку `Iva`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `firstName`, `lastName`, `pathroName` `login`, `email`.\n\nПо умолчанию: `login`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "login",
                          "enum": [
                              "lastName",
                              "firstName",
                              "pathroName",
                              "login",
                              "email"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/SessionListRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/SessionListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SessinListItemArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/auth/securityEvents/search": {
          "post": {
              "tags": [
                  "auth"
              ],
              "summary": "Поиск по логу событий безопасности",
              "description": "Позволяет искать по логу событий безопасности,\nсвязанных c аутентификацией, блокировками, а тажке изменением настроек пользователей.",
              "parameters": [
                  {
                      "name": "dateFrom",
                      "in": "query",
                      "required": true,
                      "description": "Дата начала периода, за который возвращаются события безопасности (формат dd.MM.YYYY).",
                      "schema": {
                          "$ref": "_common.yaml#/components/schemas/DateFormat"
                      }
                  },
                  {
                      "name": "dateUntil",
                      "in": "query",
                      "required": true,
                      "description": "Дата конца периода, за который возвращаются события безопасности (формат dd.MM.YYYY).",
                      "schema": {
                          "$ref": "_common.yaml#/components/schemas/DateFormat"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых событий (от `1` до `500`).",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 500
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "login",
                      "in": "query",
                      "required": false,
                      "description": "Поиск по логину пользователя.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "eventType",
                      "in": "query",
                      "required": false,
                      "description": "Фильтр по типам событий безопасности:\n  - `loginAttempt` - попытка входа\n  - `login` - вход в систему\n  - `logout` - выход из системы\n  - `passwordReset` - сброс пароля\n  - `sessionCancel` - системное преркащение сеанса\n  - `userCreate` - создание пользователя\n  - `userAccessChange` - изменение прав доступа пользователя\n  - `userBlock` - блокировка пользователя\n  - `userUnblock` - разблокировка пользователя\n  - `userDelete` - удаление пользователя\n  - `userRestore` - восстановление пользователя\n\nЕсли параметр не передан, возвращаются любые события.",
                      "schema": {
                          "type": "array",
                          "items": {
                              "$ref": "#/components/schemas/SecurityEventTypeTagIdEnum"
                          }
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/SecurityEventListItem"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/pushsubs/search": {
          "post": {
              "tags": [
                  "pushsubs"
              ],
              "summary": "Получение списка подписок систем",
              "description": "Возвращает список подписок",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых подписок (число от `1` до `100`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке подписок. Поиск производится по атрибутам `id`, `systemName`, `systemLogin` и `url`. ",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `id`, `systemName`, `systemLogin` и `url`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "systemName",
                              "systemLogin",
                              "url"
                          ]
                      }
                  },
                  {
                      "name": "status",
                      "in": "query",
                      "required": false,
                      "description": "Фильтр по статусу подписки. Передается техническое наименование (тэг) статуса.\nЕсли параметр не указан, возвращаются подписки, находящиеся в любом статусе.",
                      "schema": {
                          "$ref": "#/components/schemas/PushsubStatusTagIdEnum"
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/pushsubListRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/PushsubListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PushsubListArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  }
              }
          }
      },
      "/pushsubs": {
          "post": {
              "tags": [
                  "pushsubs"
              ],
              "summary": "Создание подписки",
              "description": "Создает новую подписку системы на push-уведомления\n\nПо умолчанию она будет неактивной, для изменения статуса используется метод `PUT /pushsubs/{subscriptionId}/status`.\n\nПри настройки подписки для сборных каталогов (параметр `forAccum` = `true`) выбор типа push-уведомления (`pushType`) невозможен (для сборных только `json`).\n\nЕсли включена авторизация в сервисе приема push-уведомлениий (параметр `needAuth` = `true`), \nто поля `authLogin` и `authPassword` обязательны к заполнению. \n\nДля загрузки сертификата необходимо использовать файловый сервис и метод POST `/files`. \nЕсли передается сертификат (поле `certId`), то формат файла сертификата должен быть `p12` и \nполе `certPassword` обязательно к заполнению.",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Pushsub"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/PushsubCreateRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PushsubCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - При передаче необходимости авторизации в сервисе (параметр `needAuth=true`) не передан логин авторизации (поле `authLogin`);\n  - При передаче необходимости авторизации в сервисе (параметр `needAuth=true`) не передан логин авторизации (поле `authPassword`);\n  - Передан недопустимый формат файла сертификата;\n  - При наличии файла сертификата не передана парольная фраза сертификата (поле `certPassword`);\n  - При передаче отметки о необходимости передавать геометрию в СК EPSG:4326  (параметр `isWGS84=true`) не передана необходимость вклучать геометрию в push-уведомление (параметр `withGeo`).      ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/MissingParamsError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/OutOfScopeError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не переданы обязательные для авторизации поля": {
                                      "$ref": "#/components/examples/NotFoundLoginOrPasswordId"
                                  },
                                  "Передан не допустимый формат файла сертификата": {
                                      "$ref": "#/components/examples/CertIdNotP12Error"
                                  },
                                  "Не передано обязательное для сертификата поле": {
                                      "$ref": "#/components/examples/NotFoundCertLogin"
                                  },
                                  "Передана доп. настройка геометрии без отметки о необходимости включать геометрию": {
                                      "$ref": "#/components/examples/NotFoundWithGeoForWGS"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует информационной системы с указанным идентификатором;\n  - Не существует файла сертификата с указанным идентификатором.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id информационной системы": {
                                      "$ref": "#/components/examples/SystemNotFoundError"
                                  },
                                  "Несуществующий id файла сертификата": {
                                      "$ref": "#/components/examples/CertIdNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "get": {
              "tags": [
                  "pushsubs"
              ],
              "summary": "Получение подписок по идентификаторам",
              "description": "Возвращает полную информацию о подписках систем по идентификаторам.\n\nЕсли подписка с указанными идентификатором не найдена, она не включается в массив тела ответа.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/subscriptionIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/Pushsub"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PushsubArrayResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "pushsubs"
              ],
              "summary": "Удаление подписки",
              "description": "Метод используется для удаления подписок.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/subscriptionIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PushsubsDeletedResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/pushsubs/{subscriptionId}": {
          "put": {
              "tags": [
                  "pushsubs"
              ],
              "summary": "Изменение данных подписки",
              "description": "Изменение данных подписки\n\nПри настройки подписки для сборных каталогов (параметр `forAccum` = `true`) выбор типа push-уведомления (`pushType`) невозможен (для сборных только `json`).\n\nЕсли включается авторизация в сервисе приема push-уведомлениий (параметр `needAuth` = `true`), \nто поля `authLogin` и `authPassword` обязательны к заполнению (проверка со стороны базы).  \n\nДля загрузки сертификата необходимо использовать файловый сервис и метод POST `/files`. Если передается сертификат (поле `certId`), \nто формат файла сертификата должен быть `p12` и поле `certPassword` обязательно к заполнению (проверка поля `certPassword` со стороны базы).",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/subscriptionIdPathParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Pushsub"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/PushsubModifyRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PushsubOkResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Передан недопустимый формат файла сертификата.    \n  - При передаче отметки о необходимости передавать геометрию в СК EPSG:4326  (параметр `isWGS84=true`) не передана необходимость вклучать геометрию в push-уведомление (параметр `withGeo`).      ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/MissingParamsError"
                                      },
                                      {
                                          "$ref": "_common.yaml#/components/schemas/OutOfScopeError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Передан не допустимый формат файла сертификата": {
                                      "$ref": "#/components/examples/CertIdNotP12Error"
                                  },
                                  "Передана доп. настройка геометрии без отметки о необходимости включать геометрию": {
                                      "$ref": "#/components/examples/NotFoundWithGeoForWGS"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует информационной системы с указанным идентификатором;\n  - Не существует файла сертификата с указанным идентификатором.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id информационной системы": {
                                      "$ref": "#/components/examples/SystemNotFoundError"
                                  },
                                  "Несуществующий id файла сертификата": {
                                      "$ref": "#/components/examples/CertIdNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/pushsubs/{subscriptionId}/status": {
          "put": {
              "tags": [
                  "pushsubs"
              ],
              "summary": "Изменение статуса подписки",
              "description": "Выполняет изменение статуса подписки.\n\nПри изменении статуса на Активный автоматически запускается формирование и отправка уведомлений.        \nПри изменении статуса на Неактивный формирование и отправка уведомлений останавливается.\nПользователь может только поставить статусы \"Активна\" и \"Неактивна\". \n\nСтатус \"Временно заблокирована\" проставляется только системой, когда пуш-уведомления не принимаются пользователем. \nСтатус снимается через 1 час и далее все накопленные пуши отправляются повторно на отправку.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/subscriptionIdPathParam"
                  },
                  {
                      "name": "status",
                      "in": "query",
                      "required": true,
                      "description": "Обновленный статус подписки",
                      "schema": {
                          "type": "string",
                          "enum": [
                              "active",
                              "inactive"
                          ]
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Статус изменен на Активный": {
                                      "$ref": "#/components/examples/PushsubStatusChangedToActiveResponse"
                                  },
                                  "Статус изменен на Неактивный": {
                                      "$ref": "#/components/examples/PushsubStatusChangedToInactiveResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PushsubNotFound"
                  }
              }
          }
      },
      "/pushsubs/{subscriptionId}/catalogs/search": {
          "post": {
              "tags": [
                  "pushsubs"
              ],
              "summary": "Получение списка каталогов, входящих в подписку",
              "description": "Возвращает информацию о неудаленных каталогах заполнения, которые входят в подписку.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/subscriptionIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов (число от `1` до `100`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос в списке каталогов.             \nПоиск производится по полям `id`, `fullName`. \nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги, идентификатор или наименование которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `id`, `fullName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName"
                          ]
                      }
                  },
                  {
                      "name": "status",
                      "in": "query",
                      "required": false,
                      "description": "Фильтр по статусу подписки каталога. Передается техническое наименование (тэг) статуса.\nЕсли параметр не указан, возвращаются каталоги, находящиеся в любом статусе.",
                      "schema": {
                          "type": "string",
                          "enum": [
                              "active",
                              "inactive"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/subscriptionRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/PushsubSubscriptionCatalogInfoListItem"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PushsubSubscriptionCatalogInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/PushsubNotFound"
                  }
              }
          }
      },
      "/pushsubs/{subscriptionId}/catalogs": {
          "post": {
              "tags": [
                  "pushsubs"
              ],
              "summary": "Добавление каталогов в подписку",
              "description": "Создает связь между подпиской и каталогами заполнения. \nПри добавлении каталогов в подписку статус подписки активен для всех каталогов.\nДля дальнейшей смены статуса каталогов в подписке необходимо использовать метод `/pushsubs/{subscriptionId}/catalogs/status`.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/subscriptionIdPathParam"
                  }
              ],
              "requestBody": {
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "description": "Массив идентификаторов каталогов",
                              "type": "array",
                              "items": {
                                  "type": "integer"
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/PushsubSubscriptionCatalogRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PushsubSubscriptionCatalogAddResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Не существует подписки с указанным идентификатором.\n  - Не существует каталога с указанным идентификатором.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "oneOf": [
                                      {
                                          "$ref": "_common.yaml#/components/schemas/NotFoundError"
                                      }
                                  ]
                              },
                              "examples": {
                                  "Не существует подписки с указанным идентификатором": {
                                      "$ref": "#/components/examples/PushsubNotFoundError"
                                  },
                                  "Не существует каталога с указанным идентификатором": {
                                      "$ref": "#/components/examples/CatalogNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "pushsubs"
              ],
              "summary": "Удаление каталогов из подписки",
              "description": "Метод используется для удаления каталогов из подписки.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/subscriptionIdPathParam"
                  }
              ],
              "requestBody": {
                  "required": true,
                  "content": {
                      "application/json": {
                          "schema": {
                              "description": "Массив идентификаторов каталогов",
                              "type": "array",
                              "items": {
                                  "type": "integer"
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/PushsubSubscriptionCatalogRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PushsubSubscriptionCatalogDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PushsubNotFound"
                  }
              }
          }
      },
      "/pushsubs/{subscriptionId}/catalogs/status": {
          "put": {
              "tags": [
                  "pushsubs"
              ],
              "summary": "Изменение статуса подписки каталога",
              "description": "Выполняет изменение статуса подписки каталога.\n\nПри изменении статуса на Неактивный новые уведомления не будут отправляться системе.\n\nЕсли в теле запроса передан пустой массив, \nто статус подписки каталога изменится для всех каталогов подписки (статус изменится на передаваемый в запросе).",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/subscriptionIdPathParam"
                  },
                  {
                      "name": "status",
                      "in": "query",
                      "required": true,
                      "description": "Обновленный статус подписки каталогов. \nДля пользователя возможна установка статусов:\n\n- `inactive` - Неактивна\n- `active` - Активна",
                      "schema": {
                          "type": "string",
                          "enum": [
                              "active",
                              "inactive"
                          ]
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "array",
                              "items": {
                                  "type": "integer"
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/PushsubSubscriptionCatalogRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Статус изменен на Активный": {
                                      "$ref": "#/components/examples/PushsubStatusChangedToActiveResponse"
                                  },
                                  "Статус изменен на Неактивный": {
                                      "$ref": "#/components/examples/PushsubStatusChangedToInactiveResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PushsubNotFound"
                  }
              }
          }
      },
      "/geodata/validate": {
          "post": {
              "tags": [
                  "geodata"
              ],
              "summary": "(внутр.) Первичная валидация геоданных объекта.",
              "description": "Проводит первичную валидацию корректности геоданных объекта с использованием функции PostGIS - ST_IsValidDetail.\nДля валидации доступны только координаты в СК EPSG:4326",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ObjectGeodata"
                          },
                          "examples": {
                              "Пример валидных геоданных": {
                                  "$ref": "#/components/examples/GeodataObject"
                              },
                              "Пример невалидных геоданных": {
                                  "$ref": "#/components/examples/InvalidGeodataObject"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ValidateResponse"
                              },
                              "examples": {
                                  "Валидные геоданные": {
                                      "$ref": "#/components/examples/TrueValidateResponse"
                                  },
                                  "Невалидные геоданные": {
                                      "$ref": "#/components/examples/FalseValidateResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Некорректный формат массива координат\n  - Недоступная система координат для валидации",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Некорректный формат массива координат": {
                                      "$ref": "#/components/examples/IncorrectCoordinatesArrayBadRequestResponse"
                                  },
                                  "Недоступная система координат": {
                                      "$ref": "#/components/examples/NotAllowedSrsBadRequestResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/geodata/reprojection": {
          "post": {
              "tags": [
                  "geodata"
              ],
              "summary": "(внутр.) Перепроецирование координат",
              "description": "Производит перепроицирование координат геоданных объекта из одной системы координат (СК) в другую.\nИспользуется сервис перепроецирования от Цифрового двойника, метод GdalTasks/ConvertGeometryData.",
              "parameters": [
                  {
                      "name": "sourceSrs",
                      "description": "Входящая СК",
                      "in": "query",
                      "required": false,
                      "schema": {
                          "$ref": "#/components/schemas/SpatialReferenceSystemEnum"
                      }
                  },
                  {
                      "name": "targetSrs",
                      "description": "Исходящая СК",
                      "in": "query",
                      "required": false,
                      "schema": {
                          "$ref": "#/components/schemas/SpatialReferenceSystemEnum"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ObjectGeodata"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/ReprojectionRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ObjectGeodata"
                              },
                              "examples": {
                                  "МСК->ВГС": {
                                      "$ref": "#/components/examples/ReprojectionResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Некорректный формат массива координат",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/BadRequestError"
                              },
                              "examples": {
                                  "Некорректный формат массива координат": {
                                      "$ref": "#/components/examples/IncorrectCoordinatesArrayBadRequestResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/geodata/tileEGKO/{z}/{x}/{y}.png": {
          "get": {
              "tags": [
                  "geodata"
              ],
              "summary": "Получение тайлов ЕГКО",
              "description": "Метод получения тайлов ЕГКО.\nИспользуется сервис от Цифрового двойника, метод vks3/cache_moscow_egko_map\nКаждый тайл имеет фиксированный размер (256x256 пикселей).",
              "parameters": [
                  {
                      "name": "z",
                      "description": "Уровень масштабирования или зум. Доступно от 0 до 19.",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 19
                      }
                  },
                  {
                      "name": "x",
                      "description": "Координата тайла по горизонтали (осевая координата).",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer"
                      }
                  },
                  {
                      "name": "y",
                      "description": "Координата тайла по вертикали (осевая координата).",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешное получение тайла.",
                      "content": {
                          "image/png": {
                              "schema": {
                                  "type": "string",
                                  "format": "binary"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/objectCategories/search": {
          "post": {
              "tags": [
                  "objectCategories"
              ],
              "summary": "Поиск по списку категорий объектов",
              "description": "Возвращает список категорий объектов, удовлетворящий поисковым критериям.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nОтвет включает список объектов категорий с указанием идентификатора `id` и названий `rusName` и `enName`.\n\nДля фильтрации используется тело запроса.",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых категорий (число от `1` до `100`). По умолчанию `50`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 100
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "notUsedOnly",
                      "in": "query",
                      "description": "Параметр, определяющий будут ли возвращены только те категории, которые не используются в других каталогах. По умолчанию: `false`.",
                      "required": false,
                      "schema": {
                          "type": "boolean",
                          "default": false
                      }
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку категорий. Поиск производится по идентификатору `id` и наименованиям `rusName`, `enName`.\n\nЗапрос со значением `12` вернет все категории, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `rusName`, `enName`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "rusName",
                              "enName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку категорий объектов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "rusName",
                                                              "enName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/ObjectCategorySearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ObjectCategory"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ObjectCategoryArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  }
              }
          }
      },
      "/objectCategories": {
          "get": {
              "tags": [
                  "objectCategories"
              ],
              "summary": "Получение категорий объектов по идентификаторам",
              "description": "Возвращает полную информацию о категориях объектов по идентификаторам.\n\nЕсли категория объектов с указанными идентификатором не найдена, она не включаются в массив тела ответа.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/objectCategoryIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ObjectCategory"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ObjectCategoryArrayResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "objectCategories"
              ],
              "summary": "Создание категории объектов",
              "description": "Создает категорию объектов. В запросе передается наименование категории в поле `rusName`, которое должно быть уникальным.",
              "requestBody": {
                  "$ref": "#/components/requestBodies/objectCategoryRequestBody"
              },
              "responses": {
                  "201": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/CreatedResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ObjectCategoryCreatedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/ObjectCategoryBadRequestResponse"
                  }
              }
          },
          "delete": {
              "tags": [
                  "objectCategories"
              ],
              "summary": "Удаление категорий объектов",
              "description": "Удаляет категории объектов по переданным идентификаторам.\n\nЕсли категория используется хотя бы в одном каталоге, будет возвращена ошибка и удаление всех переданных категорий не будет выполнено.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/objectCategoryIdsQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ObjectCategoryDeletedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Одна из переданных категорий объектов используется в каталоге.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/ResourceCannotBeDeletedError"
                              },
                              "examples": {
                                  "Категория объектов используется в каталоге": {
                                      "$ref": "#/components/examples/ObjectCategoryIsUsedInCatalogsError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/objectCategories/{categoryId}": {
          "put": {
              "tags": [
                  "objectCategories"
              ],
              "summary": "Изменение информации о категории объектов",
              "description": "Обновляет информацию о категории объектов.\n\nВ запросе передается новое наименование категории в поле `rusName`, которое должно быть уникальным.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/objectCategoryIdPathParam"
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/objectCategoryRequestBody"
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/OkResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ObjectCategoryEditedResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "$ref": "#/components/responses/ObjectCategoryBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/ObjectCategoryNotFoundErrorResponse"
                  }
              }
          }
      },
      "/objectCategories/{categoryId}/catalogs/search": {
          "post": {
              "tags": [
                  "objectCategories"
              ],
              "summary": "Получение информации о каталогах, в которых используется категория объектов",
              "description": "Возвращает информацию о каталогах, в которых используется категория объектов.\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `catalogId` и `catalogName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/objectCategoryIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых каталогов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `catalogId` и `catalogName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги, идентификатор, наименование или название атрибута в которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/dataModesFilterQueryParam"
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogStatusesFilterQueryParam"
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.\nДопустимые значения: `catalogId` и `catalogName`.\n\nПо умолчанию: `catalogId`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "catalogId",
                          "enum": [
                              "catalogId",
                              "catalogName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов, в которых используется категория объектов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "catalogId",
                                                              "catalogName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/ObjectCategoryCatalogSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/ObjectCategoryCatalogInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/ObjectCategoryCatalogInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/ObjectCategoryNotFoundErrorResponse"
                  }
              }
          }
      },
      "/oivs/{oivId}/NEWcatalogs/search": {
          "post": {
              "tags": [
                  "oivs"
              ],
              "summary": "Получение информации о каталогах заполнения, в которых указана ОИВ",
              "description": "Возвращает информацию о неудаленных каталогах заполнения, в которые ОИВ поставляет информацию \n(указана в поле \"Поставщик информации\").\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск и пагинацию. Подробнее см. параметры запроса.\n\nДля фильтрации по полям `id` и `fullName` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/oivIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "required": false,
                      "description": "Количество возвращаемых каталогов (от `1` до `200`). По умолчанию `100`.",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "required": false,
                      "description": "Текстовый поисковый запрос по списку каталогов.\nПоиск производится по полям `id` и `fullName`.\nВ ответе будут представлены только те каталоги, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все каталоги, идентификатор или наименование которых содержит подстроку `12`.",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "fullName"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку каталогов, в которых указана ОИВ",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "fullName"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/OivCatalogSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "catalogs.yaml#/components/schemas/CommonCatalogInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/OivCatalogInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/OivNotFoundResponse"
                  }
              }
          }
      },
      "/regexps/{regexId}/NEWattributes/search": {
          "post": {
              "tags": [
                  "regexps"
              ],
              "summary": "Получение информации об атрибутах, в которых используется регулярное выражение",
              "description": "Возвращает список неудаленных атрибутов, в которых используется регулярное выражение. \nАтрибут может использоваться или не использоваться в каталоге. Для поиска атрибутов в каталоге используется метод /catalogAttributes/search\n\nМетод позволяет выполнять сортировку, фильтрацию, текстовый поиск по списку и пагинацию. Подробнее см. параметры запроса.\nДля фильтрации по полям `id` и `name` используется тело запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/regexIdPathParam"
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Количество возвращаемых атрибутов (число от `1` до `200`). По умолчанию `100`.",
                      "required": false,
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 100,
                          "minimum": 1,
                          "maximum": 200
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/offsetQueryParam"
                  },
                  {
                      "name": "search",
                      "in": "query",
                      "description": "Текстовый поисковый запрос по списку атрибутов.\nПоиск производится по полям `id` и `name`.\nВ ответе будут представлены только те атрибуты, в указанных полях которых содержится поисковое значение.\n\nЗапрос со значением `12` вернет все атрибуты, идентификатор или наименование которых содержит подстроку `12`.",
                      "required": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "Поле, по которому производится сортировка. Допустимые значения: `id`, `name`.\n\nПо умолчанию: `id`.",
                      "required": false,
                      "schema": {
                          "type": "string",
                          "default": "id",
                          "enum": [
                              "id",
                              "name"
                          ]
                      }
                  },
                  {
                      "$ref": "_common.yaml#/components/parameters/orderByAscQueryParam"
                  }
              ],
              "requestBody": {
                  "description": "Пример тела запроса с фильтрами по списку атрибутов",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "filters": {
                                      "type": "array",
                                      "items": {
                                          "allOf": [
                                              {
                                                  "$ref": "_common.yaml#/components/schemas/BasicFilter"
                                              },
                                              {
                                                  "properties": {
                                                      "attribute": {
                                                          "enum": [
                                                              "id",
                                                              "name"
                                                          ]
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              }
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/NEWRegularExpressionAttributeSearchRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/NEWRegularExpressionAttributeInfo"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/NEWRegularExpressionAttributeInfoArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "400": {
                      "$ref": "_common.yaml#/components/responses/FilterBadRequestResponse"
                  },
                  "404": {
                      "$ref": "#/components/responses/RegularExpressionNotFoundResponse"
                  }
              }
          }
      },
      "/publicationCatalog/{catalogId}/versions": {
          "get": {
              "tags": [
                  "publicationCatalogs"
              ],
              "summary": "Получение версий каталога публикации",
              "description": "Возвращает список версий каталога публикации отсортированных по убыванию номера версии.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/PublicationCatalogVersion"
                                  }
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/PublicationCatalogVersionArrayResponse"
                                  }
                              }
                          }
                      },
                      "headers": {
                          "X-Total-Count": {
                              "$ref": "_common.yaml#/components/headers/X-Total-Count"
                          }
                      }
                  },
                  "404": {
                      "$ref": "#/components/responses/PublicationCatalogIdNotFoundResponse"
                  }
              }
          }
      },
      "/signatures/{signatureId}/log": {
          "get": {
              "tags": [
                  "signatures"
              ],
              "summary": "Получение лога подписания каталога",
              "description": "Метод используется для получения лога выбранного подписания выбранного каталога. В ответе передается ссылка на лог или csv файл (TODO)",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/signatureIdPathParam"
                  },
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdQueryParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "object",
                                  "properties": {
                                      "log": {
                                          "type": "string",
                                          "description": "ссылка на лог или csv файл (TODO)"
                                      }
                                  },
                                  "required": [
                                      "log"
                                  ]
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/SigningLogRequest"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "### Возможные ошибки бизнес-логики:\n  - Запрошенный id каталога не существует.\n  - Запрошенный id подписания не существует.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "_common.yaml#/components/schemas/NotFoundError"
                              },
                              "examples": {
                                  "Несуществующий id каталога": {
                                      "$ref": "catalogs.yaml#/components/examples/CatalogNotFoundError"
                                  },
                                  "Несуществующий id подписания": {
                                      "$ref": "#/components/examples/SignatureNotFoundError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/fillerst/catalogs/{catalogId}/map": {
          "get": {
              "tags": [
                  "fillrest"
              ],
              "summary": "Получение настроек карты каталога заполнения",
              "description": "Возвращает настройки карты.",
              "parameters": [
                  {
                      "$ref": "catalogs.yaml#/components/parameters/catalogIdPathParam"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Успешный ответ.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "catalogs.yaml#/components/schemas/FillingCatalogMap"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "catalogs.yaml#/components/examples/FillingCatalogMapResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "$ref": "catalogs.yaml#/components/responses/FillingCatalogNotFoundResponse"
                  }
              }
          }
      },
      "/publrest/catalog/aggregate": {
          "post": {
              "tags": [
                  "publrest"
              ],
              "summary": "Выполнение агрегирующего запроса",
              "description": "Метод возвращает результат агрегирующего запроса.",
              "parameters": [
                  {
                      "$ref": "#/components/parameters/ehdSystemHeaderParam"
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/CatalogAggregateRequest"
                          },
                          "examples": {
                              "Пример": {
                                  "$ref": "#/components/examples/CatalogAggregateRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив в параметре `response`.",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/CatalogAggregateResponse"
                              },
                              "examples": {
                                  "Пример": {
                                      "$ref": "#/components/examples/CatalogAggregateResponse"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/getCatalogList": {
          "post": {
              "tags": [
                  "soap"
              ],
              "summary": "Получение списка каталогов заполнения",
              "description": "Возвращает список каталогов заполнения, доступных системе-поставщику, а также общие данные каждого каталога",
              "requestBody": {
                  "content": {
                      "application/soap+xml": {
                          "schema": {
                              "$ref": "#/components/schemas/getCatalogListRequest"
                          },
                          "examples": {
                              "Запрос списка каталогов": {
                                  "$ref": "#/components/examples/getCatalogListRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ.\nПри отсутствии элементов, удовлетворяющих условиям запроса, возвращается пустой массив.\n\nЕсли у системы-потребителя отсутствует доступ к каким-либо каталогам, то также возвращается пустой массив.   ",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getCatalogListResponse"
                              },
                              "examples": {
                                  "Список каталогов": {
                                      "$ref": "#/components/examples/getCatalogListResponse"
                                  }
                              }
                          }
                      }
                  },
                  "500": {
                      "$ref": "#/components/responses/UnauthorizedError"
                  }
              }
          }
      },
      "/getCatalogSpec": {
          "post": {
              "tags": [
                  "soap"
              ],
              "summary": "Получение спецификации каталога заполнения",
              "description": "Возвращает перечень атрибутов каталога, а также свойста этих атрибутов. ",
              "requestBody": {
                  "content": {
                      "application/soap+xml": {
                          "schema": {
                              "$ref": "#/components/schemas/getCatalogSpecRequest"
                          },
                          "examples": {
                              "Запрос спецификации каталога": {
                                  "$ref": "#/components/examples/getCatalogSpecRequest"
                              }
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ           ",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getCatalogSpecResponse"
                              },
                              "examples": {
                                  "Спецификация каталога": {
                                      "$ref": "#/components/examples/getCatalogSpecResponse"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Доступ к каталогу запрещен. Отдает HTTP/1.1 200 OK.",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getCatalogSpecForbiddenError"
                              },
                              "examples": {
                                  "Доступ к каталогу запрещен": {
                                      "$ref": "#/components/examples/getCatalogSpecForbiddenError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Запрошенный id каталога заполнения не существует. Отдает HTTP/1.1 200 OK.",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getCatalogSpecForbiddenError"
                              },
                              "examples": {
                                  "Запрошенный id каталога не существует": {
                                      "$ref": "#/components/examples/getCatalogSpecForbiddenError"
                                  }
                              }
                          }
                      }
                  },
                  "500": {
                      "$ref": "#/components/responses/UnauthorizedError"
                  }
              }
          }
      },
      "/getCatalogItems": {
          "post": {
              "tags": [
                  "soap"
              ],
              "summary": "Получение данных каталога заполнения",
              "description": "Возвращает список идентификаторов атрибутов каталога, а также свойств и значений этих атрибутов. ",
              "requestBody": {
                  "content": {
                      "application/soap+xml": {
                          "schema": {
                              "$ref": "#/components/schemas/getCatalogItemsRequest"
                          },
                          "examples": {
                              "Запрос данных каталога": {
                                  "$ref": "#/components/examples/getCatalogItemsRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Список id каталогов с общими данными",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getCatalogItemsResponse"
                              },
                              "examples": {
                                  "Данные каталога": {
                                      "$ref": "#/components/examples/getCatalogItemsResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Переданный оператор не может быть применен для указанного атрибута (несоответствие типа). Отдает HTTP/1.1 200 OK.",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getCatalogItemsInconsistencyError"
                              },
                              "examples": {
                                  "Переданный оператор не может быть применен для указанного атрибута": {
                                      "$ref": "#/components/examples/getCatalogItemsInconsistencyError"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Доступ к каталогу запрещен. Отдает HTTP/1.1 200 OK.",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getCatalogItemsForbiddenError"
                              },
                              "examples": {
                                  "Доступ к каталогу запрещен": {
                                      "$ref": "#/components/examples/getCatalogItemsForbiddenError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Запрошенный id каталога заполнения не существует. Отдает HTTP/1.1 200 OK.",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getCatalogItemsForbiddenError"
                              },
                              "examples": {
                                  "Доступ к каталогу запрещен": {
                                      "$ref": "#/components/examples/getCatalogItemsForbiddenError"
                                  }
                              }
                          }
                      }
                  },
                  "500": {
                      "$ref": "#/components/responses/UnauthorizedError"
                  }
              }
          }
      },
      "/getCatalogStats": {
          "post": {
              "tags": [
                  "soap"
              ],
              "summary": "Получение статистики по каталогу заполнения",
              "description": "Возвращает общие данные каталога, количество объектов, имеющих различный статус. ",
              "requestBody": {
                  "content": {
                      "application/soap+xml": {
                          "schema": {
                              "$ref": "#/components/schemas/getCatalogStatsRequest"
                          },
                          "examples": {
                              "Запрос статистики каталога": {
                                  "$ref": "#/components/examples/getCatalogStatsRequest"
                              }
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "Возможные варианты ответа:\n- Успешный ответ\n- Доступ к каталогу запрещен\n- Каталог не существует",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getCatalogStatsResponse"
                              },
                              "examples": {
                                  "Статистика каталога": {
                                      "$ref": "#/components/examples/getCatalogStatsResponse"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Запрошенный id каталога заполнения не существует. Отдает HTTP/1.1 200 OK.",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getCatalogStatsForbiddenError"
                              }
                          }
                      }
                  },
                  "500": {
                      "$ref": "#/components/responses/UnauthorizedError"
                  }
              }
          }
      },
      "/getAllDict": {
          "post": {
              "tags": [
                  "soap"
              ],
              "summary": "Получение списка справочников",
              "description": "Возвращает список справочников, связанных с каталогами заполнения, доступными системе-поставщику, а также общие данные каждого каталога           ",
              "responses": {
                  "200": {
                      "description": "Список id справочников с общими данными",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getAllDictResponse"
                              },
                              "examples": {
                                  "Список справочников": {
                                      "$ref": "#/components/examples/getAllDictResponse"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Доступ к каталогу запрещен. Отдает HTTP/1.1 200 OK.",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getAllDictForbiddenError"
                              },
                              "examples": {
                                  "Доступ к каталогу запрещен": {
                                      "$ref": "#/components/examples/getAllDictForbiddenError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Запрошенный id каталога заполнения не существует. Отдает HTTP/1.1 200 OK.",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getAllDictForbiddenError"
                              },
                              "examples": {
                                  "Запрошенный id каталога не существует": {
                                      "$ref": "#/components/examples/getAllDictForbiddenError"
                                  }
                              }
                          }
                      }
                  },
                  "500": {
                      "$ref": "#/components/responses/UnauthorizedError"
                  }
              }
          }
      },
      "/getDictItem": {
          "post": {
              "tags": [
                  "soap"
              ],
              "summary": "Получение данных справочника",
              "description": "Возвращает список значений справочников",
              "requestBody": {
                  "content": {
                      "application/soap+xml": {
                          "schema": {
                              "$ref": "#/components/schemas/getDictItemRequest"
                          },
                          "examples": {
                              "Запрос данных справочника": {
                                  "$ref": "#/components/examples/getDictItemRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Список значений справочника",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getDictItemResponse"
                              },
                              "examples": {
                                  "Список значений справочника": {
                                      "$ref": "#/components/examples/getDictItemResponse"
                                  }
                              }
                          }
                      }
                  },
                  "403": {
                      "description": "Доступ к справочнику запрещен.",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getDictItemForbiddenError"
                              },
                              "examples": {
                                  "Доступ к каталогу запрещен": {
                                      "$ref": "#/components/examples/getDictItemForbiddenError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Запрошенный id справочника не существует.",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/getDictItemForbiddenError"
                              },
                              "examples": {
                                  "Запрошенный id каталога не существует": {
                                      "$ref": "#/components/examples/getDictItemForbiddenError"
                                  }
                              }
                          }
                      }
                  },
                  "500": {
                      "$ref": "#/components/responses/UnauthorizedError"
                  }
              }
          }
      },
      "/setSignatureCatalog": {
          "post": {
              "tags": [
                  "soap"
              ],
              "summary": "Подписание метаданных каталога",
              "description": "Подписание метаданных каталога без подписания объектов",
              "requestBody": {
                  "content": {
                      "application/soap+xml": {
                          "schema": {
                              "allOf": [
                                  {
                                      "$ref": "#/components/schemas/setSignatureHeadRequest"
                                  },
                                  {
                                      "$ref": "#/components/schemas/setSignatureRequest"
                                  }
                              ]
                          },
                          "examples": {
                              "Метаданные каталога и подписи": {
                                  "$ref": "#/components/examples/setSignatureRequest"
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Успешный ответ на запрос",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/setSignatureCatalogResponse"
                              },
                              "examples": {
                                  "Успешно": {
                                      "$ref": "#/components/examples/setSignatureCatalogResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Отдает HTTP/1.1 200 OK.\nОшибки подписания:\n- Не найдены элементы для проверки подписи в запросе\n- Не найден элемент Signature\n- Сертификат не найден\n- Подпись не прошла проверку. Используется недействительный алгоритм\n- Подпись не прошла проверку\n- Подпись не соответствует загруженным данным",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/CommonError",
                                  "examples": null,
                                  "Не найдены элементы для проверки подписи в запросе": {
                                      "$ref": "#/components/examples/NotSignElementsError"
                                  },
                                  "Не найден элемент Signature": {
                                      "$ref": "#/components/examples/NotSignElementsError"
                                  },
                                  "Сертификат не найден": {
                                      "$ref": "#/components/examples/NotSignElementsError"
                                  },
                                  "Подпись не прошла проверку. Используется недействительный алгоритм": {
                                      "$ref": "#/components/examples/NotSignElementsError"
                                  },
                                  "Подпись не прошла проверку": {
                                      "$ref": "#/components/examples/NotSignElementsError"
                                  },
                                  "Подпись не соответствует загруженным данным": {
                                      "$ref": "#/components/examples/NotObjectSignError"
                                  }
                              }
                          }
                      }
                  },
                  "500": {
                      "description": "Ошибка отправки запроса:\n- Ошибка авторизации\n- Не удалось прочитать XML-запрос              ",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/ApiError"
                              },
                              "examples": {
                                  "Ошибка авторизации": {
                                      "$ref": "#/components/examples/UnauthorizedError"
                                  },
                                  "Не удалось прочитать XML-запрос": {
                                      "$ref": "#/components/examples/XMLReaderError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      },
      "/setDataIn": {
          "post": {
              "tags": [
                  "soap"
              ],
              "summary": "Сохранение данных каталога",
              "description": "Метод используется для сохранения объекта, его изменений, а также для удаления в каталоге заполнения.  Для изменения данных дочернего каталога необходимо передать данные родительского каталога, а для дочернего каталога заполнить атрибут parent_catalog_id.\n\nМетод может принимать только изменения в объекте. Если какие-то атрибуты не передаются, их значения не меняются.\n\nДля составления корректного запроса необходимо обернуть сообщение внутри <xml> в тег ![CDATA[ ... ]]. \n\nДля того, чтобы подписать сохраненные объекты, необходимо передать в заголовке данные цифровой подписи.  ",
              "requestBody": {
                  "content": {
                      "application/soap+xml": {
                          "schema": {
                              "oneOf": [
                                  {
                                      "$ref": "#/components/schemas/setDataInRequest"
                                  },
                                  {
                                      "$ref": "#/components/schemas/setDataInSignatureRequest"
                                  }
                              ]
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "Ответ при успешной обработке запроса",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/setDataInResponse"
                              },
                              "examples": {
                                  "Запрос успешно обработан": {
                                      "$ref": "#/components/examples/setDataInResponse"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Ошибки подписания. Отдает HTTP/1.1 200 OK:\n- Не найдены элементы для проверки подписи в запросе\n- Не найден элемент Signature\n- Сертификат не найден\n- Подпись не прошла проверку. Используется недействительный алгоритм\n- Подпись не прошла проверку\n- Не указан объект подписи",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/CommonSubscribeError"
                              },
                              "examples": {
                                  "Не найден элемент Signature": {
                                      "$ref": "#/components/examples/NotSignElementsError"
                                  },
                                  "Сертификат не найден": {
                                      "$ref": "#/components/examples/NotSignElementsError"
                                  },
                                  "Подпись не прошла проверку. Используется недействительный алгоритм": {
                                      "$ref": "#/components/examples/NotSignElementsError"
                                  },
                                  "Подпись не прошла проверку": {
                                      "$ref": "#/components/examples/SignatureHashError"
                                  },
                                  "Не удалось проверить неподписанный хеш": {
                                      "$ref": "#/components/examples/SignatureHashError"
                                  },
                                  "Не удалось проверить подписанный хеш": {
                                      "$ref": "#/components/examples/SignatureHashError"
                                  },
                                  "Не указан объект подписи": {
                                      "$ref": "#/components/examples/NotObjectSignError"
                                  },
                                  "Не найдены элементы для проверки подписи в запросе": {
                                      "$ref": "#/components/examples/NotSignElementsError"
                                  }
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Технические ошибки:\n- Не найден объект с указанным идентификатором\n- Ошибка в поле field_id            \n- Невозможно подписать атрибут объекта отдельно от основной записи (статус ?)\n- Не удалось подписать объект (статус -1)\n- Данный каталог не предусматривает наличие указанного типа геометрии (статус 0)\n- Произошла ошибка преобразования геометрии (статус 0)   ",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/setDataInResponse"
                              },
                              "examples": {
                                  "Не найден объект с указанным идентификатором": {
                                      "$ref": "#/components/examples/setDataInGlobalIdError"
                                  },
                                  "Неверно заполнен field_id": {
                                      "$ref": "#/components/examples/setDataInFieldIdError"
                                  }
                              }
                          }
                      }
                  },
                  "500": {
                      "description": "Ошибка отправки запроса:\n- Ошибка авторизации\n- Не удалось прочитать XML-запрос ",
                      "content": {
                          "application/soap+xml": {
                              "schema": {
                                  "$ref": "#/components/schemas/ApiError"
                              },
                              "examples": {
                                  "Ошибка авторизации": {
                                      "$ref": "#/components/examples/UnauthorizedError"
                                  },
                                  "Не удалось прочитать XML-запрос": {
                                      "$ref": "#/components/examples/XMLReaderError"
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
  },
  "openapi": "3.0.3",
  "info": {
      "title": "Описание внутреннего API для ЕХД 2.0",
      "description": "Описание методов для работы со сборными каталогами",
      "version": "1.0.0"
  }
}